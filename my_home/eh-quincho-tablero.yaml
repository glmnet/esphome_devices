# JST PIN 1: Looking at the socket horizontally on the PCB, when the notches where latches are inseterd (cutoffs) are at the top, the pin one is at the left.
#            This is also red wire on lipo batteries balancer


# CN1: 8 PIN                               WIRE UTP 8 PIN
# 1  GND                                   Blue
# 2  GPIO2      Tanque Flotador            White/Blue      4k7 ext pullup
# 3  GPIO39     Tanque Lleno               Green           4k7 ext pullup
# 4  GPIO35     Flujo Agua                 White/Green     4k7 ext pullup
# 5  GPIO33     TT Temperatura   DS18b20   Orange          4k7 ext pullup
# 6  GPIO15     Tanque Rebalsado           White/Orange
# 7  GPIO36     TT Testigo Calientador     White/Brown     10k ext pull up
# 8             +3.3 V                     Brown

# CN2: 5 PIN                               WIRE 5 PIN
# 1  GPIO3                                 Tan
# 2  GPIO1                                 Brown
# 3  GPIO4      Barrera                    White
# 4  +12V                                  Red
# 5  GND                                   Blue

substitutions:
  device_name: Tablero quincho

esphome:
  name: eh-quincho-tablero
  platformio_options:
    upload_speed: 921600
  on_boot:
    then:
      - light.turn_on:
          id: status_led
          effect: Status Led

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

logger:
  logs:
    light: INFO

api:

ota:
# ethernet:
#   type: LAN8720
#   mdc_pin: GPIO23
#   mdio_pin: GPIO18
#   clk_mode: GPIO0_IN
#   phy_addr: 1
#   power_pin: GPIO17
#   #enable_mdns: true

esp32:
  framework:
    type: arduino
  board: nodemcu-32s

binary_sensor:
  - platform: gpio
    id: flotador_vacio
    pin:
      inverted: true
      number: GPIO2
      mode: INPUT
    name: Tanque abajo vacio
    device_class: problem
    filters:
      - delayed_on_off: 2s # debounce for some noisy from pump or generator
    on_release:
      # tank almost full
      - sensor.template.publish:
          id: tank_liters
          state: !lambda "return 900.0;"
    on_press:
      # tank almost empty
      - sensor.template.publish:
          id: tank_liters
          state: !lambda "return 80.0;"
      # prevent pump run without water
      - delay: 50s
      - switch.turn_off: bomba_tanque
  - platform: gpio
    pin:
      number: GPIO39
      mode: INPUT
      inverted: True
    name: "Tanque abajo lleno"
    id: tanque_abajo_lleno
    filters:
      - delayed_on_off: 2s # prevent oscilattions of the sensor, we don't need high response time
  - platform: gpio
    pin:
      number: GPIO15
      mode: INPUT
    name: "Tanque abajo rebalsado"
    filters:
      - delayed_on_off: 2s
  - platform: template
    name: Calentando termotanque quincho
    id: boiler_heating
  - platform: gpio
    name: Barrera quincho
    pin:
      number: GPIO4
      inverted: True
      mode:
        pullup: True
        input: True


sensor:
  - platform: uptime
    name: ${device_name} uptime
  - platform: wifi_signal
    name: ${device_name} Wifi Signal
  - platform: dallas
    name: Temperatura termotanque quincho
    address: 0x5221e03f12646128
    filters:
      - filter_out: 85.0

  - platform: pulse_counter
    pin: GPIO35
    name: "Flujo agua"
    id: water_flow_sensor
    unit_of_measurement: "l/min"
    filters:
      - lambda: return (x / 450.0); # 450 pulses 1 liter
    on_value:
      - sensor.template.publish:
          id: tank_liters
          state: !lambda |-
            float new_level = id(tank_liters).state;
            if (isnan(new_level))
              new_level = id(flotador_vacio).state ? 50.0 : 900.0;
            new_level += x;
            if (new_level > 900.0 && id(flotador_vacio).state)
              return 900;
            if (new_level > 1000) return 1000;
            return new_level;
  - platform: template
    id: tank_liters
    on_value:
      - sensor.template.publish:
          id: tank_level
          # tank max is 1000 liters, convert to %
          state: !lambda "return x/10.0;"
    unit_of_measurement: litre
  - platform: template
    name: Nivel Tanque Abajo
    id: tank_level
    unit_of_measurement: "%"
  - platform: adc
    pin: GPIO36
    name: Termotanque calentando LDR
    entity_category: diagnostic
    update_interval: 10s
    attenuation: auto
    on_value:
      then:
        - lambda: |-
            static float previous = 0.0;
            if (previous != 0.0) {
              float delta = x - previous;
              if (delta > 0.6) // Sudden voltage increase, boiler not heating
                id(boiler_heating).publish_state(false);
              else if (delta < -0.6 && id(switchBoiler).state) // Sudden voltage decrease, boiler heating
                id(boiler_heating).publish_state(true);
            }
            previous = x;

output:
  - platform: gpio
    pin: GPIO16
    id: relay1
    inverted: true
  - platform: gpio
    pin: GPIO13
    id: relay2
    inverted: true
  - platform: gpio
    pin: GPIO14
    id: relay3
    inverted: true
  - platform: gpio
    pin: GPIO32
    id: relay4
    inverted: true

button:
  - platform: restart
    name: Reiniciar ${device_name}

switch:
  - platform: output
    name: Encendido termotanque quincho
    output: relay4
    id: switchBoiler
  - platform: output
    name: Bomba elevadora
    output: relay1
    id: bomba_tanque

light:
  - platform: binary
    name: Luz Quincho
    output: relay2
  - platform: binary
    name: Luz Cocina quincho
    output: relay3
  - platform: fastled_clockless
    pin: GPIO12
    name: Tablero Quincho Status LED
    num_leds: 1
    chipset: WS2812
    rgb_order: GRB
    id: status_led
    effects:
      - lambda:
          name: Status Led
          lambda: |-
            auto call = id(status_led).turn_on();
            call.set_transition_length(0);
            if ((App.get_app_state() & STATUS_LED_ERROR) != 0u) {
              call.set_rgb(millis() % 250u < 150u ? 0.6 : 0.01, 0, 0);
            } else if ((App.get_app_state() & STATUS_LED_WARNING) != 0u) {
              call.set_rgb(millis() % 1500u < 250u ? 0.7 : 0.01, 0, 0);
            } else {
              call.set_rgb(0.0, float(millis() % 2000u) / 3000.0, 0.0);
            }
            call.perform();

dallas:
  pin: GPIO33

interval:
  - interval: 1s
    then:
      - if:
          condition:
            binary_sensor.is_on: tanque_abajo_lleno
          then:
            lambda: |-
              float new_level = id(tank_liters).state;
              if (isnan(new_level) || new_level < 950)
                id(tank_liters).publish_state(950);
      - if:
          condition:
            switch.is_on: bomba_tanque
          # about 500 liters of water are pumped on 22 minutes so
          # about 0.38 liters every second are pumped out of the tank
          then:
            - lambda: |-
                float new_level = id(tank_liters).state;
                if (isnan(new_level))
                  new_level = id(flotador_vacio).state ? 50.0 : 900.00;

                new_level -= 0.38;
                if (new_level < 0)
                  new_level = 0;
                if (new_level < 70.0 && !id(flotador_vacio).state)
                  new_level = 70;
                id(tank_liters).publish_state(new_level);
