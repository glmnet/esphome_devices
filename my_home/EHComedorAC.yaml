substitutions:
  node_name: Comedor AC

esphome:
  name: eh-comedor-ac
  platform: ESP8266
  board: nodemcu

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

api:

ota:

logger:
  level: DEBUG

# remote_receiver:
#   id: rcvr
#   pin:
#     number: GPIO14
#     inverted: True
#     mode: INPUT_PULLUP
#   tolerance: 45%
#   dump: raw

# remote_transmitter:
#   carrier_duty_percent: 50%
#   pin: GPIO122

remote_receiver:
  id: rcvr
  pin:
    number: GPIO14
    inverted: True
    mode: OUTPUT_OPEN_DRAIN
  tolerance: 45%

remote_transmitter:
  - id: receiver_hack
    carrier_duty_percent: 100%
    pin:
      number: GPIO14
      inverted: true
      mode: OUTPUT_OPEN_DRAIN

climate:
  - platform: whirlpool
    name: whirlpool ac
    id: whirlpool_ac
    sensor: temp_comedor
    receiver_id: rcvr
    model: DG11J1-91

binary_sensor:
  - platform: status
    name: "${node_name} Status"
  - platform: gpio
    id: whirlpool_on
    name: Whirlpool on
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
    filters:
      - invert:
      - delayed_off: 200ms

    # on_press:
    #   - logger.log: 'Detected AC is on'
    #   - lambda: |-
    #       auto mode = id(whirlpool_ac)->mode;
    #       if (mode == climate::ClimateMode::CLIMATE_MODE_OFF)
    #       {
    #         id(whirlpool_ac).mode = static_cast<climate::ClimateMode>(id(ac_mode_global));
    #         id(whirlpool_ac).publish_state();
    #       }
    # on_release:
    #   - logger.log: 'Detected AC is off'
    #   - lambda: |-
    #       auto mode = id(whirlpool_ac)->mode;
    #       if (mode != climate::ClimateMode::CLIMATE_MODE_OFF
    #         && mode != climate::ClimateMode::CLIMATE_MODE_FAN_ONLY)
    #       {
    #         id(whirlpool_ac).mode = climate::ClimateMode::CLIMATE_MODE_OFF;
    #         id(whirlpool_ac).publish_state();
    #       }

i2c:

sensor:
  - platform: bmp280
    temperature:
      id: temp_comedor
      name: "Temperatura Comedor"
      oversampling: 1x
    pressure:
      name: "Presion Comedor"
      oversampling: 1x
    address: 0x76
    update_interval: 60s

switch:
  - platform: restart
    name: "Comedor AC restart"

globals:
  - id: ac_mode_global
    type: int
    initial_value: "climate::ClimateMode::CLIMATE_MODE_COOL"
    restore_value: yes

interval:
  # - interval: 10s
  #   then:
  #     # keep active non off known state
  #     - lambda: |-
  #         static int number = 12;
  #         ESP_LOGD("main", "mode: %d", number++);

  - interval: 10s
    then:
      # keep active non off known state
      - lambda: |-
          auto ac_mode = id(whirlpool_ac)->mode;
          if (ac_mode != climate::ClimateMode::CLIMATE_MODE_OFF)
            id(ac_mode_global) = ac_mode;
          bool is_on = id(whirlpool_on).state;
          id(whirlpool_ac).powered_on_assumed = is_on;
          ESP_LOGD("main", "Stored ac mode: %d current: %d whirlpool on: %d", id(ac_mode_global), ac_mode, is_on);
          if (is_on &&
              (ac_mode == climate::ClimateMode::CLIMATE_MODE_OFF
              || ac_mode == climate::ClimateMode::CLIMATE_MODE_FAN_ONLY))
              {
                ac_mode = static_cast<climate::ClimateMode>(id(ac_mode_global));
                if (ac_mode == climate::ClimateMode::CLIMATE_MODE_OFF
                    || ac_mode == climate::ClimateMode::CLIMATE_MODE_FAN_ONLY)
                    {
                      // Can't be assume auto
                      ac_mode = climate::ClimateMode::CLIMATE_MODE_AUTO;
                    }
                ESP_LOGD("main", "Ac is on but reporting something else...");
                id(whirlpool_ac).mode = ac_mode;
              }
          if (!is_on &&
              (ac_mode != climate::ClimateMode::CLIMATE_MODE_OFF
              && ac_mode != climate::ClimateMode::CLIMATE_MODE_FAN_ONLY))
              {
                ESP_LOGD("main", "Ac is off but reporting something else...");
                id(whirlpool_ac).mode = climate::ClimateMode::CLIMATE_MODE_OFF;
              }
