---
substitutions:
  device_name: test-esp8266
  device_description: "DIY P1 module to read your smart meter"

external_components:
  - source: github://zuidwijk/dsmr

esphome:
  name: ${device_name}
  comment: "${device_description}"
  platform: ESP8266
  esp8266_restore_from_flash: true
  board: d1_mini
  on_boot:
    then:
      - if:
          condition:
            lambda: return id(has_key);
          then:
            - lambda: |-
                std::string key(id(stored_decryption_key), 32);
                id(dsmr_instance).set_decryption_key(key);
          else:
            - logger.log:
                level: info
                format: "Not using decryption key. If you need to set a key use Home Assistant service 'ESPHome:  ${device_name}_set_dsmr_key'"

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "SlimmeLezer Fallback Hotspot"
    password: "slimmelezer"

captive_portal:

# Enable Home Assistant API
api:
  services:
    service: set_dsmr_key
    variables:
      private_key: string
    then:
      - logger.log:
          format: Setting private key %s. Set to empty string to disable
          args: [private_key.c_str()]
      - globals.set:
          id: has_key
          value: !lambda "return private_key.length() == 32;"
      - lambda: |-
          if (private_key.length() == 32)
            private_key.copy(id(stored_decryption_key), 32);
          id(dsmr_instance).set_decryption_key(private_key);
ota:
web_server:
  port: 80

logger:
  level: VERY_VERBOSE
  logs:
    uart_esp8266: DEBUG
    api.service: DEBUG

  baud_rate: 0

uart:
  baud_rate: 115200
  rx_pin: D7

globals:
  - id: has_key
    type: bool
    restore_value: yes
    initial_value: "false"
  - id: stored_decryption_key
    type: char[32]
    restore_value: yes

dsmr:
  id: dsmr_instance
  decryption_key: !secret decryption_key

sensor:
  - platform: dsmr
    energy_delivered_tariff1:
      name: dsmr_energy_delivered_tariff1
    energy_delivered_tariff2:
      name: dsmr_energy_delivered_tariff2
    energy_returned_tariff1:
      name: dsmr_energy_returned_tariff1
    energy_returned_tariff2:
      name: dsmr_energy_returned_tariff2
    power_delivered:
      name: power_delivered
      accuracy_decimals: 0
      filters:
        - multiply: 1000
    power_returned:
      name: power_returned
      accuracy_decimals: 0
      filters:
        - multiply: 1000
    electricity_failures:
      name: electricity_failures
      icon: mdi:alert
    electricity_long_failures:
      name: electricity_long_failures
      icon: mdi:alert
    voltage_l1:
      name: voltage_l1
    voltage_l2:
      name: voltage_l2
    voltage_l3:
      name: voltage_l3
    current_l1:
      name: current_l1
    current_l2:
      name: current_l2
    current_l3:
      name: current_l3
    power_delivered_l1:
      name: power_delivered_l1
      accuracy_decimals: 0
      filters:
        - multiply: 1000
    power_delivered_l2:
      name: power_delivered_l2
      accuracy_decimals: 0
      filters:
        - multiply: 1000
    power_delivered_l3:
      name: power_delivered_l3
      accuracy_decimals: 0
      filters:
        - multiply: 1000
    power_returned_l1:
      name: power_returned_l1
      accuracy_decimals: 0
      filters:
        - multiply: 1000
    power_returned_l2:
      name: power_returned_l2
      accuracy_decimals: 0
      filters:
        - multiply: 1000
    power_returned_l3:
      name: power_returned_l3
      accuracy_decimals: 0
      filters:
        - multiply: 1000
    gas_delivered:
      name: gas_delivered
    gas_delivered_be:
      name: gas_delivered_be

text_sensor:
  - platform: dsmr
    identification:
      name: "dsmr_identification"
    p1_version:
      name: "dsmr_p1_version"
    p1_version_be:
      name: "dsmr_p1_version_be"
