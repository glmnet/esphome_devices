{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "definitions": {
    "CONFIG.COMPONENT_SCHEMA": {
      "properties": { "setup_priority": { "type": "number" } },
      "type": ["object", "null"]
    },
    "CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA": {
      "allOf": [
        {
          "properties": {
            "name": {
              "type": "string",
              "markdownDescription": "**string**: The name to use for the MQTT Component.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "retain": {
              "type": "boolean",
              "markdownDescription": "**boolean**: If all MQTT state messages should be retained. Defaults to `True`.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "discovery": {
              "type": "boolean",
              "markdownDescription": "**boolean**: Manually enable/disable discovery for a component. Defaults to the global default.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "state_topic": {
              "type": "string",
              "markdownDescription": "**string**: The topic to publish state updates to. Defaults to `<TOPIC_PREFIX>/<COMPONENT_TYPE>/<COMPONENT_NAME>/state`.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "availability": {
              "properties": {
                "topic": { "type": "string" },
                "payload_available": { "type": "string", "default": "online" },
                "payload_not_available": {
                  "type": "string",
                  "default": "offline"
                }
              },
              "type": ["object", "null"],
              "markdownDescription": "Manually set what should be sent to Home Assistant for showing entity availability. Default derived from [global birth/last will message](https://esphome.io/components/mqtt.html#mqtt-last-will-birth).\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "internal": { "type": "boolean" },
            "command_topic": {
              "type": "string",
              "markdownDescription": "**string**: The topic to subscribe to for commands from the remote. Defaults to `<TOPIC_PREFIX>/<COMPONENT_TYPE>/<COMPONENT_NAME>/command`.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ],
      "markdownDescription": "All components in ESPHome that do some sort of communication through MQTT can have some overrides for specific options.\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
    },
    "CONFIG.MQTT_COMPONENT_AVAILABILITY_SCHEMA": {
      "properties": {
        "topic": { "type": "string" },
        "payload_available": { "type": "string", "default": "online" },
        "payload_not_available": { "type": "string", "default": "offline" }
      },
      "type": ["object", "null"]
    },
    "CONFIG.MQTT_COMPONENT_SCHEMA": {
      "properties": {
        "name": { "type": "string" },
        "retain": { "type": "boolean" },
        "discovery": { "type": "boolean" },
        "state_topic": { "type": "string" },
        "availability": {
          "$ref": "#/definitions/CONFIG.MQTT_COMPONENT_AVAILABILITY_SCHEMA"
        },
        "internal": { "type": "boolean" }
      },
      "type": ["object", "null"]
    },
    "POLLING_COMPONENT": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": {
            "update_interval": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "60s"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "PIN.GPIO_FULL_ANALOG_PIN_SCHEMA": {
      "properties": {
        "number": { "type": ["null", "object", "string", "array", "number"] },
        "mode": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "INPUT"
        }
      },
      "type": ["object", "null"]
    },
    "PIN.GPIO_FULL_INPUT_PIN_SCHEMA": {
      "oneOf": [
        { "$ref": "#/definitions/PIN.INPUT_INTERNAL", "required": ["number"] },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23xxx",
          "required": ["mcp23xxx"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23008",
          "required": ["mcp23008"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23s08",
          "required": ["mcp23s08"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23017",
          "required": ["mcp23017"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23s17",
          "required": ["mcp23s17"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23016",
          "required": ["mcp23016"]
        },
        { "$ref": "#/definitions/PIN.INPUT_pcf8574", "required": ["pcf8574"] },
        { "$ref": "#/definitions/PIN.INPUT_sx1509", "required": ["sx1509"] }
      ],
      "type": ["string", "object"]
    },
    "PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA": {
      "oneOf": [
        { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL", "required": ["number"] },
        {
          "$ref": "#/definitions/PIN.OUTPUT_mcp23xxx",
          "required": ["mcp23xxx"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23008",
          "required": ["mcp23008"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23s08",
          "required": ["mcp23s08"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23017",
          "required": ["mcp23017"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23s17",
          "required": ["mcp23s17"]
        },
        {
          "$ref": "#/definitions/PIN.OUTPUT_mcp23016",
          "required": ["mcp23016"]
        },
        { "$ref": "#/definitions/PIN.INPUT_pcf8574", "required": ["pcf8574"] },
        {
          "$ref": "#/definitions/PIN.OUTPUT_sn74hc595",
          "required": ["sn74hc595"]
        },
        { "$ref": "#/definitions/PIN.OUTPUT_sx1509", "required": ["sx1509"] }
      ],
      "type": ["string", "object"]
    },
    "REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA": {
      "properties": {
        "transmitter_id": {
          "type": "string",
          "id_type": "remote_base::RemoteTransmitterBase",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The remote transmitter to send the remote code with. Defaults to the first one defined in the configuration.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-actions)*"
        },
        "repeat": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "Optionally set the code to be repeated a number of times. Defaults to sending the code only once.\n  * **times** (int): The number of times to repeat the code.\n  \n  * **wait_time** ([Time](https://esphome.io/guides/configuration-types.html#config-time)): The time to wait between repeats.\n  \n  \n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-actions)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "Remote transmitters support a number of [actions](https://esphome.io/guides/automations.html#config-action) that can be used to send remote codes. All supported protocols are listed below. All actions additionally have these configuration variables:\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#remote-transmitter-actions)*"
    },
    "REMOTE_BASE.JVC_SCHEMA": {
      "properties": {
        "data": {
          "type": "string",
          "markdownDescription": "**int**: The data to trigger on, see dumper output for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.LG_SCHEMA": {
      "properties": {
        "data": {
          "type": "string",
          "markdownDescription": "**int**: The LG code to trigger on, see dumper output for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "nbits": {
          "enum": [28, 32],
          "markdownDescription": "**int**: The number of bits of the remote code. Defaults to `28`.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.NEC_SCHEMA": {
      "properties": {
        "address": {
          "type": "string",
          "markdownDescription": "**int**: The address to trigger on, see dumper output for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "command": {
          "type": "string",
          "markdownDescription": "**int**: The NEC command to listen for.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.PANASONIC_SCHEMA": {
      "properties": {
        "address": {
          "type": "string",
          "markdownDescription": "**int**: The address to trigger on, see dumper output for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "command": {
          "type": "string",
          "markdownDescription": "**int**: The command.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.PIONEER_SCHEMA": {
      "properties": {
        "rc_code_1": {
          "type": "string",
          "markdownDescription": "**int**: The remote control code trigger on, see dumper output for more details.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "rc_code_2": { "type": "string", "default": "0" }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RAW_SCHEMA-code[]": {
      "type": ["object", "null"],
      "properties": {
        "days": { "type": "number" },
        "hours": { "type": "number" },
        "minutes": { "type": "number" },
        "seconds": { "type": "number" },
        "milliseconds": { "type": "number" },
        "microseconds": { "type": "number" }
      }
    },
    "REMOTE_BASE.RAW_SCHEMA": {
      "properties": {
        "code": {
          "type": "array",
          "items": { "$ref": "#/definitions/REMOTE_BASE.RAW_SCHEMA-code[]" },
          "markdownDescription": "**list**: The code to listen for, see [remote_transmitter.transmit_raw Action](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw) for more info. Usually you only need to copy this directly from the dumper output.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "code_storage_id": { "type": "string", "id_type": "int32_t" }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC5_SCHEMA": {
      "properties": {
        "address": {
          "type": "string",
          "markdownDescription": "**int**: The address to trigger on, see dumper output for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "command": {
          "type": "string",
          "markdownDescription": "**int**: The RC5 command to listen for.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]": { "type": "number" },
    "REMOTE_BASE.RC_SWITCH_RAW_SCHEMA": {
      "properties": {
        "code": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The remote code to listen for, copy this from the dumper output. To ignore a bit in the received data, use `x` at that place in the **code**.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "default": 1,
          "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC_SWITCH_TRANSMITTER-repeat": {
      "properties": {
        "times": { "type": ["null", "object", "string", "array", "number"] },
        "wait_time": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "0us"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC_SWITCH_TRANSMITTER": {
      "properties": {
        "repeat": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TRANSMITTER-repeat"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC_SWITCH_TYPE_A_SCHEMA": {
      "properties": {
        "group": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The group, binary string.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "device": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The device in the group, binary string.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "state": {
          "type": "boolean",
          "markdownDescription": "**boolean**: The on/off state to trigger on.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "default": 1,
          "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC_SWITCH_TYPE_B_SCHEMA": {
      "properties": {
        "address": {
          "type": "number",
          "markdownDescription": "**int**: The address, int from 1 to 4.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "channel": {
          "type": "number",
          "markdownDescription": "**int**: The channel, int from 1 to 4.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "state": {
          "type": "boolean",
          "markdownDescription": "**boolean**: The on/off state to trigger on.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "default": 1,
          "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC_SWITCH_TYPE_C_SCHEMA": {
      "properties": {
        "family": {
          "enum": [
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p"
          ],
          "markdownDescription": "**string**: The family. Range is `a` to `p`.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "group": {
          "type": "number",
          "markdownDescription": "**int**: The group. Range is 1 to 4.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "device": {
          "type": "number",
          "markdownDescription": "**int**: The device. Range is 1 to 4.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "state": {
          "type": "boolean",
          "markdownDescription": "**boolean**: The on/off state to trigger on.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "default": 1,
          "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC_SWITCH_TYPE_D_SCHEMA": {
      "properties": {
        "group": { "enum": ["a", "b", "c", "d"] },
        "device": { "type": "number" },
        "state": { "type": "boolean" },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "default": 1
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.SONY_SCHEMA": {
      "properties": {
        "data": {
          "type": "string",
          "markdownDescription": "**int**: The Sony code to trigger on, see dumper output for more info.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "nbits": {
          "enum": [12, 15, 20],
          "markdownDescription": "**int**: The number of bits of the remote code. Defaults to `12`.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      },
      "type": ["object", "null"]
    },
    "AUTOMATION.AUTOMATION_SCHEMA": {
      "properties": {
        "trigger_id": { "type": "string", "id_type": "Trigger" },
        "automation_id": { "type": "string", "id_type": "Automation" },
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-delay": {
      "type": "object",
      "properties": {
        "delay": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "This action delays the execution of the next action in the action list by a specified time period.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#delay-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-if": {
      "type": "object",
      "properties": {
        "if": {
          "properties": {
            "condition": {
              "$ref": "#/definitions/condition_list",
              "markdownDescription": "**[All Conditions](https://esphome.io/guides/automations.html#config-condition)**: The condition to check which branch to take. See [Conditions](https://esphome.io/guides/automations.html#config-condition).\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#if-action)*"
            },
            "then": {
              "anyOf": [
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                }
              ],
              "markdownDescription": "**[Actions](https://esphome.io/guides/automations.html#config-action)**: The action to perform if the condition evaluates to true. Defaults to doing nothing.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#if-action)*"
            },
            "else": {
              "anyOf": [
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                }
              ],
              "markdownDescription": "**[Actions](https://esphome.io/guides/automations.html#config-action)**: The action to perform if the condition evaluates to false. Defaults to doing nothing.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#if-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action first evaluated a certain condition (`if:`) and then either executes the `then:` branch or the `else:` branch depending on the output of the condition.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#if-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-while": {
      "type": "object",
      "properties": {
        "while": {
          "properties": {
            "condition": {
              "$ref": "#/definitions/condition_list",
              "markdownDescription": "The condition to check whether to execute. See [Conditions](https://esphome.io/guides/automations.html#config-condition).\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#while-action)*"
            },
            "then": {
              "anyOf": [
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                }
              ],
              "markdownDescription": "**[Actions](https://esphome.io/guides/automations.html#config-action)**: The action to perform until the condition evaluates to false.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#while-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action is similar to the [if](https://esphome.io/guides/automations.html#if-action) Action. The `while` action executes a block until a given condition evaluates to false.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#while-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-wait_until": {
      "type": "object",
      "properties": {
        "wait_until": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "This action allows your automations to wait until a condition evaluates to true. (So this is just a shorthand way of writing a `while` action with an empty `then` block.)\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#wait-until-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "This action executes an arbitrary piece of C++ code (see [Lambda](https://esphome.io/guides/automations.html#config-lambda)).\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#lambda-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-component.update": {
      "type": "object",
      "properties": {
        "component.update": {
          "properties": {
            "id": { "type": "string", "id_type": "PollingComponent" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Using this action you can manually call the `update()` method of a component.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#component-update-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-logger.log": {
      "type": "object",
      "properties": {
        "logger.log": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "Print a formatted message to the logs.\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#logger-log-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mqtt.publish": {
      "type": "object",
      "properties": {
        "mqtt.publish": {
          "properties": {
            "id": { "type": "string", "id_type": "mqtt::MQTTClientComponent" },
            "topic": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "payload": { "type": "string" },
            "qos": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0
            },
            "retain": {
              "type": ["null", "object", "string", "array", "number"],
              "default": false
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Publish an MQTT message on a topic using this action in automations.\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mqtt.publish_json": {
      "type": "object",
      "properties": {
        "mqtt.publish_json": {
          "properties": {
            "id": { "type": "string", "id_type": "mqtt::MQTTClientComponent" },
            "topic": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "payload": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "qos": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0
            },
            "retain": {
              "type": ["null", "object", "string", "array", "number"],
              "default": false
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Publish a JSON-formatted MQTT message on a topic using this action in automations.\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-publish-json-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_jvc": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_jvc": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The JVC code to send, see dumper output for more info.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-jvc-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a JVC infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-jvc-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_lg": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_lg": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The LG code to send, see dumper output for more info.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-lg-action)*"
                },
                "nbits": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 28,
                  "markdownDescription": "**int**: The number of bits to send. Defaults to `28`.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-lg-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends an LG infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-lg-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_nec": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_nec": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The address to send, see dumper output for more details.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-nec-action)*"
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The NEC command to send.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-nec-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends an NEC infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-nec-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_pioneer": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_pioneer": {
          "allOf": [
            {
              "properties": {
                "rc_code_1": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The remote control code to send, see dumper output for more details.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-pioneer-action)*"
                },
                "rc_code_2": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0,
                  "markdownDescription": "**int**: The secondary remote control code to send; some codes are sent in two parts.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-pioneer-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a Pioneer infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-pioneer-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_sony": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_sony": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The Sony code to send, see dumper output for more info.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-sony-action)*"
                },
                "nbits": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 12,
                  "markdownDescription": "**int**: The number of bits to send. Defaults to `12`.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-sony-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) a Sony infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-sony-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_raw": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_raw": {
          "allOf": [
            {
              "properties": {
                "code": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**list**: The raw code to send as a list of integers. Positive numbers represent a digital high signal and negative numbers a digital low signal. The number itself encodes how long the signal should last (in microseconds).\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw-action)*"
                },
                "code_storage_id": { "type": "string", "id_type": "int32_t" },
                "carrier_frequency": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": "0Hz",
                  "markdownDescription": "**float**: Optionally set a frequency to send the signal with for infrared signals. Defaults to `0Hz`.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a raw code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc5": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc5": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The address to send, see dumper output for more details.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc5-action)*"
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The RC5 command to send.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc5-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends an RC5 infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc5-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_raw": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_raw": {
          "allOf": [
            {
              "properties": {
                "code": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: The raw code to send, copy this from the dump output.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-raw-action)*"
                },
                "protocol": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 1,
                  "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-raw-action)*"
                },
                "repeat": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": { "times": 5 }
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a raw RC-Switch code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-raw-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_a": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_type_a": {
          "allOf": [
            {
              "properties": {
                "group": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: The group to send the command to.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-a-action)*"
                },
                "device": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: The device in the group to send the command to.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-a-action)*"
                },
                "state": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**boolean**: The on/off state to send.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-a-action)*"
                },
                "protocol": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 1,
                  "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-a-action)*"
                },
                "repeat": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": { "times": 5 }
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a type A RC-Switch code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-a-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_b": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_type_b": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The address to send the command to.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-b-action)*"
                },
                "channel": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The channel to send the command to.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-b-action)*"
                },
                "state": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**boolean**: The on/off state to send.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-b-action)*"
                },
                "protocol": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 1,
                  "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-b-action)*"
                },
                "repeat": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": { "times": 5 }
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a type B RC-Switch code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-b-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_c": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_type_c": {
          "allOf": [
            {
              "properties": {
                "family": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: The family to send the command to. Range is `a` to `p`.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-c-action)*"
                },
                "group": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The group to send the command to. Range is 1 to 4.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-c-action)*"
                },
                "device": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The device to send the command to. Range is 1 to 4.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-c-action)*"
                },
                "state": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**boolean**: The on/off state to send.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-c-action)*"
                },
                "protocol": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 1,
                  "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-c-action)*"
                },
                "repeat": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": { "times": 5 }
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a type C RC-Switch code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-c-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_d": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_type_d": {
          "allOf": [
            {
              "properties": {
                "group": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The group to send the command to. Range is 1 to 4.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-d-action)*"
                },
                "device": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The device to send the command to. Range is 1 to 3.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-d-action)*"
                },
                "state": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**boolean**: The on/off state to send.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-d-action)*"
                },
                "protocol": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 1,
                  "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-d-action)*"
                },
                "repeat": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": { "times": 5 }
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a type D RC-Switch code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-rc-switch-type-d-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_samsung": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_samsung": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The data to send, see dumper output for more details.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-samsung-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a Samsung infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-samsung-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_samsung36": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_samsung36": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The address to send, see dumper output for more details.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-samsung36-action)*"
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The Samsung36 command to send, see dumper output for more details.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-samsung36-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a Samsung36 infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-samsung36-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_panasonic": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_panasonic": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The address to send the command to, see dumper output for more details.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-panasonic-action)*"
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**int**: The command to send.\n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-panasonic-action)*"
                }
              },
              "type": ["object", "null"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a Panasonic infrared remote code to a remote transmitter.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-panasonic-action)*"
        }
      }
    },
    "uart.write": {
      "properties": {
        "id": { "type": "string", "id_type": "uart::UARTComponent" },
        "data": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-uart.write": {
      "type": "object",
      "properties": {
        "uart.write": {
          "anyOf": [
            { "$ref": "#/definitions/uart.write" },
            { "type": "array", "items": { "$ref": "#/definitions/uart.write" } }
          ],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) sends a defined UART signal to the given UART bus.\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#uart-write-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-light.toggle": {
      "type": "object",
      "properties": {
        "light.toggle": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "light::LightState",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-toggle-action)*"
            },
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The length of the transition if the light supports it.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-toggle-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action toggles a light with the given ID when executed.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-toggle-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-light.control": {
      "type": "object",
      "properties": {
        "light.control": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "light::LightState",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-control-action)*"
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), boolean**: Change the ON/OFF state of the light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-control-action)*"
            },
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "flash_length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "effect": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "brightness": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "red": { "type": ["null", "object", "string", "array", "number"] },
            "green": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "blue": { "type": ["null", "object", "string", "array", "number"] },
            "white": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "color_temperature": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) is a generic call to change the state of a light - it is essentially just a combination of the turn_on and turn_off calls.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-control-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-light.turn_on": {
      "type": "object",
      "properties": {
        "light.turn_on": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "light::LightState",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The length of the transition if the light supports it.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "flash_length": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable)**: If set, will flash the given color for this period of time and then go back to the previous state.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "effect": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: If set, will attempt to start an effect with the given name.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "brightness": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The brightness of the light. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing brightness.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "red": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The red channel of the light. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing red.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "green": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The green channel of the light. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing green channel.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "blue": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The blue channel of the light. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing blue channel.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "white": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The white channel value of RGBW lights. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing white value.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            },
            "color_temperature": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**float, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The white color temperature value (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) for CWWW / RGBWW lights. Defaults to not changing the color temperature value.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action turns a light with the given ID on when executed.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-on-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-light.turn_off": {
      "type": "object",
      "properties": {
        "light.turn_off": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "light::LightState",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-off-action)*"
            },
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The length of the transition if the light supports it.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-off-action)*"
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"],
              "default": false
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action turns a light with the given ID off when executed.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-turn-off-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-light.dim_relative": {
      "type": "object",
      "properties": {
        "light.dim_relative": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "light::LightState",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-dim-relative-action)*"
            },
            "relative_brightness": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage**: The relative brightness to dim the light by.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-dim-relative-action)*"
            },
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The length of the transition.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-dim-relative-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to dim a light that supports brightness by a relative amount.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-dim-relative-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-light.addressable_set": {
      "type": "object",
      "properties": {
        "light.addressable_set": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "light::LightState",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the addressable light to control.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-addressable-set-action)*"
            },
            "range_from": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), int**: The beginning of the range of LEDs to control. 0-based indexing. Defaults to 0 (the beginning of the strip).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-addressable-set-action)*"
            },
            "range_to": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), int**: The end of the range of LEDs to control - this is a half-open interval. 0-based indexing. Defaults to the end of the strip (`num_leds`).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-addressable-set-action)*"
            },
            "red": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage**: The value to set the red channel to.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-addressable-set-action)*"
            },
            "green": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage**: The value to set the green channel to.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-addressable-set-action)*"
            },
            "blue": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage**: The value to set the blue channel to.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-addressable-set-action)*"
            },
            "white": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage**: The value to set the white channel to.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-addressable-set-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually set a range of LEDs on an addressable light to a specific color.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-addressable-set-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-display.page.show": {
      "type": "object",
      "properties": {
        "display.page.show": {
          "properties": {
            "id": { "type": "string", "id_type": "display::DisplayPage" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-display.page.show_next": {
      "type": "object",
      "properties": {
        "display.page.show_next": {
          "properties": {
            "id": { "type": "string", "id_type": "display::DisplayBuffer" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-display.page.show_previous": {
      "type": "object",
      "properties": {
        "display.page.show_previous": {
          "properties": {
            "id": { "type": "string", "id_type": "display::DisplayBuffer" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "homeassistant.service-data": {
      "properties": {},
      "type": ["object", "null"]
    },
    "homeassistant.service-variables": {
      "properties": {},
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-homeassistant.service": {
      "type": "object",
      "properties": {
        "homeassistant.service": {
          "properties": {
            "id": { "type": "string", "id_type": "api::APIServer" },
            "service": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "data": { "$ref": "#/definitions/homeassistant.service-data" },
            "data_template": {
              "$ref": "#/definitions/homeassistant.service-data"
            },
            "variables": {
              "$ref": "#/definitions/homeassistant.service-variables"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "When using the native API with Home Assistant, you can create Home Assistant service calls straight from ESPHome [Automations](https://esphome.io/guides/automations.html#automation).\n\n*See also: [Native API Component](https://esphome.io/components/api.html#homeassistant-service-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-homeassistant.event": {
      "type": "object",
      "properties": {
        "homeassistant.event": {
          "properties": {
            "id": { "type": "string", "id_type": "api::APIServer" },
            "event": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "data": { "$ref": "#/definitions/homeassistant.service-data" },
            "data_template": {
              "$ref": "#/definitions/homeassistant.service-data"
            },
            "variables": { "$ref": "#/definitions/homeassistant.service-data" }
          },
          "type": ["object", "null"],
          "markdownDescription": "When using the native API with Home Assistant, you can create events in the Home Assistant event bus straight from ESPHome [Automations](https://esphome.io/guides/automations.html#automation).\n\n*See also: [Native API Component](https://esphome.io/components/api.html#homeassistant-event-action)*"
        }
      }
    },
    "homeassistant.tag_scanned": {
      "properties": {
        "id": { "type": "string", "id_type": "api::APIServer" },
        "tag": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-homeassistant.tag_scanned": {
      "type": "object",
      "properties": {
        "homeassistant.tag_scanned": {
          "anyOf": [
            { "$ref": "#/definitions/homeassistant.tag_scanned" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/homeassistant.tag_scanned" }
            }
          ],
          "markdownDescription": "When using the native API with Home Assistant, you can push tag_scanned to Home Assistant straight from ESPHome [Automations](https://esphome.io/guides/automations.html#automation).\n\n*See also: [Native API Component](https://esphome.io/components/api.html#homeassistant-tag-scanned-action)*"
        }
      }
    },
    "canbus.send": {
      "properties": {
        "canbus_id": {
          "type": "string",
          "id_type": "canbus::CanbusComponent",
          "markdownDescription": "Optionally set the can bus id to use for transmitting the frame. Not needed if you are using only 1 can bus.\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#canbus-send-action)*"
        },
        "can_id": {
          "type": "number",
          "markdownDescription": "**int**: Allows to override the can id configured in the can bus device.\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#canbus-send-action)*"
        },
        "use_extended_id": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: default *False* identifies the type of *can_id*: *False*: Standard 11 Bit IDs, *True*: Extended 29Bit ID\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#canbus-send-action)*"
        },
        "data": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**binary data**: Data to transmit, up to 8 bytes or characters are supported by can bus per frame.\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#canbus-send-action)*"
        }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-canbus.send": {
      "type": "object",
      "properties": {
        "canbus.send": {
          "anyOf": [
            { "$ref": "#/definitions/canbus.send" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/canbus.send" }
            }
          ],
          "markdownDescription": "The can bus can transmit frames by means of the `canbus.send` action. There are several forms to use it:\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#canbus-send-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-climate.control": {
      "type": "object",
      "properties": {
        "climate.control": {
          "$ref": "#/definitions/climate.CLIMATE_CONTROL_ACTION_SCHEMA",
          "markdownDescription": "This is an [Action](https://esphome.io/guides/automations.html#config-action) for setting parameters for climate devices.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-cover.open": {
      "type": "object",
      "properties": {
        "cover.open": {
          "properties": {
            "id": { "type": "string", "id_type": "cover::Cover" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) opens the cover with the given ID when executed.\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-open-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-cover.close": {
      "type": "object",
      "properties": {
        "cover.close": {
          "properties": {
            "id": { "type": "string", "id_type": "cover::Cover" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) closes the cover with the given ID when executed.\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-close-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-cover.stop": {
      "type": "object",
      "properties": {
        "cover.stop": {
          "properties": {
            "id": { "type": "string", "id_type": "cover::Cover" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) stops the cover with the given ID when executed.\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-stop-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-cover.control": {
      "type": "object",
      "properties": {
        "cover.control": {
          "$ref": "#/definitions/cover.COVER_CONTROL_ACTION_SCHEMA",
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) is a more generic version of the other cover actions and allows all cover attributes to be set.\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-control-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-deep_sleep.enter": {
      "type": "object",
      "properties": {
        "deep_sleep.enter": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "deep_sleep::DeepSleepComponent"
            },
            "sleep_duration": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action makes the given deep sleep component enter deep sleep immediately.\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#deep-sleep-enter-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-deep_sleep.prevent": {
      "type": "object",
      "properties": {
        "deep_sleep.prevent": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "deep_sleep::DeepSleepComponent"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action prevents the given deep sleep component from entering deep sleep. Useful for keeping the ESP active during data transfer or OTA updating (See note below for more information).\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#deep-sleep-prevent-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.play_next": {
      "type": "object",
      "properties": {
        "dfplayer.play_next": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Starts playback of next track or skips to the next track.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-play-next-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.play_previous": {
      "type": "object",
      "properties": {
        "dfplayer.play_previous": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Plays the previously played track.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-play-previous-action)*"
        }
      }
    },
    "dfplayer.play": {
      "properties": {
        "id": { "type": "string", "id_type": "dfplayer::DFPlayer" },
        "file": { "type": ["null", "object", "string", "array", "number"] },
        "loop": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-dfplayer.play": {
      "type": "object",
      "properties": {
        "dfplayer.play": {
          "anyOf": [
            { "$ref": "#/definitions/dfplayer.play" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/dfplayer.play" }
            }
          ],
          "markdownDescription": "Plays a track.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-play-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.play_folder": {
      "type": "object",
      "properties": {
        "dfplayer.play_folder": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" },
            "folder": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "file": { "type": ["null", "object", "string", "array", "number"] },
            "loop": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "Plays files inside numbered folders, folders must be numbered from 1 and with leading zeros. Like `01`, `02`, \u2026 etc. Files inside the folders must be numbered with two leading zeros, like `001.mp3`, `002.mp3`, \u2026 etc. Folder numbers can range from 1 to 99 and file name from 1 to 255 or folder number from 1 to 10 and file number from 1 to 1000.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-play-folder-action)*"
        }
      }
    },
    "dfplayer.set_device": {
      "properties": {
        "id": { "type": "string", "id_type": "dfplayer::DFPlayer" },
        "device": { "enum": ["USB", "TF_CARD"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-dfplayer.set_device": {
      "type": "object",
      "properties": {
        "dfplayer.set_device": {
          "anyOf": [
            { "$ref": "#/definitions/dfplayer.set_device" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/dfplayer.set_device" }
            }
          ],
          "markdownDescription": "Changes the device in use. Valid values are `TF_CARD` and `USB`.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-set-device-action)*"
        }
      }
    },
    "dfplayer.set_volume": {
      "properties": {
        "id": { "type": "string", "id_type": "dfplayer::DFPlayer" },
        "volume": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-dfplayer.set_volume": {
      "type": "object",
      "properties": {
        "dfplayer.set_volume": {
          "anyOf": [
            { "$ref": "#/definitions/dfplayer.set_volume" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/dfplayer.set_volume" }
            }
          ],
          "markdownDescription": "Changes volume.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-set-volume-action)*"
        }
      }
    },
    "dfplayer.set_eq": {
      "properties": {
        "id": { "type": "string", "id_type": "dfplayer::DFPlayer" },
        "eq_preset": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-dfplayer.set_eq": {
      "type": "object",
      "properties": {
        "dfplayer.set_eq": {
          "anyOf": [
            { "$ref": "#/definitions/dfplayer.set_eq" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/dfplayer.set_eq" }
            }
          ],
          "markdownDescription": "Changes audio equalization preset.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-set-eq-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.sleep": {
      "type": "object",
      "properties": {
        "dfplayer.sleep": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Enters sleep mode. Playback is stopped and the action `dfplayer.set_device: TF_CARD` should be send for playback to be enabled again.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-sleep-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.reset": {
      "type": "object",
      "properties": {
        "dfplayer.reset": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Module reset.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-reset-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.start": {
      "type": "object",
      "properties": {
        "dfplayer.start": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Starts playing a track or resumes paused playback.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-start-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.pause": {
      "type": "object",
      "properties": {
        "dfplayer.pause": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Pauses playback, playback can be resumed from the same position with `dfplayer.start`.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-pause-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.stop": {
      "type": "object",
      "properties": {
        "dfplayer.stop": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Stops playback.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-stop-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.random": {
      "type": "object",
      "properties": {
        "dfplayer.random": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Randomly plays all tracks.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-random-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fan.toggle": {
      "type": "object",
      "properties": {
        "fan.toggle": {
          "properties": {
            "id": { "type": "string", "id_type": "fan::FanState" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Toggles the ON/OFF state of the fan with the given ID when executed.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-toggle-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fan.turn_off": {
      "type": "object",
      "properties": {
        "fan.turn_off": {
          "properties": {
            "id": { "type": "string", "id_type": "fan::FanState" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Turns the fan with the given ID off when executed.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-turn-off-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fan.turn_on": {
      "type": "object",
      "properties": {
        "fan.turn_on": {
          "properties": {
            "id": { "type": "string", "id_type": "fan::FanState" },
            "oscillating": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "speed": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "Turns the fan with the given ID off when executed.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-turn-on-action)*"
        }
      }
    },
    "fingerprint_grow.enroll": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "fingerprint_grow::FingerprintGrowComponent"
        },
        "finger_id": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "num_scans": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.enroll": {
      "type": "object",
      "properties": {
        "fingerprint_grow.enroll": {
          "anyOf": [
            { "$ref": "#/definitions/fingerprint_grow.enroll" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/fingerprint_grow.enroll" }
            }
          ],
          "markdownDescription": "Starts the fingerprint enrollment process on the slot number defined.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-enroll-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.cancel_enroll": {
      "type": "object",
      "properties": {
        "fingerprint_grow.cancel_enroll": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "fingerprint_grow::FingerprintGrowComponent"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Cancels the current fingerprint enrollment process. Triggers the `on_enrollment_failed` trigger.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-cancel-enroll-action)*"
        }
      }
    },
    "fingerprint_grow.delete": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "fingerprint_grow::FingerprintGrowComponent"
        },
        "finger_id": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.delete": {
      "type": "object",
      "properties": {
        "fingerprint_grow.delete": {
          "anyOf": [
            { "$ref": "#/definitions/fingerprint_grow.delete" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/fingerprint_grow.delete" }
            }
          ],
          "markdownDescription": "Removes the enrolled fingerprint from the slot number defined.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-delete-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.delete_all": {
      "type": "object",
      "properties": {
        "fingerprint_grow.delete_all": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "fingerprint_grow::FingerprintGrowComponent"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Removes all enrolled fingerprints.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-delete-all-action)*"
        }
      }
    },
    "fingerprint_grow.led_control": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "fingerprint_grow::FingerprintGrowComponent"
        },
        "state": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.led_control": {
      "type": "object",
      "properties": {
        "fingerprint_grow.led_control": {
          "anyOf": [
            { "$ref": "#/definitions/fingerprint_grow.led_control" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/fingerprint_grow.led_control" }
            }
          ],
          "markdownDescription": "Turns on or off the LED on the reader. Only available on select models. If you have the R503 use [fingerprint_grow.aura_led_control Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control) instead.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-led-control-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.aura_led_control": {
      "type": "object",
      "properties": {
        "fingerprint_grow.aura_led_control": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "fingerprint_grow::FingerprintGrowComponent"
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "speed": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "color": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "count": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "Controls the Aura LED on the reader. Only available on select models.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-globals.set": {
      "type": "object",
      "properties": {
        "globals.set": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "globals::GlobalsComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The [ID](https://esphome.io/guides/configuration-types.html#config-id) of the global variable to set.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#globals-set-action)*"
            },
            "value": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable)**: The value to set the global variable to.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#globals-set-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to change the value of a [global](https://esphome.io/guides/automations.html#config-globals) variable without having to go through the lambda syntax.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#globals-set-action)*"
        }
      }
    },
    "simple_automation": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        { "$ref": "#/definitions/AUTOMATION.AUTOMATION_SCHEMA" }
      ]
    },
    "http_request.send-on_response": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "http_request::HttpRequestResponseTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "automation.ACTION_REGISTRY-http_request.send": {
      "type": "object",
      "properties": {
        "http_request.send": {
          "allOf": [
            {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "http_request::HttpRequestComponent"
                },
                "url": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "headers": { "properties": {}, "type": ["object", "null"] },
                "verify_ssl": { "type": "boolean", "default": true },
                "on_response": {
                  "$ref": "#/definitions/http_request.send-on_response"
                },
                "method": {
                  "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"],
                  "markdownDescription": "**string**: HTTP method to use (`GET`, `POST`, `PUT`, `DELETE`, `PATCH`).\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-send-action)*"
                },
                "body": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "json": { "properties": {}, "type": ["object", "null"] }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a request.\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-send-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-http_request.post": {
      "type": "object",
      "properties": {
        "http_request.post": {
          "allOf": [
            {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "http_request::HttpRequestComponent"
                },
                "url": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "headers": { "properties": {}, "type": ["object", "null"] },
                "verify_ssl": { "type": "boolean", "default": true },
                "on_response": {
                  "$ref": "#/definitions/http_request.send-on_response"
                },
                "method": { "enum": ["POST"] },
                "body": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: A HTTP body string to send with request.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-post-action)*"
                },
                "json": {
                  "properties": {},
                  "type": ["object", "null"],
                  "markdownDescription": "**mapping**: A HTTP body in JSON format. Values are [templatable](https://esphome.io/guides/automations.html#config-templatable). See [Examples](https://esphome.io/components/http_request.html#http-request-examples).\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-post-action)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a POST request.\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-post-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-http_request.get": {
      "type": "object",
      "properties": {
        "http_request.get": {
          "allOf": [
            {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "http_request::HttpRequestComponent"
                },
                "url": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: URL to send request.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
                },
                "headers": {
                  "properties": {},
                  "type": ["object", "null"],
                  "markdownDescription": "**mapping**: Map of HTTP headers. Values are [templatable](https://esphome.io/guides/automations.html#config-templatable).\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
                },
                "verify_ssl": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "**boolean**: Verify the SSL certificate of the endpoint. Defaults to `true`.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
                },
                "on_response": {
                  "$ref": "#/definitions/http_request.send-on_response",
                  "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the request is finished.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
                },
                "method": { "enum": ["GET"] }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a GET request.\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.turn_on": {
      "type": "object",
      "properties": {
        "output.turn_on": {
          "properties": {
            "id": { "type": "string", "id_type": "output::BinaryOutput" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action turns the output with the given ID on when executed.\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#output-turn-on-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.turn_off": {
      "type": "object",
      "properties": {
        "output.turn_off": {
          "properties": {
            "id": { "type": "string", "id_type": "output::BinaryOutput" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action turns the output with the given ID off when executed.\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#output-turn-off-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.set_level": {
      "type": "object",
      "properties": {
        "output.set_level": {
          "properties": {
            "id": { "type": "string", "id_type": "output::FloatOutput" },
            "level": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action sets the float output to the given level when executed. Note: This only works with floating point outputs like ESP8266 PWM or LEDC.\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#output-set-level-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.send_code": {
      "type": "object",
      "properties": {
        "rf_bridge.send_code": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeComponent"
            },
            "sync": { "type": ["null", "object", "string", "array", "number"] },
            "low": { "type": ["null", "object", "string", "array", "number"] },
            "high": { "type": ["null", "object", "string", "array", "number"] },
            "code": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "Send an RF code using this action in automations.\n\n*See also: [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-send-code-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.learn": {
      "type": "object",
      "properties": {
        "rf_bridge.learn": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeComponent"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Tell the RF Bridge to learn new protocol timings using this action in automations. A new code with timings will be returned to [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-code-received)\n\n*See also: [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-learn-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.start_advanced_sniffing": {
      "type": "object",
      "properties": {
        "rf_bridge.start_advanced_sniffing": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeComponent"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Tell the RF Bridge to listen for the advanced/extra protocols defined in the portisch firmware. The decoded codes with length and protocol will be returned to [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-advanced-code-received)\n\n*See also: [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-start-advanced-sniffing-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.stop_advanced_sniffing": {
      "type": "object",
      "properties": {
        "rf_bridge.stop_advanced_sniffing": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeComponent"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Tell the RF Bridge to stop listening for the advanced/extra protocols defined in the portisch firmware.\n\n*See also: [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-stop-advanced-sniffing-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.send_advanced_code": {
      "type": "object",
      "properties": {
        "rf_bridge.send_advanced_code": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeComponent"
            },
            "length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "protocol": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "code": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "Send an  RF code using this action in automations.\n\n*See also: [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-send-advanced-code-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.send_raw": {
      "type": "object",
      "properties": {
        "rf_bridge.send_raw": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeComponent"
            },
            "raw": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "Send a raw RF code using this action in automations.\n\n*See also: [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-send-raw-action)*"
        }
      }
    },
    "rtttl.play": {
      "properties": {
        "id": { "type": "string", "id_type": "rtttl::Rtttl" },
        "rtttl": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-rtttl.play": {
      "type": "object",
      "properties": {
        "rtttl.play": {
          "anyOf": [
            { "$ref": "#/definitions/rtttl.play" },
            { "type": "array", "items": { "$ref": "#/definitions/rtttl.play" } }
          ],
          "markdownDescription": "Plays an rtttl tone.\n\n*See also: [Rtttl Buzzer](https://esphome.io/components/rtttl.html#rtttl-play-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rtttl.stop": {
      "type": "object",
      "properties": {
        "rtttl.stop": {
          "properties": {
            "id": { "type": "string", "id_type": "rtttl::Rtttl" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Stops playback.\n\n*See also: [Rtttl Buzzer](https://esphome.io/components/rtttl.html#rtttl-stop-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-script.execute": {
      "type": "object",
      "properties": {
        "script.execute": {
          "properties": {
            "id": { "type": "string", "id_type": "script::Script" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action executes the script. The script **mode** dictates what will happen if the script was already running.\n\n*See also: [script Component](https://esphome.io/guides/automations.html#script-execute-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-script.stop": {
      "type": "object",
      "properties": {
        "script.stop": {
          "properties": {
            "id": { "type": "string", "id_type": "script::Script" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action allows you to stop a given script during execution. If the script is not running, it does nothing. This is useful right now if your want to stop a script that contains a `delay` action, `wait_until` action, or is inside a `while` loop, etc. You can also call this action from the script itself, and any subsequent action will not be executed.\n\n*See also: [script Component](https://esphome.io/guides/automations.html#script-stop-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-script.wait": {
      "type": "object",
      "properties": {
        "script.wait": {
          "properties": {
            "id": { "type": "string", "id_type": "script::Script" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action suspends execution of the automation until a script has finished executing.\n\n*See also: [script Component](https://esphome.io/guides/automations.html#script-wait-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-servo.write": {
      "type": "object",
      "properties": {
        "servo.write": {
          "properties": {
            "id": { "type": "string", "id_type": "servo::Servo" },
            "level": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "To use your servo motor in [automations](https://esphome.io/guides/automations.html#automation) or templates, you can use this action to set the target level of the servo from -100% to 100%.\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#servo-write-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-servo.detach": {
      "type": "object",
      "properties": {
        "servo.detach": {
          "properties": {
            "id": { "type": "string", "id_type": "servo::Servo" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to disable the output on a servo motor - this will make the servo motor stop immediately and disable its active control.\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#servo-detach-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-sim800l.send_sms": {
      "type": "object",
      "properties": {
        "sim800l.send_sms": {
          "properties": {
            "id": { "type": "string", "id_type": "sim800l::Sim800LComponent" },
            "recipient": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "message": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Send a SMS message to a phone recipient using this action in automations.\n\n*See also: [on_sms_received Trigger](https://esphome.io/components/sim800l.html#sim800l-send-sms-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-sim800l.dial": {
      "type": "object",
      "properties": {
        "sim800l.dial": {
          "properties": {
            "id": { "type": "string", "id_type": "sim800l::Sim800LComponent" },
            "recipient": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "Dial to a phone recipient using this action in automations.\n\n*See also: [on_sms_received Trigger](https://esphome.io/components/sim800l.html#sim800l-dial-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-stepper.set_target": {
      "type": "object",
      "properties": {
        "stepper.set_target": {
          "properties": {
            "id": { "type": "string", "id_type": "stepper::Stepper" },
            "target": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "To use your stepper motor in [automations](https://esphome.io/guides/automations.html#automation) or templates, you can use this action to set the target position (in steps). The stepper will always run towards the target position and stop once it has reached the target.\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-target-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-stepper.report_position": {
      "type": "object",
      "properties": {
        "stepper.report_position": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "stepper::Stepper",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the stepper.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-report-position-action)*"
            },
            "position": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The position to report in steps.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-report-position-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "All steppers start out with a target and current position of `0` on boot. However, if you for example want to home a stepper motor, it can be useful to **report** the stepper where it is currently at.\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-report-position-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-stepper.set_speed": {
      "type": "object",
      "properties": {
        "stepper.set_speed": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "stepper::Stepper",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the stepper.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-speed-action)*"
            },
            "speed": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), float**: The speed in `steps/s` (steps per seconds) to drive the stepper at.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-speed-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to set the speed of a stepper at runtime.\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-speed-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-switch.turn_on": {
      "type": "object",
      "properties": {
        "switch.turn_on": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action turns a switch with the given ID on when executed.\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#switch-turn-on-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-switch.turn_off": {
      "type": "object",
      "properties": {
        "switch.turn_off": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action turns a switch with the given ID off when executed.\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#switch-turn-off-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-switch.toggle": {
      "type": "object",
      "properties": {
        "switch.toggle": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action toggles a switch with the given ID when executed.\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#switch-toggle-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-tm1651.turn_on": {
      "type": "object",
      "properties": {
        "tm1651.turn_on": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "tm1651::TM1651Display",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the TM1651.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-turn-on-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) turns on the LEDs.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-turn-on-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-tm1651.turn_off": {
      "type": "object",
      "properties": {
        "tm1651.turn_off": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "tm1651::TM1651Display",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the TM1651.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-turn-off-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) turns off all the LEDs.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-turn-off-action)*"
        }
      }
    },
    "tm1651.set_level_percent": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "tm1651::TM1651Display",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the TM1651.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-percent-action)*"
        },
        "level_percent": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), int**: Level from 0 to 100\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-percent-action)*"
        }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-tm1651.set_level_percent": {
      "type": "object",
      "properties": {
        "tm1651.set_level_percent": {
          "anyOf": [
            { "$ref": "#/definitions/tm1651.set_level_percent" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/tm1651.set_level_percent" }
            }
          ],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) changes the level of the battery display at runtime. Automatically calculates input level in percentages to actual level for the display.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-percent-action)*"
        }
      }
    },
    "tm1651.set_level": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "tm1651::TM1651Display",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the TM1651.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-action)*"
        },
        "level": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), int**: Level from 0 to 7\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-action)*"
        }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-tm1651.set_level": {
      "type": "object",
      "properties": {
        "tm1651.set_level": {
          "anyOf": [
            { "$ref": "#/definitions/tm1651.set_level" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/tm1651.set_level" }
            }
          ],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) changes the level of the battery display at runtime.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-action)*"
        }
      }
    },
    "tm1651.set_brightness": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "tm1651::TM1651Display",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the TM1651.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-brightness-action)*"
        },
        "brightness": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), int**: There is three levels of brightness (`1`, `2` or `3`) from lowest to highest brightness.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-brightness-action)*"
        }
      },
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-tm1651.set_brightness": {
      "type": "object",
      "properties": {
        "tm1651.set_brightness": {
          "anyOf": [
            { "$ref": "#/definitions/tm1651.set_brightness" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/tm1651.set_brightness" }
            }
          ],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the brightness of the battery display at runtime.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-brightness-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-delay" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-if" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-while" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-wait_until" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-lambda" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-component.update" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-logger.log" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-mqtt.publish" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-mqtt.publish_json"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_jvc"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_lg"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_nec"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_pioneer"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_sony"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_raw"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc5"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_raw"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_a"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_b"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_c"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_d"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_samsung"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_samsung36"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_panasonic"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-uart.write" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-light.toggle" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-light.control" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-light.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-light.turn_off" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-light.dim_relative"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-light.addressable_set"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-display.page.show"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-display.page.show_next"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-display.page.show_previous"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-homeassistant.service"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-homeassistant.event"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-homeassistant.tag_scanned"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-canbus.send" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-climate.control" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.open" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.close" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.stop" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.control" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-deep_sleep.enter" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-deep_sleep.prevent"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.play_next"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.play_previous"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.play" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.play_folder"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.set_device"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.set_volume"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.set_eq" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.sleep" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.reset" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.start" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.pause" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.stop" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.random" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-fan.toggle" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-fan.turn_off" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-fan.turn_on" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.enroll"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.cancel_enroll"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.delete"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.delete_all"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.led_control"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.aura_led_control"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-globals.set" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-http_request.send"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-http_request.post"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-http_request.get" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-output.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-output.turn_off" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-output.set_level" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.send_code"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.learn" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.start_advanced_sniffing"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.stop_advanced_sniffing"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.send_advanced_code"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.send_raw"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-rtttl.play" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-rtttl.stop" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-script.execute" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-script.stop" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-script.wait" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-servo.write" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-servo.detach" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-sim800l.send_sms" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-sim800l.dial" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-stepper.set_target"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-stepper.report_position"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-stepper.set_speed"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-switch.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-switch.turn_off" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-switch.toggle" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.turn_off" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.set_level_percent"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.set_level" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.set_brightness"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-binary_sensor.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-climate.pid.reset_integral_term"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-climate.pid.autotune"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-climate.pid.set_control_parameters"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-output.esp8266_pwm.set_frequency"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-output.ledc.set_frequency"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-sensor.integration.reset"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-mhz19.abc_disable"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-mhz19.abc_enable" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-mhz19.calibrate_zero"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-pulse_meter.set_total_pulses"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-sensor.rotary_encoder.set_value"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.abc_get_period"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.abc_disable"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.abc_enable"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.background_calibration_result"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.background_calibration"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-sensor.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-switch.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-text_sensor.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-ds1307.write_time"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-ds1307.read_time" }
      ]
    },
    "automation.CONDITION_REGISTRY-and": {
      "type": "object",
      "properties": {
        "and": {
          "anyOf": [
            { "$ref": "#/definitions/automation.CONDITION_REGISTRY" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.CONDITION_REGISTRY" }
            }
          ]
        }
      }
    },
    "automation.CONDITION_REGISTRY-or": {
      "type": "object",
      "properties": {
        "or": {
          "anyOf": [
            { "$ref": "#/definitions/automation.CONDITION_REGISTRY" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.CONDITION_REGISTRY" }
            }
          ]
        }
      }
    },
    "automation.CONDITION_REGISTRY-not": {
      "type": "object",
      "properties": { "not": { "$ref": "#/definitions/condition_list" } }
    },
    "automation.CONDITION_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "This condition performs an arbitrary piece of C++ code (see [Lambda](https://esphome.io/guides/automations.html#config-lambda)) and can be used to create conditional flow in actions.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#lambda-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-for": {
      "type": "object",
      "properties": {
        "for": {
          "allOf": [
            {
              "properties": {
                "time": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), [Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time for which the condition has to have been true.\n\n\n\n*See also: [script Component](https://esphome.io/guides/automations.html#for-condition)*"
                },
                "condition": {
                  "$ref": "#/definitions/condition_list",
                  "markdownDescription": "**[Condition](https://esphome.io/guides/automations.html#config-condition)**: The condition to check.\n\n\n\n*See also: [script Component](https://esphome.io/guides/automations.html#for-condition)*"
                }
              },
              "type": ["object", "null"]
            },
            { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
          ],
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) allows you to check if a given condition has been true for at least a given amount of time.\n\n*See also: [script Component](https://esphome.io/guides/automations.html#for-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-mqtt.connected": {
      "type": "object",
      "properties": {
        "mqtt.connected": {
          "properties": {
            "id": { "type": "string", "id_type": "mqtt::MQTTClientComponent" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if the MQTT client is currently connected to the MQTT broker.\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-connected-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-binary_sensor.is_on": {
      "type": "object",
      "properties": {
        "binary_sensor.is_on": {
          "properties": {
            "id": { "type": "string", "id_type": "binary_sensor::BinarySensor" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-binary_sensor.is_off": {
      "type": "object",
      "properties": {
        "binary_sensor.is_off": {
          "properties": {
            "id": { "type": "string", "id_type": "binary_sensor::BinarySensor" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-light.is_off": {
      "type": "object",
      "properties": {
        "light.is_off": {
          "properties": {
            "id": { "type": "string", "id_type": "light::LightState" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-light.is_on": {
      "type": "object",
      "properties": {
        "light.is_on": {
          "properties": {
            "id": { "type": "string", "id_type": "light::LightState" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "display.is_displaying_page": {
      "properties": {
        "id": { "type": "string", "id_type": "display::DisplayBuffer" },
        "page_id": { "type": "string", "id_type": "display::DisplayPage" }
      },
      "type": ["object", "null"]
    },
    "automation.CONDITION_REGISTRY-display.is_displaying_page": {
      "type": "object",
      "properties": {
        "display.is_displaying_page": {
          "anyOf": [
            { "$ref": "#/definitions/display.is_displaying_page" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/display.is_displaying_page" }
            }
          ]
        }
      }
    },
    "automation.CONDITION_REGISTRY-api.connected": {
      "type": "object",
      "properties": {
        "api.connected": {
          "type": "null",
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if at least one client is connected to the ESPHome native API. Please note client not only includes Home Assistant, but also ESPHome\u2019s OTA log output if logs are shown remotely.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#api-connected-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-sensor.in_range": {
      "type": "object",
      "properties": {
        "sensor.in_range": {
          "properties": {
            "id": { "type": "string", "id_type": "sensor::Sensor" },
            "above": {
              "type": "number",
              "markdownDescription": "**float**: The minimum for the condition.\n\n\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#sensor-in-range-condition)*"
            },
            "below": {
              "type": "number",
              "markdownDescription": "**float**: The maximum for the condition.\n\n\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#sensor-in-range-condition)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This condition passes if the state of the given sensor is inside a range.\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#sensor-in-range-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-dfplayer.is_playing": {
      "type": "object",
      "properties": {
        "dfplayer.is_playing": {
          "properties": {
            "id": { "type": "string", "id_type": "dfplayer::DFPlayer" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This Condition returns true while playback is active.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-is-playing-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-pn532.is_writing": {
      "type": "object",
      "properties": {
        "pn532.is_writing": {
          "properties": {
            "id": { "type": "string", "id_type": "pn532::PN532" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-rtttl.is_playing": {
      "type": "object",
      "properties": {
        "rtttl.is_playing": {
          "properties": {
            "id": { "type": "string", "id_type": "rtttl::Rtttl" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This Condition returns true while playback is active.\n\n*See also: [Rtttl Buzzer](https://esphome.io/components/rtttl.html#rtttl-is-playing-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-script.is_running": {
      "type": "object",
      "properties": {
        "script.is_running": {
          "properties": {
            "id": { "type": "string", "id_type": "script::Script" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [condition](https://esphome.io/guides/automations.html#config-condition) allows you to check if a given script is running. In case scripts are run in `parallel`, this condition only tells you if at least one script of the given id is running, not how many.\n\n*See also: [script Component](https://esphome.io/guides/automations.html#script-is-running-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-time.has_time": {
      "type": "object",
      "properties": {
        "time.has_time": {
          "properties": {
            "id": { "type": "string", "id_type": "time::RealTimeClock" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if time has been set and is valid.\n\n*See also: [Time](https://esphome.io/components/time.html#time-has-time-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-sun.is_above_horizon": {
      "type": "object",
      "properties": {
        "sun.is_above_horizon": {
          "properties": {
            "id": { "type": "string", "id_type": "sun::Sun" },
            "elevation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": -0.83333
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-sun.is_below_horizon": {
      "type": "object",
      "properties": {
        "sun.is_below_horizon": {
          "properties": {
            "id": { "type": "string", "id_type": "sun::Sun" },
            "elevation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": -0.83333
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-switch.is_on": {
      "type": "object",
      "properties": {
        "switch.is_on": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-switch.is_off": {
      "type": "object",
      "properties": {
        "switch.is_off": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-text_sensor.state": {
      "type": "object",
      "properties": {
        "text_sensor.state": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "text_sensor::TextSensor",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The text sensor ID.\n\n\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#text-sensor-state-condition)*"
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), string**: The state to compare to.\n\n\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#text-sensor-state-condition)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) allows you to check if a given text sensor has a specific state.\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#text-sensor-state-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-wifi.connected": {
      "type": "object",
      "properties": {
        "wifi.connected": {
          "type": "null",
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if the WiFi client is currently connected to a station.\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#wifi-connected-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-and" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-or" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-not" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-lambda" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-for" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-mqtt.connected"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-binary_sensor.is_on"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-binary_sensor.is_off"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-light.is_off" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-light.is_on" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-display.is_displaying_page"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-api.connected" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-sensor.in_range"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-dfplayer.is_playing"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-pn532.is_writing"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-rtttl.is_playing"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-script.is_running"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-time.has_time" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-sun.is_above_horizon"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-sun.is_below_horizon"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-switch.is_on" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-switch.is_off" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-text_sensor.state"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-wifi.connected" }
      ]
    },
    "binary_sensor.FILTER_REGISTRY-invert": {
      "type": "object",
      "properties": {
        "invert": {
          "type": "null",
          "markdownDescription": "Simple filter that just inverts every value from the binary sensor.\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#invert)*"
        }
      }
    },
    "binary_sensor.FILTER_REGISTRY-delayed_on_off": {
      "type": "object",
      "properties": {
        "delayed_on_off": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Only send an ON or OFF value if the binary sensor has stayed in the same state for at least the specified time period. **Useful for debouncing binary switches**.\n\n*See also: [delayed_off](https://esphome.io/components/binary_sensor/index.html#delayed-on-off)*"
        }
      }
    },
    "binary_sensor.FILTER_REGISTRY-delayed_on": {
      "type": "object",
      "properties": {
        "delayed_on": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: When a signal ON is received, wait for the specified time period until publishing an ON state. If an OFF value is received while waiting, the ON action is discarded. Or in other words: Only send an ON value if the binary sensor has stayed ON for at least the specified time period. **Useful for debouncing push buttons**.\n\n*See also: [invert](https://esphome.io/components/binary_sensor/index.html#delayed-on)*"
        }
      }
    },
    "binary_sensor.FILTER_REGISTRY-delayed_off": {
      "type": "object",
      "properties": {
        "delayed_off": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: When a signal OFF is received, wait for the specified time period until publishing an OFF state. If an ON value is received while waiting, the OFF action is discarded. Or in other words: Only send an OFF value if the binary sensor has stayed OFF for at least the specified time period. **Useful for debouncing push buttons**.\n\n*See also: [delayed_on](https://esphome.io/components/binary_sensor/index.html#delayed-off)*"
        }
      }
    },
    "autorepeat": {
      "properties": {
        "delay": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "1s",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Delay to proceed to the next timing. Defaults to `1s`.\n\n\n\n*See also: [autorepeat](https://esphome.io/components/binary_sensor/index.html#autorepeat)*"
        },
        "time_off": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "100ms",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Interval to hold the output at OFF. Defaults to `100ms`.\n\n\n\n*See also: [autorepeat](https://esphome.io/components/binary_sensor/index.html#autorepeat)*"
        },
        "time_on": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "900ms",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Interval to hold the output at ON. Defaults to `900ms`.\n\n\n\n*See also: [autorepeat](https://esphome.io/components/binary_sensor/index.html#autorepeat)*"
        }
      },
      "type": ["object", "null"]
    },
    "binary_sensor.FILTER_REGISTRY-autorepeat": {
      "type": "object",
      "properties": {
        "autorepeat": {
          "anyOf": [
            { "$ref": "#/definitions/autorepeat" },
            { "type": "array", "items": { "$ref": "#/definitions/autorepeat" } }
          ],
          "markdownDescription": "A filter implementing the autorepeat behavior. The filter is parametrized by a list of timing descriptions. When a signal ON is received it is passed to the output and the first `delay` is started. When this interval expires the output is turned OFF and toggles using the `time_off` and `time_on` durations for the OFF and ON state respectively. At the same time the `delay` of the second timing description is started and the process is repeated until the list is exhausted, in which case the timing of the last description remains in use. Receiving an OFF signal stops the whole process and immediately outputs OFF.\n\n*See also: [delayed_on_off](https://esphome.io/components/binary_sensor/index.html#autorepeat)*"
        }
      }
    },
    "binary_sensor.FILTER_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "Specify any [lambda](https://esphome.io/guides/automations.html#config-lambda) for more complex filters. The input value from the binary sensor is `x` and you can return `true` for ON, `false` for OFF, and `{}` to stop the filter chain.\n\n*See also: [autorepeat](https://esphome.io/components/binary_sensor/index.html#lambda)*"
        }
      }
    },
    "binary_sensor.FILTER_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-invert" },
        {
          "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-delayed_on_off"
        },
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-delayed_on" },
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-delayed_off" },
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-autorepeat" },
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-lambda" }
      ]
    },
    "light.EFFECTS_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": {
          "allOf": [
            {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The code to execute. `static` variables are especially useful.\n\n\n\n*See also: [Lambda Effect](https://esphome.io/components/light/index.html#lambda-effect)*"
                },
                "update_interval": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": "0ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval with which the lambda code is executed. A value of `0ms` means that the lambda is always executed, without a cool-down. Defaults to `0ms`.\n\n\n\n*See also: [Lambda Effect](https://esphome.io/components/light/index.html#lambda-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Lambda",
                  "markdownDescription": "**string**: The name of the custom effect.\n\n\n\n*See also: [Lambda Effect](https://esphome.io/components/light/index.html#lambda-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect allows you to write completely custom light effects yourself using [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Flicker Effect](https://esphome.io/components/light/index.html#lambda-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-automation": {
      "type": "object",
      "properties": {
        "automation": {
          "allOf": [
            {
              "properties": {
                "sequence": {
                  "$ref": "#/definitions/simple_automation",
                  "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The actions to perform in sequence until the effect is stopped.\n\n\n\n*See also: [Automation Light Effect](https://esphome.io/components/light/index.html#automation-light-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Automation",
                  "markdownDescription": "**string**: The name of the effect.\n\n\n\n*See also: [Automation Light Effect](https://esphome.io/components/light/index.html#automation-light-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "Additionally to the `lambda` and `addressable_lambda` light effects, effects can also be written through ESPHome\u2019s [Automation](https://esphome.io/guides/automations.html#automation) system with the `automation` effect type.\n\n*See also: [Addressable Lambda Effect](https://esphome.io/components/light/index.html#automation-light-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-pulse": {
      "type": "object",
      "properties": {
        "pulse": {
          "allOf": [
            {
              "properties": {
                "transition_length": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "7.5s",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each transition. Defaults to `1s`.\n\n\n\n*See also: [Pulse Effect](https://esphome.io/components/light/index.html#pulse-effect)*"
                },
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "10s",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval when the new transistion is started. Defaults to `1s`.\n\n\n\n*See also: [Pulse Effect](https://esphome.io/components/light/index.html#pulse-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Random",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Pulse`.\n\n\n\n*See also: [Pulse Effect](https://esphome.io/components/light/index.html#pulse-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect makes a pulsating light. The period can be defined by `update_interval`, the transition length with `transition_length`. `transition_length` should be set to less than `update_interval`, setting `transition_length` to `1s` and `update_interval` to `2s` will result in a transition from 0% to 100% lasting 1 second, 1 second full light, a transition from 100% to 0% for 1 second and off for 1 second.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#pulse-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-random": {
      "type": "object",
      "properties": {
        "random": {
          "allOf": [
            {
              "properties": {
                "transition_length": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "7.5s",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each transition to start. Defaults to `5s`.\n\n\n\n*See also: [Random Effect](https://esphome.io/components/light/index.html#random-effect)*"
                },
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "10s",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval with which a new color is selected and transitioned to.\n\n\n\n*See also: [Random Effect](https://esphome.io/components/light/index.html#random-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Random",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Random`.\n\n\n\n*See also: [Random Effect](https://esphome.io/components/light/index.html#random-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect makes a transition (of length `transition_length`) to a randomly-chosen color every `update_interval`.\n\n*See also: [Pulse Effect](https://esphome.io/components/light/index.html#random-effect)*"
        }
      }
    },
    "strobe-colors": {
      "properties": {
        "state": { "type": "boolean", "default": true },
        "brightness": { "type": "string", "default": "1.0" },
        "red": { "type": "string", "default": "1.0" },
        "green": { "type": "string", "default": "1.0" },
        "blue": { "type": "string", "default": "1.0" },
        "white": { "type": "string", "default": "1.0" },
        "duration": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      },
      "type": ["object", "null"]
    },
    "light.EFFECTS_REGISTRY-strobe": {
      "type": "object",
      "properties": {
        "strobe": {
          "allOf": [
            {
              "properties": {
                "colors": {
                  "anyOf": [
                    { "$ref": "#/definitions/strobe-colors" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/definitions/strobe-colors" }
                    }
                  ],
                  "markdownDescription": "**list**: A list of colors to cycle through. Defaults to a quick cycle between ON and OFF.\n  * **state** (*Optional*, boolean): The ON/OFF state to show. Defaults to `True`.\n  \n  * **brightness** (*Optional*, percentage): The brightness of the light. Defaults to `100%`.\n  \n  * **red** (*Optional*, percentage): The percentage that the red color should be on for RGB lights. Defaults to `100%`.\n  \n  * **green** (*Optional*, percentage): The percentage that the green color should be on for RGB lights. Defaults to `100%`.\n  \n  * **blue** (*Optional*, percentage): The percentage that the blue color should be on for RGB lights. Defaults to `100%`.\n  \n  * **white** (*Optional*, percentage): The percentage that the white color should be on for RGBW lights. Defaults to `100%`.\n  \n  * **duration** (**Required**, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The duration this color should be active.\n  \n  \n\n\n\n*See also: [Strobe Effect](https://esphome.io/components/light/index.html#strobe-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Strobe",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Strobe`.\n\n\n\n*See also: [Strobe Effect](https://esphome.io/components/light/index.html#strobe-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect cycles through a list of colors with specific durations.\n\n*See also: [Random Effect](https://esphome.io/components/light/index.html#strobe-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-flicker": {
      "type": "object",
      "properties": {
        "flicker": {
          "allOf": [
            {
              "properties": {
                "alpha": {
                  "type": "string",
                  "default": "0.95",
                  "markdownDescription": "**percentage**: The percentage that the last color value should affect the light. More or less the \u201cforget-factor\u201d of an exponential moving average. Defaults to `95%`.\n\n\n\n*See also: [Flicker Effect](https://esphome.io/components/light/index.html#flicker-effect)*"
                },
                "intensity": {
                  "type": "string",
                  "default": "0.015",
                  "markdownDescription": "**percentage**: The intensity of the flickering, basically the maximum amplitude of the random offsets. Defaults to `1.5%`.\n\n\n\n*See also: [Flicker Effect](https://esphome.io/components/light/index.html#flicker-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Flicker",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Flicker`.\n\n\n\n*See also: [Flicker Effect](https://esphome.io/components/light/index.html#flicker-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect \u201chovers\u201d around the active color of the light and flickers each color channel a bit.\n\n*See also: [Strobe Effect](https://esphome.io/components/light/index.html#flicker-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_lambda": {
      "type": "object",
      "properties": {
        "addressable_lambda": {
          "allOf": [
            {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "0ms"
                },
                "name": { "type": "string", "default": "Addressable Lambda" }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect allows you to access each LED individually in a custom light effect.\n\n*See also: [Addressable Flicker Effect](https://esphome.io/components/light/index.html#addressable-lambda-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_rainbow": {
      "type": "object",
      "properties": {
        "addressable_rainbow": {
          "allOf": [
            {
              "properties": {
                "speed": {
                  "type": "number",
                  "default": 10,
                  "markdownDescription": "**int**: The speed of the effect, unitless. Defaults to `10`.\n\n\n\n*See also: [Addressable Rainbow Effect](https://esphome.io/components/light/index.html#addressable-rainbow-effect)*"
                },
                "width": {
                  "type": "number",
                  "default": 50,
                  "markdownDescription": "**int**: The \u201cwidth\u201d of a full-scale rainbow, unitless. Defaults to `50`.\n\n\n\n*See also: [Addressable Rainbow Effect](https://esphome.io/components/light/index.html#addressable-rainbow-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Rainbow",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Rainbow`.\n\n\n\n*See also: [Addressable Rainbow Effect](https://esphome.io/components/light/index.html#addressable-rainbow-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "A light effect for individually-addressable LEDs that creates a moving rainbow over the whole LED strip using the HSV color wheel.\n\n*See also: [Lambda Effect](https://esphome.io/components/light/index.html#addressable-rainbow-effect)*"
        }
      }
    },
    "addressable_color_wipe-colors": {
      "properties": {
        "red": { "type": "string", "default": "1.0" },
        "green": { "type": "string", "default": "1.0" },
        "blue": { "type": "string", "default": "1.0" },
        "white": { "type": "string", "default": "1.0" },
        "random": { "type": "boolean", "default": false },
        "num_leds": { "type": "number" }
      },
      "type": ["object", "null"]
    },
    "light.EFFECTS_REGISTRY-addressable_color_wipe": {
      "type": "object",
      "properties": {
        "addressable_color_wipe": {
          "allOf": [
            {
              "properties": {
                "colors": {
                  "anyOf": [
                    { "$ref": "#/definitions/addressable_color_wipe-colors" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/addressable_color_wipe-colors"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: The colors to shift in at the beginning of the strip. Defaults to shifting in random colors.\n  * **red** (*Optional*, percentage): The percentage the red color channel should be on. Defaults to `100%`.\n  \n  * **green** (*Optional*, percentage): The percentage the green color channel should be on. Defaults to `100%`.\n  \n  * **blue** (*Optional*, percentage): The percentage the blue color channel should be on. Defaults to `100%`.\n  \n  * **random** (*Optional*, boolean): If set to `True`, will overwrite the RGB colors by a new, randomly-chosen color each time. Defaults to `False`.\n  \n  * **num_leds** (*Optional*, int): The number of leds of this type to have before moving on to the next color.\n  \n  \n\n\n\n*See also: [Addressable Color Wipe Effect](https://esphome.io/components/light/index.html#addressable-color-wipe-effect)*"
                },
                "add_led_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "0.1s",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval with which to shift in new leds at the beginning of the strip. Defaults to `100ms`.\n\n\n\n*See also: [Addressable Color Wipe Effect](https://esphome.io/components/light/index.html#addressable-color-wipe-effect)*"
                },
                "reverse": {
                  "type": "boolean",
                  "default": false,
                  "markdownDescription": "**boolean**: Whether to reverse the direction of the color wipe. Defaults to `False`.\n\n\n\n*See also: [Addressable Color Wipe Effect](https://esphome.io/components/light/index.html#addressable-color-wipe-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Color Wipe",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Color Wipe`.\n\n\n\n*See also: [Addressable Color Wipe Effect](https://esphome.io/components/light/index.html#addressable-color-wipe-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "A light effect for individually-addressable LEDs that continuously introduces new colors at the beginning of the strip and shifts them forward every `add_led_interval`.\n\n*See also: [Addressable Rainbow Effect](https://esphome.io/components/light/index.html#addressable-color-wipe-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_scan": {
      "type": "object",
      "properties": {
        "addressable_scan": {
          "allOf": [
            {
              "properties": {
                "move_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "0.1s",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval with which to move the dot/line one LED forward. Defaults to `100ms`.\n\n\n\n*See also: [Addressable Scan Effect](https://esphome.io/components/light/index.html#addressable-scan-effect)*"
                },
                "scan_width": {
                  "type": "number",
                  "default": 1,
                  "markdownDescription": "**integer**: The number of LEDs to use. Defaults to `1`.\n\n\n\n*See also: [Addressable Scan Effect](https://esphome.io/components/light/index.html#addressable-scan-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Scan",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Scan`.\n\n\n\n*See also: [Addressable Scan Effect](https://esphome.io/components/light/index.html#addressable-scan-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "Create a single, fast-moving dot moving back and forth an individually-addressable LED strip. The color is chosen by the currently active light color.\n\n*See also: [Addressable Color Wipe Effect](https://esphome.io/components/light/index.html#addressable-scan-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_twinkle": {
      "type": "object",
      "properties": {
        "addressable_twinkle": {
          "allOf": [
            {
              "properties": {
                "twinkle_probability": {
                  "type": "string",
                  "default": "5%",
                  "markdownDescription": "**percentage**: The percentage with which, at any time step, a randomly-chosen LED should start its twinkle animation.\n\n\n\n*See also: [Addressable Twinkle Effect](https://esphome.io/components/light/index.html#addressable-twinkle-effect)*"
                },
                "progress_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "32ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval with which to progress the effect. This affects the duration of a twinkle animation. Defaults to `4ms`.\n\n\n\n*See also: [Addressable Twinkle Effect](https://esphome.io/components/light/index.html#addressable-twinkle-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Random Twinkle",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Twinkle`.\n\n\n\n*See also: [Addressable Twinkle Effect](https://esphome.io/components/light/index.html#addressable-twinkle-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "A light effect for individually-addressable LED strips that randomly chooses some LEDs and let\u2019s them bright up for a moment, like a stars twinkling in the night\u2019s sky. The color of the pixels will be chosen by the currently active light color.\n\n*See also: [Addressable Scan Effect](https://esphome.io/components/light/index.html#addressable-twinkle-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_random_twinkle": {
      "type": "object",
      "properties": {
        "addressable_random_twinkle": {
          "allOf": [
            {
              "properties": {
                "twinkle_probability": {
                  "type": "string",
                  "default": "5%",
                  "markdownDescription": "**percentage**: The percentage with which, at any time step, a randomly-chosen LED should start its twinkle animation.\n\n\n\n*See also: [Addressable Random Twinkle Effect](https://esphome.io/components/light/index.html#addressable-random-twinkle-effect)*"
                },
                "progress_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "32ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval with which to progress the effect. This affects the duration of a twinkle animation. Defaults to `4ms`.\n\n\n\n*See also: [Addressable Random Twinkle Effect](https://esphome.io/components/light/index.html#addressable-random-twinkle-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Random Twinkle",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Random Twinkle`.\n\n\n\n*See also: [Addressable Random Twinkle Effect](https://esphome.io/components/light/index.html#addressable-random-twinkle-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "A light effect similar to `addressable_twinkle`, but using random colors for each twinkle animation.\n\n*See also: [Addressable Twinkle Effect](https://esphome.io/components/light/index.html#addressable-random-twinkle-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_fireworks": {
      "type": "object",
      "properties": {
        "addressable_fireworks": {
          "allOf": [
            {
              "properties": {
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "32ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval with which to progress the effect. Defaults to `32ms`.\n\n\n\n*See also: [Addressable Fireworks Effect](https://esphome.io/components/light/index.html#addressable-fireworks-effect)*"
                },
                "spark_probability": {
                  "type": "string",
                  "default": "10%",
                  "markdownDescription": "**percentage**: The probability to start a new firework spark at a randomly-chosen LED at any given time step. Defaults to `10%`.\n\n\n\n*See also: [Addressable Fireworks Effect](https://esphome.io/components/light/index.html#addressable-fireworks-effect)*"
                },
                "use_random_color": {
                  "type": "boolean",
                  "default": false,
                  "markdownDescription": "**boolean**: Whether to use random colors for new firework sparks. Defaults to using the currently active light color.\n\n\n\n*See also: [Addressable Fireworks Effect](https://esphome.io/components/light/index.html#addressable-fireworks-effect)*"
                },
                "fade_out_rate": {
                  "type": "number",
                  "default": 120,
                  "markdownDescription": "**integer**: The rate with which to fade out the LED strip, unitless. Needs to be carefully chosen so that the whole strip doesn\u2019t light up forever if the fade out rate is too low or that the firework sparks do not propagate for a long time. Defaults to `120`.\n\n\n\n*See also: [Addressable Fireworks Effect](https://esphome.io/components/light/index.html#addressable-fireworks-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Fireworks",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Fireworks`.\n\n\n\n*See also: [Addressable Fireworks Effect](https://esphome.io/components/light/index.html#addressable-fireworks-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "A light effect for individually-addressable LED strips that randomly sparks some fireworks at random positions and lets the sparkles cascade over the LED strip.\n\n*See also: [Addressable Random Twinkle Effect](https://esphome.io/components/light/index.html#addressable-fireworks-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_flicker": {
      "type": "object",
      "properties": {
        "addressable_flicker": {
          "allOf": [
            {
              "properties": {
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "16ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time interval for updating the random offsets. Defaults to `16ms`.\n\n\n\n*See also: [Addressable Flicker Effect](https://esphome.io/components/light/index.html#addressable-flicker-effect)*"
                },
                "intensity": {
                  "type": "string",
                  "default": "5%",
                  "markdownDescription": "**percentage**: The intensity of the effect, basically how much the random values can offset the currently active light color. Defaults to `5%`.\n\n\n\n*See also: [Addressable Flicker Effect](https://esphome.io/components/light/index.html#addressable-flicker-effect)*"
                },
                "name": {
                  "type": "string",
                  "default": "Addressable Flicker",
                  "markdownDescription": "**string**: The name of the effect. Defaults to `Addressable Flicker`.\n\n\n\n*See also: [Addressable Flicker Effect](https://esphome.io/components/light/index.html#addressable-flicker-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "An effect similar to the `flicker` effect, but for individually-addressable LED strips. This effect flickers each LED by its own random amount around the currently active light color.\n\n*See also: [Addressable Fireworks Effect](https://esphome.io/components/light/index.html#addressable-flicker-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-adalight": {
      "type": "object",
      "properties": {
        "adalight": {
          "allOf": [
            { "$ref": "#/definitions/uart_bus" },
            {
              "properties": {
                "name": { "type": "string", "default": "Adalight" },
                "uart_id": {
                  "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [Adalight Effect](https://esphome.io/components/light/index.html#adalight-effect)*"
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect enables controlling addressable lights using UART-based [Adalight](https://learn.adafruit.com/adalight-diy-ambient-tv-lighting) protocol, allowing to create realtime ambient lighting effects.\n\n*See also: [E1.31 Component](https://esphome.io/components/light/index.html#adalight-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-e131": {
      "type": "object",
      "properties": {
        "e131": {
          "allOf": [
            {
              "properties": {
                "e131_id": {
                  "type": "string",
                  "id_type": "e131::E131Component"
                },
                "universe": {
                  "type": "number",
                  "markdownDescription": "**integer**: The value of universe, between 1 to 512.\n\n\n\n*See also: [E1.31 Effect](https://esphome.io/components/light/index.html#e1-31-effect)*"
                },
                "channels": {
                  "enum": ["MONO", "RGB", "RGBW"],
                  "markdownDescription": "The type of data. This is used to specify if it is a `MONO`, `RGB` or `RGBW` light and in which order the colors are. Defaults to `RGB`.\n\n\n\n*See also: [E1.31 Effect](https://esphome.io/components/light/index.html#e1-31-effect)*"
                },
                "name": { "type": "string", "default": "E1.31" }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect enables controlling addressable lights using UDP-based [E1.31](https://www.doityourselfchristmas.com/wiki/index.php?title=E1.31_(Streaming-ACN)_Protocol) protocol.\n\n*See also: [Automation Light Effect](https://esphome.io/components/light/index.html#e1-31-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY-wled": {
      "type": "object",
      "properties": {
        "wled": {
          "allOf": [
            {
              "properties": {
                "port": {
                  "type": "number",
                  "default": 21324,
                  "markdownDescription": "**integer**: The port to run the UDP server on. Defaults to `21324`.\n\n\n\n*See also: [WLED Effect](https://esphome.io/components/light/index.html#wled-effect)*"
                },
                "name": { "type": "string", "default": "WLED" }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "This effect enables controlling addressable lights using UDP-based [UDP Realtime Control](https://github.com/Aircoookie/WLED/wiki/UDP-Realtime-Control) protocol used by [WLED](https://github.com/Aircoookie/WLED/wiki/UDP-Realtime-Control), allowing to create realtime ambient lighting effects.\n\n*See also: [Adalight Effect](https://esphome.io/components/light/index.html#wled-effect)*"
        }
      }
    },
    "light.EFFECTS_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-lambda" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-automation" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-pulse" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-random" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-strobe" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-flicker" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_lambda" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_rainbow" },
        {
          "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_color_wipe"
        },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_scan" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_twinkle" },
        {
          "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_random_twinkle"
        },
        {
          "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_fireworks"
        },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_flicker" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-adalight" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-e131" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-wled" }
      ]
    },
    "remote_base.BINARY_SENSOR_REGISTRY-jvc": {
      "type": "object",
      "properties": {
        "jvc": {
          "$ref": "#/definitions/REMOTE_BASE.JVC_SCHEMA",
          "markdownDescription": "Trigger on a decoded JVC remote code with the given data.\n  * **data** (**Required**, int): The JVC code to trigger on, see dumper output for more info.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "name": {
          "markdownDescription": "**string**: The name for the binary sensor.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-lg": {
      "type": "object",
      "properties": {
        "lg": {
          "$ref": "#/definitions/REMOTE_BASE.LG_SCHEMA",
          "markdownDescription": "Trigger on a decoded LG remote code with the given data.\n  * **data** (**Required**, int): The LG code to trigger on, see dumper output for more info.\n  \n  * **nbits** (*Optional*, int): The number of bits of the remote code. Defaults to `28`.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-nec": {
      "type": "object",
      "properties": {
        "nec": {
          "$ref": "#/definitions/REMOTE_BASE.NEC_SCHEMA",
          "markdownDescription": "Trigger on a decoded NEC remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The NEC command to listen for.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-pioneer": {
      "type": "object",
      "properties": {
        "pioneer": {
          "$ref": "#/definitions/REMOTE_BASE.PIONEER_SCHEMA",
          "markdownDescription": "Trigger on a decoded Pioneer remote code with the given data.\n  * **rc_code_1** (**Required**, int): The remote control code trigger on, see dumper output for more details.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-sony": {
      "type": "object",
      "properties": {
        "sony": {
          "$ref": "#/definitions/REMOTE_BASE.SONY_SCHEMA",
          "markdownDescription": "Trigger on a decoded Sony remote code with the given data.\n  * **data** (**Required**, int): The Sony code to trigger on, see dumper output for more info.\n  \n  * **nbits** (*Optional*, int): The number of bits of the remote code. Defaults to `12`.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-raw": {
      "type": "object",
      "properties": {
        "raw": {
          "$ref": "#/definitions/REMOTE_BASE.RAW_SCHEMA",
          "markdownDescription": "Trigger on a raw remote code with the given code.\n  * **code** (**Required**, list): The code to listen for, see [remote_transmitter.transmit_raw Action](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw) for more info. Usually you only need to copy this directly from the dumper output.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc5": {
      "type": "object",
      "properties": {
        "rc5": {
          "$ref": "#/definitions/REMOTE_BASE.RC5_SCHEMA",
          "markdownDescription": "Trigger on a decoded RC5 remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The RC5 command to listen for.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_raw": {
      "type": "object",
      "properties": {
        "rc_switch_raw": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA",
          "markdownDescription": "Trigger on a decoded RC Switch raw remote code with the given data.\n  * **code** (**Required**, string): The remote code to listen for, copy this from the dumper output. To ignore a bit in the received data, use `x` at that place in the **code**.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_a": {
      "type": "object",
      "properties": {
        "rc_switch_type_a": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_A_SCHEMA",
          "markdownDescription": "Trigger on a decoded RC Switch Type A remote code with the given data.\n  * **group** (**Required**, string): The group, binary string.\n  \n  * **device** (**Required**, string): The device in the group, binary string.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_b": {
      "type": "object",
      "properties": {
        "rc_switch_type_b": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_B_SCHEMA",
          "markdownDescription": "Trigger on a decoded RC Switch Type B remote code with the given data.\n  * **address** (**Required**, int): The address, int from 1 to 4.\n  \n  * **channel** (**Required**, int): The channel, int from 1 to 4.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_c": {
      "type": "object",
      "properties": {
        "rc_switch_type_c": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_C_SCHEMA",
          "markdownDescription": "Trigger on a decoded RC Switch Type C remote code with the given data.\n  * **family** (**Required**, string): The family. Range is `a` to `p`.\n  \n  * **group** (**Required**, int): The group. Range is 1 to 4.\n  \n  * **device** (**Required**, int): The device. Range is 1 to 4.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_d": {
      "type": "object",
      "properties": {
        "rc_switch_type_d": {
          "allOf": [
            { "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_D_SCHEMA" },
            { "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TRANSMITTER" }
          ],
          "markdownDescription": "Trigger on a decoded RC Switch Type D remote code with the given data.\n  * **group** (**Required**, int): The group. Range is 1 to 4.\n  \n  * **device** (**Required**, int): The device. Range is 1 to 3.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-samsung": {
      "type": "object",
      "properties": {
        "samsung": {
          "$ref": "#/definitions/REMOTE_BASE.JVC_SCHEMA",
          "markdownDescription": "Trigger on a decoded Samsung remote code with the given data.\n  * **data** (**Required**, int): The data to trigger on, see dumper output for more info.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-samsung36": {
      "type": "object",
      "properties": {
        "samsung36": {
          "$ref": "#/definitions/REMOTE_BASE.PANASONIC_SCHEMA",
          "markdownDescription": "Trigger on a decoded Samsung36 remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The command.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-panasonic": {
      "type": "object",
      "properties": {
        "panasonic": {
          "$ref": "#/definitions/REMOTE_BASE.PANASONIC_SCHEMA",
          "markdownDescription": "Trigger on a decoded Panasonic remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The command.\n  \n  \n\n\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id1)*"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-jvc" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-lg" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-nec" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-pioneer" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-sony" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-raw" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc5" },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_raw"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_a"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_b"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_c"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_d"
        },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-samsung" },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-samsung36"
        },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-panasonic" }
      ]
    },
    "remote_base.DUMPER_REGISTRY-jvc": {
      "type": "object",
      "properties": { "jvc": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-lg": {
      "type": "object",
      "properties": { "lg": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-nec": {
      "type": "object",
      "properties": { "nec": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-pioneer": {
      "type": "object",
      "properties": { "pioneer": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-sony": {
      "type": "object",
      "properties": { "sony": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-raw": {
      "type": "object",
      "properties": { "raw": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-rc5": {
      "type": "object",
      "properties": { "rc5": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-rc_switch": {
      "type": "object",
      "properties": { "rc_switch": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-samsung": {
      "type": "object",
      "properties": { "samsung": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-samsung36": {
      "type": "object",
      "properties": { "samsung36": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-panasonic": {
      "type": "object",
      "properties": { "panasonic": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-jvc" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-lg" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-nec" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-pioneer" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-sony" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-raw" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-rc5" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-rc_switch" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-samsung" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-samsung36" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-panasonic" }
      ]
    },
    "sensor.FILTER_REGISTRY-offset": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "number",
          "markdownDescription": "Adds a constant value to each sensor value.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#offset)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-multiply": {
      "type": "object",
      "properties": {
        "multiply": {
          "type": "number",
          "markdownDescription": "Multiplies each value by a constant value.\n\n*See also: [offset](https://esphome.io/components/sensor/index.html#multiply)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-filter_out": {
      "type": "object",
      "properties": {
        "filter_out": {
          "type": "number",
          "markdownDescription": "**number**: Filter out specific values to be displayed. For example to filter out the value `85.0`\n\n*See also: [calibrate_polynomial](https://esphome.io/components/sensor/index.html#filter-out)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-median": {
      "type": "object",
      "properties": {
        "median": {
          "properties": {
            "window_size": {
              "type": "number",
              "default": 5,
              "markdownDescription": "**integer**: The number of values over which to calculate the median when pushing out a value. This number should be odd if you want an actual received value pushed out. Defaults to `5`.\n\n\n\n*See also: [median](https://esphome.io/components/sensor/index.html#median)*"
            },
            "send_every": {
              "type": "number",
              "default": 5,
              "markdownDescription": "**integer**: How often a sensor value should be pushed out. For example, in above configuration the median is calculated after every 4th received sensor value, over the last 7 received values. Defaults to `5`.\n\n\n\n*See also: [median](https://esphome.io/components/sensor/index.html#median)*"
            },
            "send_first_at": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**integer**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Must be smaller than or equal to `send_every` Defaults to `1`.\n\n\n\n*See also: [median](https://esphome.io/components/sensor/index.html#median)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "A [simple moving median](https://en.wikipedia.org/wiki/Median_filter#Worked_1D_example) over the last few values. This can be used to filter outliers from the received sensor data. A large window size will make the filter slow to react to input changes.\n\n*See also: [filter_out](https://esphome.io/components/sensor/index.html#median)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-min": {
      "type": "object",
      "properties": {
        "min": {
          "properties": {
            "window_size": {
              "type": "number",
              "default": 5,
              "markdownDescription": "**integer**: The number of values over which to calculate the min/max when pushing out a value. Defaults to `5`.\n\n\n\n*See also: [min](https://esphome.io/components/sensor/index.html#min)*"
            },
            "send_every": {
              "type": "number",
              "default": 5,
              "markdownDescription": "**integer**: How often a sensor value should be pushed out. For example, in above configuration the min is calculated after every 4th received sensor value, over the last 7 received values. Defaults to `5`.\n\n\n\n*See also: [min](https://esphome.io/components/sensor/index.html#min)*"
            },
            "send_first_at": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**integer**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Must be smaller than or equal to `send_every` Defaults to `1`.\n\n\n\n*See also: [min](https://esphome.io/components/sensor/index.html#min)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "A moving minimum over the last few values. A large window size will make the filter slow to react to input changes.\n\n*See also: [median](https://esphome.io/components/sensor/index.html#min)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-max": {
      "type": "object",
      "properties": {
        "max": {
          "properties": {
            "window_size": {
              "type": "number",
              "default": 5,
              "markdownDescription": "**integer**: The number of values over which to calculate the min/max when pushing out a value. Defaults to `5`.\n\n\n\n*See also: [max](https://esphome.io/components/sensor/index.html#max)*"
            },
            "send_every": {
              "type": "number",
              "default": 5,
              "markdownDescription": "**integer**: How often a sensor value should be pushed out. For example, in above configuration the min is calculated after every 4th received sensor value, over the last 7 received values. Defaults to `5`.\n\n\n\n*See also: [max](https://esphome.io/components/sensor/index.html#max)*"
            },
            "send_first_at": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**integer**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Must be smaller than or equal to `send_every` Defaults to `1`.\n\n\n\n*See also: [max](https://esphome.io/components/sensor/index.html#max)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "A moving maximum over the last few values. A large window size will make the filter slow to react to input changes.\n\n*See also: [min](https://esphome.io/components/sensor/index.html#max)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-sliding_window_moving_average": {
      "type": "object",
      "properties": {
        "sliding_window_moving_average": {
          "properties": {
            "window_size": {
              "type": "number",
              "default": 15,
              "markdownDescription": "**integer**: The number of values over which to perform an average when pushing out a value.\n\n\n\n*See also: [sliding_window_moving_average](https://esphome.io/components/sensor/index.html#sliding-window-moving-average)*"
            },
            "send_every": {
              "type": "number",
              "default": 15,
              "markdownDescription": "**integer**: How often a sensor value should be pushed out. For example, in above configuration the weighted average is only pushed out on every 15th received sensor value.\n\n\n\n*See also: [sliding_window_moving_average](https://esphome.io/components/sensor/index.html#sliding-window-moving-average)*"
            },
            "send_first_at": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**integer**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Defaults to `1`.\n\n\n\n*See also: [sliding_window_moving_average](https://esphome.io/components/sensor/index.html#sliding-window-moving-average)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "A [simple moving average](https://en.wikipedia.org/wiki/Moving_average#Simple_moving_average) over the last few values. It can be used to have a short update interval on the sensor but only push out an average on a specific interval (thus increasing resolution).\n\n*See also: [max](https://esphome.io/components/sensor/index.html#sliding-window-moving-average)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-exponential_moving_average": {
      "type": "object",
      "properties": {
        "exponential_moving_average": {
          "properties": {
            "alpha": {
              "type": "number",
              "default": 0.1,
              "markdownDescription": "**float**: The forget factor/alpha value of the filter. Defaults to `0.1`.\n\n\n\n*See also: [exponential_moving_average](https://esphome.io/components/sensor/index.html#exponential-moving-average)*"
            },
            "send_every": {
              "type": "number",
              "default": 15,
              "markdownDescription": "**integer**: How often a sensor value should be pushed out. Defaults to `15`.\n\n\n\n*See also: [exponential_moving_average](https://esphome.io/components/sensor/index.html#exponential-moving-average)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "A simple [exponential moving average](https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average) over the last few values. It can be used to have a short update interval on the sensor but only push out an average on a specific interval (thus increasing resolution).\n\n*See also: [sliding_window_moving_average](https://esphome.io/components/sensor/index.html#exponential-moving-average)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "Perform a simple mathematical operation over the sensor values. The input value is `x` and the result of the lambda is used as the output (use `return`).\n\n*See also: [or](https://esphome.io/components/sensor/index.html#lambda)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-delta": {
      "type": "object",
      "properties": {
        "delta": {
          "type": "number",
          "markdownDescription": "This filter stores the last value passed through this filter and only passes incoming values through if the absolute difference is greater than the configured value. For example if a value of 1.0 first comes in, it\u2019s passed on. If the delta filter is configured with a value of 5, it will now not pass on an incoming value of 2.0, only values that are at least 6.0 big or -4.0.\n\n*See also: [debounce](https://esphome.io/components/sensor/index.html#delta)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-or": {
      "type": "object",
      "properties": {
        "or": {
          "anyOf": [
            { "$ref": "#/definitions/sensor.FILTER_REGISTRY" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/sensor.FILTER_REGISTRY" }
            }
          ],
          "markdownDescription": "Pass forward a value with the first child filter that returns. Above example will only pass forward values that are *either* at least 1s old or are if the absolute difference is at least 5.0.\n\n*See also: [delta](https://esphome.io/components/sensor/index.html#or)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-throttle": {
      "type": "object",
      "properties": {
        "throttle": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Throttle the incoming values. When this filter gets an incoming value, it checks if the last incoming value is at least `specified time period` old. If it is not older than the configured value, the value is not passed forward.\n\n*See also: [exponential_moving_average](https://esphome.io/components/sensor/index.html#throttle)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-heartbeat": {
      "type": "object",
      "properties": {
        "heartbeat": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Send the last value that this sensor in the specified time interval. So a value of `10s` will cause the filter to output values every 10s regardless of the input values.\n\n*See also: [throttle](https://esphome.io/components/sensor/index.html#heartbeat)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-debounce": {
      "type": "object",
      "properties": {
        "debounce": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Only send values if the last incoming value is at least `specified time period` old. For example if two values come in at almost the same time, this filter will only output the last value and only after the specified time period has passed without any new incoming values.\n\n*See also: [heartbeat](https://esphome.io/components/sensor/index.html#debounce)*"
        }
      }
    },
    "calibrate_linear": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "sensor.FILTER_REGISTRY-calibrate_linear": {
      "type": "object",
      "properties": {
        "calibrate_linear": {
          "anyOf": [
            { "$ref": "#/definitions/calibrate_linear" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/calibrate_linear" }
            }
          ],
          "markdownDescription": "Calibrate your sensor values by using values you measured with an accurate \u201ctruth\u201d source.\n\n*See also: [multiply](https://esphome.io/components/sensor/index.html#calibrate-linear)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY-calibrate_polynomial": {
      "type": "object",
      "properties": {
        "calibrate_polynomial": {
          "properties": {
            "datapoints": {
              "anyOf": [
                { "$ref": "#/definitions/calibrate_linear" },
                {
                  "type": "array",
                  "items": { "$ref": "#/definitions/calibrate_linear" }
                }
              ]
            },
            "degree": { "type": "number" }
          },
          "type": ["object", "null"],
          "markdownDescription": "Calibrate your sensor values by fitting them to a polynomial functions. This is similar to the `calibrate_linear` filter, but also allows for higher-order functions like quadratic polynomials.\n\n*See also: [calibrate_linear](https://esphome.io/components/sensor/index.html#calibrate-polynomial)*"
        }
      }
    },
    "sensor.FILTER_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-offset" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-multiply" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-filter_out" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-median" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-min" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-max" },
        {
          "$ref": "#/definitions/sensor.FILTER_REGISTRY-sliding_window_moving_average"
        },
        {
          "$ref": "#/definitions/sensor.FILTER_REGISTRY-exponential_moving_average"
        },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-lambda" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-delta" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-or" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-throttle" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-heartbeat" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-debounce" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-calibrate_linear" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-calibrate_polynomial" }
      ]
    },
    "condition_list": {
      "oneOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.CONDITION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY" }
      ]
    },
    "esphome-platformio_options": { "type": "object" },
    "esphome-on_boot": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": { "type": "string", "id_type": "StartupTrigger" },
            "priority": {
              "type": "number",
              "default": 600.0,
              "markdownDescription": "**float**: The priority to execute your custom initialization code. A higher value means a high priority and thus also your code being executed earlier. Please note this is an ESPhome-internal value and any change will not be marked as a breaking change. Defaults to `-10`. Priorities (you can use any value between them too):\n  * `800.0`: This is where all hardware initialization of vital components is executed. For example setting switches to their initial state.\n  \n  * `600.0`: This is where most sensors are set up.\n  \n  * `250.0`: At this priority, WiFi is initialized.\n  \n  * `200.0`: Network connections like MQTT/native API are set up at this priority.\n  \n  * `-100.0`: At this priority, pretty much everything should already be initialized.\n  \n  \n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#on-boot)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "esphome-on_shutdown": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": { "type": "string", "id_type": "ShutdownTrigger" },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "esphome-on_loop": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": { "type": "string", "id_type": "LoopTrigger" },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "esphome-includes": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "esphome-libraries": { "type": "string" },
    "esphome": {
      "properties": {
        "name": {
          "type": "string",
          "markdownDescription": "**string**: This is the name of the node. It should always be unique in your ESPhome network. May only contain lowercase characters, digits and hyphens. See [Changing ESPHome Node Name](https://esphome.io/components/esphome.html#esphome-changing-node-name).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "platform": {
          "enum": ["ESP8266", "ESP32"],
          "markdownDescription": "**string**: The platform your board is on, either `ESP32` or `ESP8266`. See [arduino_version](https://esphome.io/components/esphome.html#esphome-arduino-version).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "board": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The board ESPHome should specify for PlatformIO. For the ESP32, choose the appropriate one from [this list](http://docs.platformio.org/en/latest/platforms/espressif32.html#boards) and use [this list](http://docs.platformio.org/en/latest/platforms/espressif8266.html#boards) for ESP8266-based boards. *This only affects pin aliases and some internal settings*, if unsure choose the generic board option!\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "comment": {
          "type": "string",
          "markdownDescription": "**string**: Additional text information about this node. Only for display in UI.\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "arduino_version": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "recommended",
          "markdownDescription": "The version of the Arduino framework to link the project against. See [arduino_version](https://esphome.io/components/esphome.html#esphome-arduino-version).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "build_path": {
          "type": "string",
          "markdownDescription": "**string**: Customize where ESPHome will store the build files for your node. By default, ESPHome puts all PlatformIO project files under a folder `<NODE_NAME>/`, but you can customize this behavior using this option.\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "platformio_options": {
          "$ref": "#/definitions/esphome-platformio_options",
          "markdownDescription": "**mapping**: Additional options to pass over to PlatformIO in the platformio.ini file. See [platformio_options](https://esphome.io/components/esphome.html#esphome-platformio-options).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "esp8266_restore_from_flash": {
          "type": "boolean",
          "markdownDescription": "**boolean**: Whether to save & restore data from flash on ESP8266s. Defaults to `no`. See [esp8266_restore_from_flash](https://esphome.io/components/esphome.html#esphome-esp8266-restore-from-flash) for more info\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "board_flash_mode": { "enum": ["qio", "qout", "dio", "dout"] },
        "on_boot": {
          "$ref": "#/definitions/esphome-on_boot",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the node starts. See [on_boot](https://esphome.io/components/esphome.html#esphome-on-boot).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "on_shutdown": {
          "$ref": "#/definitions/esphome-on_shutdown",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform right before the node shuts down. See [on_shutdown](https://esphome.io/components/esphome.html#esphome-on-shutdown).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "on_loop": {
          "$ref": "#/definitions/esphome-on_loop",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform on each `loop()` iteration. See [on_loop](https://esphome.io/components/esphome.html#esphome-on-loop).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "includes": {
          "anyOf": [
            { "$ref": "#/definitions/esphome-includes" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/esphome-includes" }
            }
          ],
          "markdownDescription": "**list of files**: A list of C[++] files to include in the main (auto-generated) sketch file for custom components. The paths in this list are relative to the directory where the YAML configuration file is in. Should have file extension `.h` - See [includes](https://esphome.io/components/esphome.html#esphome-includes) for more info.\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "libraries": {
          "anyOf": [
            { "$ref": "#/definitions/esphome-libraries" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/esphome-libraries" }
            }
          ],
          "markdownDescription": "**list of libraries**: A list of [platformio libraries](https://platformio.org/lib) to include in the project. See [platformio lib install](https://docs.platformio.org/en/latest/userguide/lib/cmd_install.html).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "name_add_mac_suffix": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: Appends the last 6 bytes of the mac address of the device to the name in the form `<name>-aabbcc`. Defaults to `False`. See [Adding the MAC address as a suffix to the device name](https://esphome.io/components/esphome.html#esphome-mac-suffix).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "uart_bus": {
      "properties": {
        "uart_id": { "type": "string", "id_type": "uart::UARTComponent" }
      },
      "type": ["object", "null"]
    },
    "spi_bus": {
      "properties": {
        "spi_id": { "type": "string", "id_type": "spi::SPIComponent" },
        "cs_pin": { "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA" }
      },
      "type": ["object", "null"]
    },
    "i2c_bus-multiplexer": {
      "properties": {
        "id": { "type": "string", "id_type": "i2c::I2CMultiplexer" },
        "channel": { "type": "number" }
      },
      "type": ["object", "null"]
    },
    "i2c_bus": {
      "properties": {
        "i2c_id": { "type": "string", "id_type": "i2c::I2CComponent" },
        "multiplexer": { "$ref": "#/definitions/i2c_bus-multiplexer" },
        "address": { "type": "string" }
      },
      "type": ["object", "null"]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_press": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "binary_sensor::PressTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_release": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "binary_sensor::ReleaseTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_click": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "binary_sensor::ClickTrigger"
            },
            "min_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "50ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The minimum duration the click should last. Defaults to `50ms`.\n\n\n\n*See also: [lambda](https://esphome.io/components/binary_sensor/index.html#on-click)*"
            },
            "max_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "350ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The maximum duration the click should last. Defaults to `350ms`.\n\n\n\n*See also: [lambda](https://esphome.io/components/binary_sensor/index.html#on-click)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_double_click": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "binary_sensor::DoubleClickTrigger"
            },
            "min_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "50ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The minimum duration the click should last. Defaults to `50ms`.\n\n\n\n*See also: [lambda](https://esphome.io/components/binary_sensor/index.html#on-double-click)*"
            },
            "max_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "350ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The maximum duration the click should last. Defaults to `350ms`.\n\n\n\n*See also: [lambda](https://esphome.io/components/binary_sensor/index.html#on-double-click)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click-timing[]": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "binary_sensor::MultiClickTrigger"
            },
            "timing": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click-timing[]"
              },
              "markdownDescription": "The timing of the multi click. This uses a language-based grammar using these styles:\n  * `<ON/OFF> for <TIME> to <TIME>`\n  \n  * `<ON/OFF> for at least <TIME>`\n  \n  * `<ON/OFF> for at most <TIME>`\n  \n  \n\n\n\n*See also: [lambda](https://esphome.io/components/binary_sensor/index.html#on-multi-click)*"
            },
            "invalid_cooldown": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "1s",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: If a multi click is started, but the timing set in `timing` does not match, a \u201ccool down\u201d period will be activated during which no timing will be matched. Defaults to `1s`.\n\n\n\n*See also: [lambda](https://esphome.io/components/binary_sensor/index.html#on-multi-click)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_state": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "binary_sensor::StateTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA" },
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "binary_sensor::BinarySensor",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Status Binary Sensor](https://esphome.io/components/binary_sensor/status.html#configuration-variables)*"
            },
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTBinarySensorComponent"
            },
            "device_class": {
              "enum": [
                "",
                "battery",
                "battery_charging",
                "cold",
                "connectivity",
                "door",
                "garage_door",
                "gas",
                "heat",
                "light",
                "lock",
                "moisture",
                "motion",
                "moving",
                "occupancy",
                "opening",
                "plug",
                "power",
                "presence",
                "problem",
                "safety",
                "smoke",
                "sound",
                "vibration",
                "window"
              ],
              "markdownDescription": "**string**: The device class for the sensor. See [https://www.home-assistant.io/components/binary_sensor/](https://www.home-assistant.io/components/binary_sensor/) for a list of available options.\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "filters": {
              "anyOf": [
                { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY"
                  }
                }
              ],
              "markdownDescription": "**list**: A list of filters to apply on the binary sensor values such as inverting signals. See [Binary Sensor Filters](https://esphome.io/components/binary_sensor/index.html#binary-sensor-filters).\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "on_press": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_press",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the button is pressed. See [on_press](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-press).\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "on_release": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_release",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the button is released. See [on_release](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-release).\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "on_click": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_click",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the button is held down for a specified period of time. See [on_click](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-click).\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "on_double_click": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_double_click",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the button is pressed twice for specified periods of time. See [on_double_click](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-double-click).\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "on_multi_click": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the button is pressed in a specific sequence. See [on_multi_click](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-multi-click).\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "on_state": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_state",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a state is published. See [on_state](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-state).\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "name": {
              "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [Status Binary Sensor](https://esphome.io/components/binary_sensor/status.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.MULTI_CLICK_TIMING_SCHEMA": {
      "properties": {
        "state": { "type": "boolean" },
        "min_length": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        },
        "max_length": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      },
      "type": ["object", "null"]
    },
    "canbus.CANBUS_SCHEMA-on_frame-on_frame": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "canbus::CanbusTrigger"
            },
            "can_id": { "type": "number" },
            "use_extended_id": { "type": "boolean", "default": false },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "canbus.CANBUS_SCHEMA-on_frame": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "canbus::CanbusTrigger"
            },
            "can_id": { "type": "number" },
            "use_extended_id": { "type": "boolean", "default": false },
            "on_frame": {
              "$ref": "#/definitions/canbus.CANBUS_SCHEMA-on_frame-on_frame"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "canbus.CANBUS_SCHEMA": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "canbus::CanbusComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#base-can-bus-configuration)*"
            },
            "can_id": {
              "type": "number",
              "markdownDescription": "**integer**: default *can id* used for transmitting frames.\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#base-can-bus-configuration)*"
            },
            "bit_rate": {
              "enum": [
                "5KBPS",
                "10KBPS",
                "20KBPS",
                "31K25BPS",
                "33KBPS",
                "40KBPS",
                "50KBPS",
                "80KBPS",
                "83K3BPS",
                "95KBPS",
                "100KBPS",
                "125KBPS",
                "200KBPS",
                "250KBPS",
                "500KBPS",
                "1000KBPS"
              ],
              "markdownDescription": "**enum**: One of the supported bitrates. Defaults to `125KBPS`.\n  * 5KBPS\n  \n  * 10KBPS\n  \n  * 20KBPS\n  \n  * 31K25BPS\n  \n  * 33KBPS\n  \n  * 40KBPS\n  \n  * 50KBPS\n  \n  * 80KBPS\n  \n  * 83K3BPS\n  \n  * 95KBPS\n  \n  * 100KBPS\n  \n  * 125KBPS\n  \n  * 200KBPS\n  \n  * 250KBPS\n  \n  * 500KBPS\n  \n  * 1000KBPS\n  \n  \n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#base-can-bus-configuration)*"
            },
            "use_extended_id": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: default *False* identifies the type of *can_id*: *False*: Standard 11 bits IDs, *True*: Extended 29 bits ID\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#base-can-bus-configuration)*"
            },
            "on_frame": {
              "$ref": "#/definitions/canbus.CANBUS_SCHEMA-on_frame",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when ability CAN Frame is received. See [on_frame](https://esphome.io/components/canbus.html#canbus-on-frame).\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#base-can-bus-configuration)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "climate.CLIMATE_CONTROL_ACTION_SCHEMA": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "climate::Climate",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the climate device to control.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        },
        "mode": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Put the climate device in a specific mode. One of `OFF`, `AUTO`, `COOL` and `HEAT`.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        },
        "target_temperature": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the target temperature of a climate device.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        },
        "target_temperature_low": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the lower target temperature of a climate device with a two-point target temperature.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        },
        "target_temperature_high": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the higher target temperature of a climate device with a two-point target temperature.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        },
        "away": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**boolean, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the away mode of the climate device.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        },
        "fan_mode": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**boolean, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the fan mode of the climate device. One of `ON`, `OFF`, `AUTO`, `LOW`, `MEDIUM`, `HIGH`, `MIDDLE`, `FOCUS`, `DIFFUSE`.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        },
        "swing_mode": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**boolean, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the swing mode of the climate device. One of `OFF`, `BOTH`, `VERTICAL`, `HORIZONTAL`.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
        }
      },
      "type": ["object", "null"]
    },
    "climate.CLIMATE_SCHEMA-visual": {
      "properties": {
        "min_temperature": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The minimum temperature the climate device can reach. Used to set the range of the frontend gauge.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
        },
        "max_temperature": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The maximum temperature the climate device can reach. Used to set the range of the frontend gauge.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
        },
        "temperature_step": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The granularity with which the target temperature can be controlled.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
        }
      },
      "type": ["object", "null"]
    },
    "climate.CLIMATE_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "climate::Climate" },
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTClimateComponent"
            },
            "visual": {
              "$ref": "#/definitions/climate.CLIMATE_SCHEMA-visual",
              "markdownDescription": "Visual settings for the climate device - these do not affect operation and are solely for controlling how the climate device shows up in the frontend.\n  * **min_temperature** (*Optional*, float): The minimum temperature the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **max_temperature** (*Optional*, float): The maximum temperature the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **temperature_step** (*Optional*, float): The granularity with which the target temperature can be controlled.\n  \n  \n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "cover.COVER_CONTROL_ACTION_SCHEMA": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "cover::Cover",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The cover to control.\n\n\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-control-action)*"
        },
        "stop": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**boolean**: Whether to stop the cover.\n\n\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-control-action)*"
        },
        "state": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The state to set the cover to - one of `OPEN` or `CLOSE`.\n\n\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-control-action)*"
        },
        "position": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The cover position to set.\n  * `0.0` = `0%` = `CLOSED`\n  \n  * `1.0` = `100%` = `OPEN`\n  \n  \n\n\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-control-action)*"
        },
        "tilt": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The tilt position to set. In range 0% - 100%.\n\n\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-control-action)*"
        }
      },
      "type": ["object", "null"]
    },
    "cover.COVER_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "cover::Cover" },
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTCoverComponent"
            },
            "device_class": {
              "enum": [
                "",
                "awning",
                "blind",
                "curtain",
                "damper",
                "door",
                "garage",
                "gate",
                "shade",
                "shutter",
                "window"
              ],
              "markdownDescription": "**string**: The device class for the sensor. See [https://www.home-assistant.io/components/cover/](https://www.home-assistant.io/components/cover/) for a list of available options.\n\n\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#base-cover-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#base-cover-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "display.BASIC_DISPLAY_SCHEMA": {
      "properties": {
        "lambda": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "display.FULL_DISPLAY_SCHEMA-pages": {
      "properties": {
        "id": { "type": "string", "id_type": "display::DisplayPage" },
        "lambda": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "display.FULL_DISPLAY_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
        {
          "properties": {
            "rotation": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "pages": {
              "anyOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA-pages" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA-pages"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "fan.FAN_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "fan::FanState" },
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTFanComponent"
            },
            "oscillation_state_topic": {
              "type": "string",
              "markdownDescription": "**string**: The topic to publish fan oscillation state changes to.\n\n\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "oscillation_command_topic": {
              "type": "string",
              "markdownDescription": "**string**: The topic to receive oscillation commands on.\n\n\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "speed_state_topic": {
              "type": "string",
              "markdownDescription": "**string**: The topic to publish fan speed state changes to.\n\n\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "speed_command_topic": {
              "type": "string",
              "markdownDescription": "**string**: The topic to receive speed commands on.\n\n\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "name": {
              "markdownDescription": "**string**: The name of the fan.\n\n\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "light::LightTurnOnTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "light::LightTurnOffTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.ADDRESSABLE_LIGHT_SCHEMA-color_correct[]": { "type": "string" },
    "light.ADDRESSABLE_LIGHT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "light::LightState" },
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTJSONLightComponent"
            },
            "restore_mode": {
              "enum": [
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "ALWAYS_OFF",
                "ALWAYS_ON"
              ],
              "markdownDescription": "Control how the GPIO Switch attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_OFF` (Default) - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `ALWAYS_OFF` - Always initialize the light as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the light as ON on bootup.\n  \n  \n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "on_turn_on": {
              "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the light is turned on. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "on_turn_off": {
              "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the light is turned off. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "gamma_correct": {
              "type": "number",
              "default": 2.8,
              "markdownDescription": "**float**: Apply a [gamma correction factor](https://en.wikipedia.org/wiki/Gamma_correction) to the light channels. Defaults to `2.8`.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "default_transition_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "1s",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The default transition length to use when no transition length is set in the light call. Defaults to `1s`.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "effects": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-lambda" },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-automation"
                      },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-pulse" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-random" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-strobe" },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-flicker"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_lambda"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_rainbow"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_color_wipe"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_scan"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_twinkle"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_random_twinkle"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_fireworks"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_flicker"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-adalight"
                      },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-e131" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-wled" }
                    ]
                  }
                }
              ],
              "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "color_correct": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-color_correct[]"
              },
              "markdownDescription": "**list of float**: Apply a color correction to each color channel. This defines the maximum brightness of each channel. For example `[100%, 50%, 100%]` would set the green channel to be at most at 50% brightness.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "power_supply": {
              "type": "string",
              "id_type": "power_supply::PowerSupply",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The [Power Supply Component](https://esphome.io/components/power_supply.html) to connect to this light. When the light is turned on, the power supply will automatically be switched on too.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.BINARY_LIGHT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "light::LightState" },
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTJSONLightComponent"
            },
            "restore_mode": {
              "enum": [
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "ALWAYS_OFF",
                "ALWAYS_ON"
              ],
              "markdownDescription": "Control how the GPIO Switch attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_OFF` (Default) - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `ALWAYS_OFF` - Always initialize the light as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the light as ON on bootup.\n  \n  \n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "on_turn_on": {
              "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the light is turned on. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "on_turn_off": {
              "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the light is turned off. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "effects": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-lambda" },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-automation"
                      },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-strobe" }
                    ]
                  }
                }
              ],
              "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "gamma_correct": {
              "markdownDescription": "**float**: Apply a [gamma correction factor](https://en.wikipedia.org/wiki/Gamma_correction) to the light channels. Defaults to `2.8`.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "default_transition_length": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The default transition length to use when no transition length is set in the light call. Defaults to `1s`.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "color_correct": {
              "markdownDescription": "**list of float**: Apply a color correction to each color channel. This defines the maximum brightness of each channel. For example `[100%, 50%, 100%]` would set the green channel to be at most at 50% brightness.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "power_supply": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The [Power Supply Component](https://esphome.io/components/power_supply.html) to connect to this light. When the light is turned on, the power supply will automatically be switched on too.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.BRIGHTNESS_ONLY_LIGHT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "light::LightState" },
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTJSONLightComponent"
            },
            "restore_mode": {
              "enum": [
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "ALWAYS_OFF",
                "ALWAYS_ON"
              ],
              "markdownDescription": "Control how the GPIO Switch attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_OFF` (Default) - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `ALWAYS_OFF` - Always initialize the light as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the light as ON on bootup.\n  \n  \n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "on_turn_on": {
              "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the light is turned on. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "on_turn_off": {
              "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the light is turned off. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "gamma_correct": {
              "type": "number",
              "default": 2.8,
              "markdownDescription": "**float**: Apply a [gamma correction factor](https://en.wikipedia.org/wiki/Gamma_correction) to the light channels. Defaults to `2.8`.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "default_transition_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "1s",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The default transition length to use when no transition length is set in the light call. Defaults to `1s`.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "effects": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-lambda" },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-automation"
                      },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-pulse" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-random" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-strobe" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-flicker" }
                    ]
                  }
                }
              ],
              "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "color_correct": {
              "markdownDescription": "**list of float**: Apply a color correction to each color channel. This defines the maximum brightness of each channel. For example `[100%, 50%, 100%]` would set the green channel to be at most at 50% brightness.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "power_supply": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The [Power Supply Component](https://esphome.io/components/power_supply.html) to connect to this light. When the light is turned on, the power supply will automatically be switched on too.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.LIGHT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "light::LightState" },
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTJSONLightComponent"
            },
            "restore_mode": {
              "enum": [
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "ALWAYS_OFF",
                "ALWAYS_ON"
              ],
              "markdownDescription": "Control how the GPIO Switch attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_OFF` (Default) - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `ALWAYS_OFF` - Always initialize the light as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the light as ON on bootup.\n  \n  \n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "on_turn_on": {
              "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the light is turned on. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "on_turn_off": {
              "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the light is turned off. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger).\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "effects": {
              "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "gamma_correct": {
              "markdownDescription": "**float**: Apply a [gamma correction factor](https://en.wikipedia.org/wiki/Gamma_correction) to the light channels. Defaults to `2.8`.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "default_transition_length": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The default transition length to use when no transition length is set in the light call. Defaults to `1s`.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "color_correct": {
              "markdownDescription": "**list of float**: Apply a color correction to each color channel. This defines the maximum brightness of each channel. For example `[100%, 50%, 100%]` would set the green channel to be at most at 50% brightness.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "power_supply": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The [Power Supply Component](https://esphome.io/components/power_supply.html) to connect to this light. When the light is turned on, the power supply will automatically be switched on too.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#base-light-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output.BINARY_OUTPUT_SCHEMA": {
      "properties": {
        "power_supply": {
          "type": "string",
          "id_type": "power_supply::PowerSupply"
        },
        "inverted": { "type": "boolean" }
      },
      "type": ["object", "null"]
    },
    "output.FLOAT_OUTPUT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
        {
          "properties": {
            "max_power": {
              "type": "string",
              "markdownDescription": "**float**: Sets the maximum output value of this output platform. Must be in range from min_power to 1. Defaults to `1`.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "min_power": {
              "type": "string",
              "markdownDescription": "**float**: Sets the minimum output value of this output platform. Must be in range from 0 to max_power. Defaults to `0`.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "power_supply": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The [power supply](https://esphome.io/components/power_supply.html) to connect to this output. When the output is enabled, the power supply will automatically be switched on too.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "inverted": {
              "markdownDescription": "**boolean**: If the output should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ],
      "markdownDescription": "Each output platform extends this configuration schema.\n\n*See also: [Output Component](https://esphome.io/components/output/index.html#base-output-configuration)*"
    },
    "sensor.SENSOR_SCHEMA-on_value": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "sensor::SensorStateTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor.SENSOR_SCHEMA-on_raw_value": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "sensor::SensorRawStateTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor.SENSOR_SCHEMA-on_value_range": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "sensor::ValueRangeTrigger"
            },
            "above": {
              "type": "number",
              "markdownDescription": "**float**: The minimum for the trigger.\n\n\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#on-value-range)*"
            },
            "below": {
              "type": "number",
              "markdownDescription": "**float**: The maximum for the trigger.\n\n\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#on-value-range)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor.SENSOR_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA" },
        {
          "properties": {
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTSensorComponent"
            },
            "id": {
              "type": "string",
              "id_type": "sensor::Sensor",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
            },
            "unit_of_measurement": {
              "type": "string",
              "markdownDescription": "**string**: Manually set the unit of measurement the sensor should advertise its values with. This does not actually do any maths (conversion between units).\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "icon": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**icon**: Manually set the icon to use for the sensor in the frontend. The icon set here is ignored by Home Assistant, if a device class is already set.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "accuracy_decimals": {
              "type": "number",
              "markdownDescription": "**int**: Manually set the accuracy of decimals to use when reporting values.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "device_class": {
              "enum": [
                "",
                "battery",
                "current",
                "energy",
                "humidity",
                "illuminance",
                "signal_strength",
                "temperature",
                "power",
                "power_factor",
                "pressure",
                "timestamp",
                "voltage"
              ],
              "markdownDescription": "**string**: The device class for the sensor. See [https://www.home-assistant.io/integrations/sensor/#device-class](https://www.home-assistant.io/integrations/sensor/#device-class) for a list of available options. Set to `\"\"` to remove the default device class of a sensor.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "force_update": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: If true, this option will force the frontend (usually Home Assistant) to create a state changed event when the sensor updates even if the value stayed the same. Some applications like Grafana require this when working with Home Assistant, but beware it can significantly increase the database size. Defaults to `false`.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "expire_after": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Manually set the time in which the sensor values should be marked as \u201cexpired\u201d/\u201cunknown\u201d. Not providing any value means no expiry.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "filters": {
              "anyOf": [
                { "$ref": "#/definitions/sensor.FILTER_REGISTRY" },
                {
                  "type": "array",
                  "items": { "$ref": "#/definitions/sensor.FILTER_REGISTRY" }
                }
              ],
              "markdownDescription": "Specify filters to use for some basic transforming of values. See [Sensor Filters](https://esphome.io/components/sensor/index.html#sensor-filters) for more information.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "on_value": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA-on_value",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a new value is published. See [on_value](https://esphome.io/components/sensor/index.html#sensor-on-value).\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "on_raw_value": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA-on_raw_value",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a raw value is received that hasn\u2019t passed through any filters. See [on_raw_value](https://esphome.io/components/sensor/index.html#sensor-on-raw-value).\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "on_value_range": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA-on_value_range",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a published value transition from outside to a range to inside. See [on_value_range](https://esphome.io/components/sensor/index.html#sensor-on-value-range).\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the humidity sensor.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [WiFi Signal Sensor](https://esphome.io/components/sensor/wifi_signal.html#configuration-variables)*"
            },
            "address": {
              "markdownDescription": "**int**: Manually specify the I^2C address of the sensor. Defaults to `0x52`.\n\n\n\n*See also: [TOF10120 Time Of Flight Distance Sensor](https://esphome.io/components/sensor/tof10120.html#configuration-variables)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select pin of the SPI interface.\n\n\n\n*See also: [MAX6675 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max6675.html#configuration-variables)*"
            },
            "spi_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX6675 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max6675.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "stepper.STEPPER_SCHEMA": {
      "properties": {
        "max_speed": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The maximum speed in `steps/s` (steps per seconds) to drive the stepper at. Note most steppers can\u2019t step properly with speeds higher than 250 steps/s.\n\n\n\n*See also: [Stepper Component](https://esphome.io/components/stepper/index.html#base-stepper-configuration)*"
        },
        "acceleration": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "inf",
          "markdownDescription": "**float**: The acceleration in `steps/s^2` (steps per seconds squared) to use when starting to move. The default is `inf` which means infinite acceleration, so the stepper will try to drive with the full speed immediately. This value is helpful if that first motion of the motor is too jerky for what it\u2019s moving.  If you make this a small number, it will take the motor a moment to get up  to speed.\n\n\n\n*See also: [Stepper Component](https://esphome.io/components/stepper/index.html#base-stepper-configuration)*"
        },
        "deceleration": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "inf",
          "markdownDescription": "**float**: The same as `acceleration`, but for when the motor is decelerating shortly before reaching the set position. Defaults to `inf` (immediate deceleration).\n\n\n\n*See also: [Stepper Component](https://esphome.io/components/stepper/index.html#base-stepper-configuration)*"
        }
      },
      "type": ["object", "null"]
    },
    "switch.SWITCH_SCHEMA-on_turn_on": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "switch_::SwitchTurnOnTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "switch.SWITCH_SCHEMA-on_turn_off": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "switch_::SwitchTurnOffTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "switch.SWITCH_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "mqtt_id": {
              "type": "string",
              "id_type": "mqtt::MQTTSwitchComponent"
            },
            "icon": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**icon**: Manually set the icon to use for the sensor in the frontend.\n\n\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#base-switch-configuration)*"
            },
            "inverted": {
              "type": "boolean",
              "markdownDescription": "**boolean**: Whether to invert the binary state, i.e.\u00a0report ON states as OFF and vice versa. Defaults to `False`.\n\n\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#base-switch-configuration)*"
            },
            "on_turn_on": {
              "$ref": "#/definitions/switch.SWITCH_SCHEMA-on_turn_on",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the switch is turned on. See [switch.on_turn_on / switch.on_turn_off Trigger](https://esphome.io/components/switch/index.html#switch-on-turn-on-off-trigger).\n\n\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#base-switch-configuration)*"
            },
            "on_turn_off": {
              "$ref": "#/definitions/switch.SWITCH_SCHEMA-on_turn_off",
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the switch is turned off. See [switch.on_turn_on / switch.on_turn_off Trigger](https://esphome.io/components/switch/index.html#switch-on-turn-on-off-trigger).\n\n\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#base-switch-configuration)*"
            },
            "name": {
              "markdownDescription": "**string**: The name of the switch.\n\n\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#base-switch-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#base-switch-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "text_sensor.TEXT_SENSOR_SCHEMA-on_value": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "text_sensor::TextSensorStateTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "text_sensor.TEXT_SENSOR_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA" },
        {
          "properties": {
            "mqtt_id": { "type": "string", "id_type": "mqtt::MQTTTextSensor" },
            "icon": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**icon**: Manually set the icon to use for the sensor in the frontend.\n\n\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#base-text-sensor-configuration)*"
            },
            "on_value": {
              "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA-on_value",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a new value is published. See [on_value](https://esphome.io/components/text_sensor/index.html#text-sensor-on-value).\n\n\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#base-text-sensor-configuration)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#base-text-sensor-configuration)*"
            },
            "internal": {
              "markdownDescription": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#base-text-sensor-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "time.TIME_SCHEMA-on_time": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": { "type": "string", "id_type": "time::CronTrigger" },
            "seconds": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which seconds of the minute the automation will trigger. Defaults to `*` (all seconds). Range is from 0 to 59.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "minutes": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which minutes of the hour the automation will trigger. Defaults to `*` (all minutes). Range is from 0 to 59.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "hours": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which hours of the day the automation will trigger. Defaults to `*` (all hours). Range is from 0 to 23.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "days_of_month": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which days of the month the automation will trigger. Defaults to `*` (all days). Range is from 1 to 31.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "months": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which months of the year to trigger. Defaults to `*` (all months). The month names JAN to DEC are automatically substituted. Range is from 1 (January) to 12 (December).\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "days_of_week": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which days of the week to trigger. Defaults to `*` (all days). The names SUN to SAT are automatically substituted. Range is from 1 (Sunday) to 7 (Saturday).\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "cron": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Alternatively, you can specify a whole cron expression like `* /5 * * * *`. Please note years and some special characters like `L`, `#` are currently not supported.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "at": { "type": ["null", "object", "string", "array", "number"] },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "time.TIME_SCHEMA-on_time_sync": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": { "type": "string", "id_type": "time::SyncTrigger" },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "time.TIME_SCHEMA": {
      "allOf": [
        {
          "properties": {
            "timezone": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "TZ3",
              "markdownDescription": "**string**: Manually tell ESPHome what time zone to use with [this format](https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html) (warning: the format is quite complicated) or the simpler [TZ database name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) in the form <Region>/<City>. ESPHome tries to automatically infer the time zone string based on the time zone of the computer that is running ESPHome, but this might not always be accurate.\n\n\n\n*See also: [Time](https://esphome.io/components/time.html#configuration-variables)*"
            },
            "on_time": {
              "$ref": "#/definitions/time.TIME_SCHEMA-on_time",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: Automation to run at specific intervals using a cron-like syntax. See [on_time Trigger](https://esphome.io/components/time.html#time-on-time).\n\n\n\n*See also: [Time](https://esphome.io/components/time.html#configuration-variables)*"
            },
            "on_time_sync": {
              "$ref": "#/definitions/time.TIME_SCHEMA-on_time_sync",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: Automation to run when the time source could be (re-)synchronized.. See [on_time_sync Trigger](https://esphome.io/components/time.html#time-on-time-sync).\n\n\n\n*See also: [Time](https://esphome.io/components/time.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Specify the ID of the time for use in lambdas.\n\n\n\n*See also: [Time](https://esphome.io/components/time.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "ads1115": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "ads1115::ADS1115Component",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this ADS1115 Hub. Use this if you want to use multiple ADS1115 hubs at once.\n\n\n\n*See also: [ads1115 Component/Hub](https://esphome.io/components/sensor/ads1115.html#configuration-variables)*"
            },
            "continuous_mode": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Set if the ADS1115 should continuously measure voltages or only measure them when an update is called. Please enable this for the [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html) integration. Defaults to `off`.\n\n\n\n*See also: [ads1115 Component/Hub](https://esphome.io/components/sensor/ads1115.html#configuration-variables)*"
            },
            "address": {
              "markdownDescription": "**int**: The i\u00b2c address of the sensor. See [I\u00b2C Addresses](https://esphome.io/components/sensor/ads1115.html#ads1115-i2c-addresses) for more information.\n\n\n\n*See also: [ads1115 Component/Hub](https://esphome.io/components/sensor/ads1115.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "animation": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "display::Animation",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID with which you will be able to reference the animation later in your display code.\n\n\n\n*See also: [Animation](https://esphome.io/components/display/index.html#configuration-variables)*"
        },
        "file": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The path (relative to where the .yaml file is) of the gif file.\n\n\n\n*See also: [Animation](https://esphome.io/components/display/index.html#configuration-variables)*"
        },
        "resize": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: If set, this will resize all the frames to fit inside the given dimensions `WIDTHxHEIGHT` and preserve the aspect ratio.\n\n\n\n*See also: [Animation](https://esphome.io/components/display/index.html#configuration-variables)*"
        },
        "type": {
          "enum": ["BINARY", "GRAYSCALE", "RGB24"],
          "markdownDescription": "Specifies how to encode each frame internally. Defaults to `BINARY`.\n  * `BINARY`: Two colors, suitable for 1 color displays or 2 color image in color displays. Uses 1 bit per pixel, 8 pixels per byte.\n  \n  * `GREYSCALE`: Full scale grey. Uses 8 bits per pixel, 1 pixel per byte.\n  \n  * `RGB24`: Full RGB color stored. Uses 3 bytes per pixel.\n  \n  \n\n\n\n*See also: [Animation](https://esphome.io/components/display/index.html#configuration-variables)*"
        },
        "raw_data_id": { "type": "string", "id_type": "uint8_t" },
        "dither": {
          "markdownDescription": "Specifies which dither method used to process each frame, only used in GREYSCALE and BINARY type image. Defaults to `NONE`. You can read more about it [here](https://pillow.readthedocs.io/en/stable/reference/Image.html?highlight=Dither#PIL.Image.Image.convert) and [here](https://en.wikipedia.org/wiki/Dither).\n  * `NONE`: Every pixel convert to its nearest color.\n  \n  * `FLOYDSTEINBERG`: Uses Floyd-Steinberg dither to approximate the original image luminosity levels.\n  \n  \n\n\n\n*See also: [Animation](https://esphome.io/components/display/index.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "apds9960": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "apds9960::APDS9960" },
            "address": {
              "markdownDescription": "**integer**: The I\u00b2C address of the sensor. Defaults to `0x39`.\n\n\n\n*See also: [apds9960 Component/Hub](https://esphome.io/components/sensor/apds9960.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [apds9960 Component/Hub](https://esphome.io/components/sensor/apds9960.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "api-services-variables": { "properties": {}, "type": ["object", "null"] },
    "api-services": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "api::UserServiceTrigger"
            },
            "service": { "type": "string" },
            "variables": { "$ref": "#/definitions/api-services-variables" },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "ble_client-on_connect": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "ble_client::BLEClientConnectTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "ble_client-on_disconnect": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "ble_client::BLEClientDisconnectTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "ble_client": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "ble_client::BLEClient",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID to use for code generation, and for reference by dependent components.\n\n\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#configuration-variables)*"
            },
            "mac_address": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**MAC Address**: The MAC address of the BLE device to connect to.\n\n\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#configuration-variables)*"
            },
            "name": { "type": "string" },
            "on_connect": {
              "$ref": "#/definitions/ble_client-on_connect",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the client connects to a device. See [on_connect](https://esphome.io/components/ble_client.html#ble-client-on-connect).\n\n\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#configuration-variables)*"
            },
            "on_disconnect": {
              "$ref": "#/definitions/ble_client-on_disconnect",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the client disconnects from a device. See [on_disconnect](https://esphome.io/components/ble_client.html#ble-client-on-disconnect).\n\n\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#configuration-variables)*"
            },
            "esp32_ble_id": {
              "type": "string",
              "id_type": "esp32_ble_tracker::ESP32BLETracker"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "climate-bang_bang-away_config": {
      "properties": {
        "default_target_temperature_low": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The default low target temperature for the control algorithm during away mode.\n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
        },
        "default_target_temperature_high": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The default high target temperature for the control algorithm during away mode.\n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "climate-pid-control_parameters": {
      "properties": {
        "kp": {
          "type": "number",
          "markdownDescription": "**float**: The factor for the proportional term of the PID controller.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
        },
        "ki": {
          "type": "number",
          "default": 0.0,
          "markdownDescription": "**float**: The factor for the integral term of the PID controller. Defaults to `0`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
        },
        "kd": {
          "type": "number",
          "default": 0.0,
          "markdownDescription": "**float**: The factor for the derivative term of the PID controller. Defaults to `0`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
        },
        "min_integral": {
          "type": "number",
          "default": -1,
          "markdownDescription": "**float**: The maximum value of the integral term multiplied by `ki` to prevent windup. Defaults to `-1`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
        },
        "max_integral": {
          "type": "number",
          "default": 1,
          "markdownDescription": "**float**: The minimum value of the integral term multiplied by `ki` to prevent windup. Defaults to `1`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "climate-thermostat-away_config": {
      "properties": {
        "default_target_temperature_high": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "default_target_temperature_low": {
          "type": ["null", "object", "string", "array", "number"]
        }
      },
      "type": ["object", "null"]
    },
    "color": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "Color" },
            "red": {
              "type": "string",
              "markdownDescription": "**percentage**: The percentage of the red component. Defaults to `100%`.\n\n\n\n*See also: [Color](https://esphome.io/components/display/index.html#color)*"
            },
            "red_int": { "type": "number" },
            "green": {
              "type": "string",
              "markdownDescription": "**percentage**: The percentage of the green component. Defaults to `100%`.\n\n\n\n*See also: [Color](https://esphome.io/components/display/index.html#color)*"
            },
            "green_int": { "type": "number" },
            "blue": {
              "type": "string",
              "markdownDescription": "**percentage**: The percentage of the blue component. Defaults to `100%`.\n\n\n\n*See also: [Color](https://esphome.io/components/display/index.html#color)*"
            },
            "blue_int": { "type": "number" },
            "white": {
              "type": "string",
              "markdownDescription": "**percentage**: The percentage of the white component. Defaults to `100%`.\n\n\n\n*See also: [Color](https://esphome.io/components/display/index.html#color)*"
            },
            "white_int": { "type": "number" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "custom_component-components": {
      "allOf": [
        {
          "properties": { "id": { "type": "string", "id_type": "Component" } },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "custom_component": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "custom_component::CustomComponentConstructor"
        },
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the binary sensor(s).\n\n\n\n*See also: [Generic Custom Component](https://esphome.io/custom/custom_component.html#generic-custom-component)*"
        },
        "components": {
          "anyOf": [
            { "$ref": "#/definitions/custom_component-components" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/custom_component-components" }
            }
          ],
          "markdownDescription": "**list**: A list of components to initialize. The length here must equal the number of items in the `return` statement of the `lambda`. This is useful if you need to give an `id` to the component you created.\n\n\n\n*See also: [Generic Custom Component](https://esphome.io/custom/custom_component.html#generic-custom-component)*"
        }
      },
      "type": ["object", "null"]
    },
    "dallas": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "dallas::DallasComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [dallas Component/Hub](https://esphome.io/components/sensor/dallas.html#configuration-variables)*"
            },
            "one_wire_id": {
              "type": "string",
              "id_type": "dallas::ESPOneWire"
            },
            "pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
              "markdownDescription": "**number**: The pin the sensor bus is connected to.\n\n\n\n*See also: [dallas Component/Hub](https://esphome.io/components/sensor/dallas.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval that the sensors should be checked. Defaults to 60 seconds.\n\n\n\n*See also: [dallas Component/Hub](https://esphome.io/components/sensor/dallas.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "deep_sleep-esp32_ext1_wakeup-pins": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "dfplayer-on_finished_playback": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "dfplayer::DFPlayerFinishedPlaybackTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "dfplayer": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "dfplayer::DFPlayer",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#configuration-variables)*"
            },
            "on_finished_playback": {
              "$ref": "#/definitions/dfplayer-on_finished_playback",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when playback is finished.\n\n\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#configuration-variables)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/uart_bus" }
      ]
    },
    "esp32_ble_tracker-on_ble_advertise": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "esp32_ble_tracker::ESPBTAdvertiseTrigger"
            },
            "mac_address": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**MAC Address**: The MAC address to filter for this automation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-advertise)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "esp32_ble_tracker-on_ble_service_data_advertise": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "esp32_ble_tracker::BLEServiceDataAdvertiseTrigger"
            },
            "mac_address": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**MAC Address**: The MAC address to filter for this automation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-service-data-advertise)*"
            },
            "service_uuid": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: 16 bit, 32 bit, or 128 bit BLE Service UUID.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-service-data-advertise)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "esp32_ble_tracker-on_ble_manufacturer_data_advertise": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "esp32_ble_tracker::BLEManufacturerDataAdvertiseTrigger"
            },
            "mac_address": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**MAC Address**: The MAC address to filter for this automation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-manufacturer-data-advertise)*"
            },
            "manufacturer_id": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: 16 bit, 32 bit, or 128 bit BLE Manufacturer ID.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-manufacturer-data-advertise)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "esp32_camera-external_clock": {
      "properties": {
        "pin": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**pin**: The pin the external clock line is connected to.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
        },
        "frequency": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "20MHz",
          "markdownDescription": "**float**: The frequency of the external clock, must be either 20MHz or 10MHz. Defaults to `20MHz`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "esp32_camera-i2c_pins": {
      "properties": {
        "sda": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**pin**: The SDA pin of the I\u00b2C interface. Also called `SIOD`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
        },
        "scl": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**pin**: The SCL pin of the I\u00b2C interface. Also called `SIOC`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "ethernet-manual_ip": {
      "allOf": [
        {
          "properties": {
            "static_ip": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**IPv4 address**: The static IP of your node.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "gateway": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**IPv4 address**: The gateway of the local network.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "subnet": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**IPv4 address**: The subnet of the local network.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "dns1": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0.0.0.0",
              "markdownDescription": "**IPv4 address**: The main DNS server to use.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "dns2": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0.0.0.0",
              "markdownDescription": "**IPv4 address**: The backup DNS server to use.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "exposure_notifications-on_exposure_notification": {
      "allOf": [
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "exposure_notifications::ExposureNotificationTrigger"
            },
            "esp32_ble_id": {
              "type": "string",
              "id_type": "esp32_ble_tracker::ESP32BLETracker"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "external_components-source-git": {
      "properties": {
        "url": { "type": ["null", "object", "string", "array", "number"] },
        "ref": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "external_components-source-local": {
      "properties": {
        "path": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "external_components-components": { "type": "string" },
    "external_components": {
      "properties": {
        "source": {
          "allOf": [
            {
              "type": "object",
              "properties": { "type": { "type": "string" } }
            },
            {
              "if": { "properties": { "type": { "const": "git" } } },
              "then": { "$ref": "#/definitions/external_components-source-git" }
            },
            {
              "if": { "properties": { "type": { "const": "local" } } },
              "then": {
                "$ref": "#/definitions/external_components-source-local"
              }
            }
          ],
          "markdownDescription": "The location of the components you want to retrieve. See [Local](https://esphome.io/components/external_components.html#external-components-local) and [Git](https://esphome.io/components/external_components.html#external-components-git).\n  * **type** (**Required**): Repository type. One of `local`, `git`.\n  \n  git options:\n  * **url** (**Required**, url): HTTP git repository url. See [Git](https://esphome.io/components/external_components.html#external-components-git).\n  \n  * **ref** (*Optional*, string): Git ref (branch or tag). If not specified the default branch is used.\n  \n  local options:\n  * **path** (**Required**):  Path to use when using local components. See [Local](https://esphome.io/components/external_components.html#external-components-local).\n  \n  \n\n\n\n*See also: [External Components](https://esphome.io/components/external_components.html#external-components)*"
        },
        "refresh": {
          "type": "string",
          "default": "1d",
          "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval the source will be checked. Has no effect on `local`. See [Refresh](https://esphome.io/components/external_components.html#external-components-refresh). for more info. Defaults to `1day`.\n\n\n\n*See also: [External Components](https://esphome.io/components/external_components.html#external-components)*"
        },
        "components": {
          "anyOf": [
            { "$ref": "#/definitions/external_components-components" },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/external_components-components"
              }
            }
          ],
          "markdownDescription": "**list**: The list of components to use from the external source. By default, all available components are used.\n\n\n\n*See also: [External Components](https://esphome.io/components/external_components.html#external-components)*"
        }
      },
      "type": ["object", "null"]
    },
    "fingerprint_grow-on_finger_scan_matched": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "fingerprint_grow::FingerScanMatchedTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "fingerprint_grow-on_finger_scan_unmatched": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "fingerprint_grow::FingerScanUnmatchedTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "fingerprint_grow-on_enrollment_scan": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "fingerprint_grow::EnrollmentScanTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "fingerprint_grow-on_enrollment_done": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "fingerprint_grow::EnrollmentDoneTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "fingerprint_grow-on_enrollment_failed": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "fingerprint_grow::EnrollmentFailedTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "fingerprint_grow": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "fingerprint_grow::FingerprintGrowComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "sensing_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to the reader\u2019s finger detection signal (WAKEUP) output.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "password": {
              "type": "number",
              "markdownDescription": "**int**: Password to use for authentication. Defaults to `0x00`.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "new_password": {
              "type": "number",
              "markdownDescription": "**int**: Sets a new password to use for authentication. See [Setting a New Password](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-set-new-password) for more information.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_finger_scan_matched": {
              "$ref": "#/definitions/fingerprint_grow-on_finger_scan_matched",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when an enrolled fingerprint is scanned. See [on_finger_scan_matched Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-matched).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_finger_scan_unmatched": {
              "$ref": "#/definitions/fingerprint_grow-on_finger_scan_unmatched",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when an unknown fingerprint is scanned. See [on_finger_scan_unmatched Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-unmatched).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_enrollment_scan": {
              "$ref": "#/definitions/fingerprint_grow-on_enrollment_scan",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a fingerprint is scanned during enrollment. See [on_enrollment_scan Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-scan).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_enrollment_done": {
              "$ref": "#/definitions/fingerprint_grow-on_enrollment_done",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a fingerprint is enrolled. See [on_enrollment_done Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-done).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_enrollment_failed": {
              "$ref": "#/definitions/fingerprint_grow-on_enrollment_failed",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a fingerprint enrollment failed. See [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-failed).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/uart_bus" }
      ]
    },
    "font": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "display::Font",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID with which you will be able to reference the font later in your display code.\n\n\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#drawing-static-text)*"
        },
        "file": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The path (relative to where the .yaml file is) of the TrueType font file.\n\n\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#drawing-static-text)*"
        },
        "glyphs": {
          "type": ["null", "object", "string", "array", "number"],
          "default": " !\"%()+,-.:/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\u00b0",
          "markdownDescription": "**list**: A list of characters you plan to use. Only the characters you specify here will be compiled into the binary. Adjust this if you need some special characters or want to reduce the size of the binary if you don\u2019t plan to use some glyphs. The items in the list can also be more than one character long if you for example want to use font ligatures. Defaults to `!\"%()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`.\n\n\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#drawing-static-text)*"
        },
        "size": {
          "type": "number",
          "default": 20,
          "markdownDescription": "**int**: The size of the font in pt (not pixel!). If you want to use the same font in different sizes, create two font objects. Defaults to `20`.\n\n\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#drawing-static-text)*"
        },
        "raw_data_id": { "type": "string", "id_type": "uint8_t" }
      },
      "type": ["object", "null"]
    },
    "globals": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "globals::GlobalsComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Give the global variable an ID so that you can refer to it later in [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#global-variables)*"
            },
            "type": {
              "type": "string",
              "markdownDescription": "**string**: The C++ type of the global variable, for example `bool` (for `true`/`false`), `int` (for integers), `float` (for decimal numbers), `int[50]` for an array of 50 integers, etc.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#global-variables)*"
            },
            "initial_value": {
              "type": "string",
              "markdownDescription": "**string**: The value with which to initialize this variable if the state can not be restored or if state restoration is not enabled. This needs to be wrapped in quotes! Defaults to the C++ default value for this type (for example `0` for integers).\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#global-variables)*"
            },
            "restore_value": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Whether to try to restore the state on boot up. Be careful: on the ESP8266, you only have a total of 96 bytes available for this! Defaults to `no`. This will use storage in \u201cRTC memory\u201d, so it won\u2019t survive a power-cycle unless you use the `esp8266_restore_from_flash` option to save to flash. See [esp8266_restore_from_flash](https://esphome.io/components/esphome.html) for details.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#global-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "gps": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "gps::GPS" },
            "latitude": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the Latitude as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "longitude": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the Longitude as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "speed": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the measured speed as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "course": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the measured course as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "altitude": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the measured altitude as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "satellites": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the number of tracking satellites being used as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/uart_bus" }
      ]
    },
    "i2c": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "i2c::I2CComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this I\u00b2C bus if you need multiple I\u00b2C buses.\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            },
            "sda": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the I\u00b2C bus. Defaults to the default of your board (usually GPIO21 for ESP32 and GPIO4 for ESP8266).\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            },
            "scl": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the clock line of the I\u00b2C bus. Defaults to the default of your board (usually GPIO22 for ESP32 and GPIO5 for ESP8266).\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            },
            "frequency": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "50kHz",
              "markdownDescription": "**float**: Set the frequency the I\u00b2C bus should operate on. Defaults to `50kHz`. Values are `50kHz`, `100kHz`, `200kHz`, \u2026 `800kHz`\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            },
            "scan": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: If ESPHome should do a search of the I\u00b2C address space on startup. Defaults to `True`.\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "image": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "display::Image",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID with which you will be able to reference the image later in your display code.\n\n\n\n*See also: [Images](https://esphome.io/components/display/index.html#images)*"
        },
        "file": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The path (relative to where the .yaml file is) of the image file.\n\n\n\n*See also: [Images](https://esphome.io/components/display/index.html#images)*"
        },
        "resize": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: If set, this will resize the image to fit inside the given dimensions `WIDTHxHEIGHT` and preserve the aspect ratio.\n\n\n\n*See also: [Images](https://esphome.io/components/display/index.html#images)*"
        },
        "type": {
          "enum": ["BINARY", "GRAYSCALE", "RGB24"],
          "markdownDescription": "Specifies how to encode image internally. Defaults to `BINARY`.\n  * `BINARY`: Two colors, suitable for 1 color displays or 2 color image in color displays. Uses 1 bit per pixel, 8 pixels per byte.\n  \n  * `GRAYSCALE`: Full scale grey. Uses 8 bits per pixel, 1 pixel per byte.\n  \n  * `RGB24`: Full RGB color stored. Uses 3 bytes per pixel.\n  \n  \n\n\n\n*See also: [Images](https://esphome.io/components/display/index.html#images)*"
        },
        "dither": {
          "enum": ["NONE", "FLOYDSTEINBERG"],
          "markdownDescription": "Specifies which dither method used to process the image, only used in GRAYSCALE and BINARY type image. Defaults to `NONE`. You can read more about it [here](https://pillow.readthedocs.io/en/stable/reference/Image.html?highlight=Dither#PIL.Image.Image.convert) and [here](https://en.wikipedia.org/wiki/Dither).\n  * `NONE`: Every pixel convert to its nearest color.\n  \n  * `FLOYDSTEINBERG`: Uses Floyd-Steinberg dither to approximate the original image luminosity levels.\n  \n  \n\n\n\n*See also: [Images](https://esphome.io/components/display/index.html#images)*"
        },
        "raw_data_id": { "type": "string", "id_type": "uint8_t" }
      },
      "type": ["object", "null"]
    },
    "interval": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "interval::IntervalTrigger" },
            "interval": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to execute the action with.\n\n\n\n*See also: [interval Component](https://esphome.io/guides/automations.html#interval-component)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ],
              "markdownDescription": "**[Actions](https://esphome.io/guides/automations.html#config-action)**: The action to perform.\n\n\n\n*See also: [interval Component](https://esphome.io/guides/automations.html#interval-component)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "light-partition-segments": {
      "properties": {
        "id": { "type": "string", "id_type": "light::LightState" },
        "from": { "type": "number" },
        "to": { "type": "number" }
      },
      "type": ["object", "null"]
    },
    "logger-logs": {
      "properties": {
        "app": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "component": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esphal": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "helpers": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "preferences": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "scheduler": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "api.service": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "a4988.stepper": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ac_dimmer": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "adalight_light_effect": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "adc": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "addressable_light.display": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ade7953": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ads1115": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "aht10": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "am2320": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "apds9960": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "api.connection": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "api": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "api.proto": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "as3935": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "as3935_i2c": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "as3935_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "atc_mithermometer": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "atm90e32": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "bang_bang.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "bh1750.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "binary.fan": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "binary_sensor.automation": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "binary_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sensor.filter": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "binary_sensor_map": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ble_client": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ble_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ble_switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ble_presence": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ble_rssi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ble_scanner": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "bme280.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "bme680.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "bme680_bsec.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "bmp085.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "bmp280.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "b_parasite": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "canbus": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "captive_portal": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ccs811": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "climate_ir": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "climate.climate_ir_lg": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "coolix.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "cover": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "cse7766": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ct_clamp": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "custom.binary_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "custom.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "custom.switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "custom.text_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "daikin.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "dallas.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "dallas.one_wire": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "debug": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "deep_sleep": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "dfplayer": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "dht": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "dht12": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "display": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ds1307": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "duty_cycle": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "e131": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "e131_addressable_light_effect": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "endstop.cover": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esp32_ble_beacon": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esp32_ble_tracker": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esp32_camera": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esp32_dac": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esp32_hall": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esp32_touch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esp8266_pwm": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ethernet": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "exposure_notifications": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ezo.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "fan.automation": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "fan": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "fastled": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "fingerprint_grow": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "fujitsu_general.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "gpio.binary_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "gpio.output": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "switch.gpio": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "gps": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "gps.time": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "hdc1080": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "climate.hitachi_ac344": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "hlw8012": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "hm3301.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "hmc5883l": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "homeassistant.binary_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "homeassistant.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "homeassistant.text_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "homeassistant.time": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "http_request": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "htu21d": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "hx711": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "i2c": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ili9341": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ina219": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ina226": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ina3221": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "inkbird_ibsth1_mini": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "inkplate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "integration": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "json": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "lcd": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "lcd_gpio": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "lcd_pcf8574": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ledc.output": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "light.addressable": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "light": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "logger": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "max31855": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "max31856": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "max31865": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "max6675": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "max7219": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "max7219DIGIT": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp23008": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp23016": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp23017": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp23s08": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp23s17": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp23x08_base": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp23x17_base": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp2515": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp3008": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp4725": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mcp9808": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mhz19": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "midea_ac": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "midea_dongle": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mitsubishi.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "modbus": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mpr121": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mpu6050": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.custom": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.binary_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.component": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.cover": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.fan": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.light": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt.text_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt_subscribe.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "mqtt_subscribe.text_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ms5611": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "my9231.output": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "nextion": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "nfc.ndef_message": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "nfc.ndef_record": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "nfc": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "nfc.tag": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ntc": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ota": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "output.automation": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "output.float": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "output.switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "partition.light": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pca9685": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pcd_8544": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pcf8574": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pid.autotune": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pid.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pid.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pmsx003": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pn532": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pn532.mifare_classic": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pn532.mifare_ultralight": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pn532_i2c": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pn532_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "power_supply": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pulse_counter": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pulse_meter": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pulse_width": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pzem004t": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pzemac": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "pzemdc": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "qmc5883l": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "rc522": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "rc522_i2c": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "rc522_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "rdm6300": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.jvc": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.lg": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.nec": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.panasonic": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.pioneer": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.raw": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.rc5": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.rc_switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote_base": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.samsung36": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.samsung": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote.sony": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote_receiver.esp32": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote_receiver.esp8266": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "remote_transmitter": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "resistance": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "restart": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "rf_bridge": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "rotary_encoder": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "rtttl": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ruuvitag": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ruuvi_ble": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "scd30": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "script": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sds011": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "senseair": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sensor.automation": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "servo": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sgp30": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sgp40": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sht3xd": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sht4x": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "shtcx": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "shutdown.switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sim800l": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "output.slow_pwm": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sm16716": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sm2135": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sm300d2": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sn74hc595": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sntp": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "speed.fan": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sps30": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1306": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1306_i2c": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1306_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1322": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1322_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1325": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1325_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1327": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1327_i2c": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1327_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1331": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1331_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1351": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ssd1351_spi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "st7735": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "st7789v": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "status": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "status_led": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "stepper": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sts3x": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sun": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sun.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sun.text_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "switch.automation": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sx1509": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sx1509_gpio_pin": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "sx1509_float_channel": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tca9548a": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tcl112.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tcs34725": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "teleinfo": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "template.binary_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "template.cover": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "template.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "template.switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "template.text_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "text_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "thermostat.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "automation": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "time": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "time_based.cover": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tlc59208f": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tm1651.display": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tmp102": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tmp117": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tof10120": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "toshiba.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "total_daily_energy": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tsl2561": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ttp229_bsf": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ttp229_lsf": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tuya": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tuya.binary_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tuya.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tuya.fan": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tuya.light": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tuya.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tuya.switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "tx20": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "uart": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "uart_esp32": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "uart_esp8266": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "uart.switch": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "uln2003.stepper": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "ultrasonic.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "uptime.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "version.text_sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "vl53l0x": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "waveshare_epaper": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "web_server": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "web_server_base": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "whirlpool.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "wifi": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "wifi_esp32": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "wifi_esp8266": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "wifi_info": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "wifi_signal.sensor": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "wled_light_effect": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_ble": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_cgd1": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_cgg1": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_gcls002": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_hhccjcy01": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_hhccpot002": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_jqjcy01ym": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_lywsd02": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_lywsd03mmc": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_lywsdcgq": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_mhoc401": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_miscale": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_miscale2": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_mjyd02yla": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_mue4094rt": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "xiaomi_wx08zm": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "yashima.climate": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "zyaura": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        }
      },
      "type": ["object", "null"]
    },
    "logger-on_message": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "logger::LoggerMessageTrigger"
            },
            "level": {
              "enum": [
                "NONE",
                "ERROR",
                "WARN",
                "INFO",
                "DEBUG",
                "VERBOSE",
                "VERY_VERBOSE"
              ]
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "mcp23008": {
      "allOf": [
        {
          "properties": {
            "open_drain_interrupt": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**bool**: Configure the interrupt pin to open-drain mode. Useful when the MCP23008\u2019s power supply is greater than 3.3 volts. Note that this pin will require a pull-up resistor (to 3.3 volts) when this mode is enabled.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#configuration-variables)*"
            },
            "id": {
              "type": "string",
              "id_type": "mcp23008::MCP23008",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP23008 component.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#configuration-variables)*"
            },
            "address": {
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x20`.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "mcp23016": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "mcp23016::MCP23016",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP23016 component.\n\n\n\n*See also: [MCP23016 Component](https://esphome.io/components/mcp230xx.html#id1)*"
            },
            "address": {
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x20`.\n\n\n\n*See also: [MCP23016 Component](https://esphome.io/components/mcp230xx.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "mcp23017": {
      "allOf": [
        {
          "properties": {
            "open_drain_interrupt": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**bool**: Configure interrupt pins to open-drain mode. Useful when the MCP23017\u2019s power supply is greater than 3.3 volts. Note that these pins will require pull-up resistors (to 3.3 volts) when this mode is enabled.\n\n\n\n*See also: [MCP23017 Component](https://esphome.io/components/mcp230xx.html#id3)*"
            },
            "id": {
              "type": "string",
              "id_type": "mcp23017::MCP23017",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP23017 component.\n\n\n\n*See also: [MCP23017 Component](https://esphome.io/components/mcp230xx.html#id3)*"
            },
            "address": {
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x20`.\n\n\n\n*See also: [MCP23017 Component](https://esphome.io/components/mcp230xx.html#id3)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "mcp23s08": {
      "allOf": [
        {
          "properties": {
            "open_drain_interrupt": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**bool**: Configure interrupt pins to open-drain mode. Useful when the MCP23S08\u2019s power supply is greater than 3.3 volts. Note that these pins will require pull-up resistors (to 3.3 volts) when this mode is enabled.\n\n\n\n*See also: [MCP23S08 Component](https://esphome.io/components/mcp23Sxx.html#configuration-variables)*"
            },
            "id": {
              "type": "string",
              "id_type": "mcp23s08::MCP23S08",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP23S08 component.\n\n\n\n*See also: [MCP23S08 Component](https://esphome.io/components/mcp23Sxx.html#configuration-variables)*"
            },
            "deviceaddress": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The address of the chip. Defaults to `0`.\n\n\n\n*See also: [MCP23S08 Component](https://esphome.io/components/mcp23Sxx.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**int**: The SPI chip select pin to use\n\n\n\n*See also: [MCP23S08 Component](https://esphome.io/components/mcp23Sxx.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "mcp23s17": {
      "allOf": [
        {
          "properties": {
            "open_drain_interrupt": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**bool**: Configure interrupt pins to open-drain mode. Useful when the MCP23S17\u2019s power supply is greater than 3.3 volts. Note that these pins will require pull-up resistors (to 3.3 volts) when this mode is enabled.\n\n\n\n*See also: [MCP23S17 Component](https://esphome.io/components/mcp23Sxx.html#id1)*"
            },
            "id": {
              "type": "string",
              "id_type": "mcp23s17::MCP23S17",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP23S17 component.\n\n\n\n*See also: [MCP23S17 Component](https://esphome.io/components/mcp23Sxx.html#id1)*"
            },
            "deviceaddress": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The address of the chip. Defaults to `0`.\n\n\n\n*See also: [MCP23S17 Component](https://esphome.io/components/mcp23Sxx.html#id1)*"
            },
            "cs_pin": {
              "markdownDescription": "**int**: The SPI chip select pin to use.\n\n\n\n*See also: [MCP23S17 Component](https://esphome.io/components/mcp23Sxx.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "mcp3008": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "mcp3008::MCP3008" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "modbus": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "modbus::Modbus" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/uart_bus" }
      ]
    },
    "mpr121": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "mpr121::MPR121Component",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "release_debounce": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**integer**: The minimum length that no touch is recognized before a release event is created. Range is from 0 to 7. Defaults to 0.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "touch_debounce": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**integer**: The minimum length before a touch is recognized. Range is from 0 to 7. Defaults to 0.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "touch_threshold": {
              "type": "number",
              "default": 11,
              "markdownDescription": "**integer**: The touch threshold for all channels. This defines the sensitivity for touch detection and should be between 5 and 30 (lower = more sensitive). Defaults to 12. Typically the touch threshold is a little bigger than the release threshold.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "release_threshold": {
              "type": "number",
              "default": 6,
              "markdownDescription": "**integer**: The release defines the sensitivity for touch detection and should be between 5 and 30. Defaults to 6.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "address": {
              "markdownDescription": "**integer**: The I\u00b2C address of the sensor. Defaults to `0x5A`.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "mqtt-ssl_fingerprints": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "mqtt-on_message": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "mqtt::MQTTMessageTrigger"
            },
            "topic": {
              "type": "string",
              "markdownDescription": "**string**: The MQTT topic to subscribe to and listen for MQTT messages on. Every time a message with **this exact topic** is received, the automation will trigger.\n\n\n\n*See also: [on_message Trigger](https://esphome.io/components/mqtt.html#on-message-trigger)*"
            },
            "qos": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0,
              "markdownDescription": "**integer**: The MQTT Quality of Service to subscribe to the topic with. Defaults to 0.\n\n\n\n*See also: [on_message Trigger](https://esphome.io/components/mqtt.html#on-message-trigger)*"
            },
            "payload": {
              "type": "string",
              "markdownDescription": "**string**: Optionally set a payload to match. Only if exactly the payload you specify with this option is received, the automation will be executed.\n\n\n\n*See also: [on_message Trigger](https://esphome.io/components/mqtt.html#on-message-trigger)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "mqtt-on_json_message": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "mqtt::MQTTJsonMessageTrigger"
            },
            "topic": {
              "type": "string",
              "markdownDescription": "**string**: The MQTT topic to subscribe to and listen for MQTT messages on. Every time a message with **this exact topic** is received, the automation will trigger.\n\n\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#on-json-message-trigger)*"
            },
            "qos": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0,
              "markdownDescription": "**integer**: The MQTT Quality of Service to subscribe to the topic with. Defaults to 0.\n\n\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#on-json-message-trigger)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "my9231": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "my9231::MY9231OutputComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this `my9231` component. Use this if you have multiple MY9231/MY9291 chains connected at the same time.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "data_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin which DI is connected to.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin which DCKI is connected to.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "num_channels": {
              "type": "number",
              "default": 6,
              "markdownDescription": "**int**: Total number of channels of the whole chain. Must be in range from 3 to 1020. Defaults to 6.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "num_chips": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**int**: Number of chips in the chain. Must be in range from 1 to 255. Defaults to 2.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "bit_depth": {
              "enum": [8, 12, 14, 16],
              "markdownDescription": "**int**: The bit depth to use for all output channels in this chain. Must be one of 8, 12, 14 or 16. Defaults to 16.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "output-custom-binary-outputs": {
      "allOf": [
        { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "output::BinaryOutput" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-custom-binary": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "custom::CustomBinaryOutputConstructor"
        },
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the output(s).\n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
        },
        "outputs": {
          "anyOf": [
            { "$ref": "#/definitions/output-custom-binary-outputs" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/output-custom-binary-outputs" }
            }
          ],
          "markdownDescription": "**list**: A list of outputs to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Output](https://esphome.io/components/output/index.html#config-output).\n  \n  \n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
        }
      },
      "type": ["object", "null"]
    },
    "output-custom-float-outputs": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "output::FloatOutput" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-custom-float": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "custom::CustomFloatOutputConstructor"
        },
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the output(s).\n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
        },
        "outputs": {
          "anyOf": [
            { "$ref": "#/definitions/output-custom-float-outputs" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/output-custom-float-outputs" }
            }
          ],
          "markdownDescription": "**list**: A list of outputs to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Output](https://esphome.io/components/output/index.html#config-output).\n  \n  \n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
        }
      },
      "type": ["object", "null"]
    },
    "output-template-binary": {
      "allOf": [
        { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "template_::TemplateBinaryOutput",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
            },
            "write_action": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the state of the output is updated.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-template-float": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "template_::TemplateFloatOutput",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
            },
            "write_action": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the state of the output is updated.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "pca9685": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "pca9685::PCA9685Output",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this pca9685 component. Use this if you have multiple PCA9685s connected at the same time\n\n\n\n*See also: [pca9685 Component/Hub](https://esphome.io/components/output/pca9685.html#configuration-variables)*"
            },
            "frequency": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**float**: The frequency to let the component drive all PWM outputs at. Must be in range from 24Hz to 1526Hz.\n\n\n\n*See also: [pca9685 Component/Hub](https://esphome.io/components/output/pca9685.html#configuration-variables)*"
            },
            "address": {
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x00`.\n\n\n\n*See also: [pca9685 Component/Hub](https://esphome.io/components/output/pca9685.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "pcf8574": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "pcf8574::PCF8574Component",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this PCF8574 component.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#configuration-variables)*"
            },
            "pcf8575": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Whether this is a 16-pin PCF8575. Defaults to `False`.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#configuration-variables)*"
            },
            "address": {
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x21`.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "pn532": { "type": ["null", "object", "string", "array", "number"] },
    "pn532_i2c-on_tag": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "pn532::PN532OnTagTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "pn532_i2c-on_finished_write": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "pn532::PN532OnFinishedWriteTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "power_supply": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "power_supply::PowerSupply",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the power supply so that it can be used by the outputs.\n\n\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#configuration-variables)*"
            },
            "pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The GPIO pin to control the power supply on.\n\n\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#configuration-variables)*"
            },
            "enable_time": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "20ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time to that the power supply needs for startup. The output component will wait for this period of time after turning on the PSU and before switching the output on. Defaults to `20ms`.\n\n\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#configuration-variables)*"
            },
            "keep_on_time": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "10s",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time the power supply should be kept enabled after the last output that used it has been switch off. Defaults to `10s`.\n\n\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "rc522_i2c-on_tag": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "rc522::RC522Trigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "rc522_i2c": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rc522::RC522",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "reset_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to the RST line. Some tests shows the RC522 working okay without this.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "on_tag": {
              "$ref": "#/definitions/rc522_i2c-on_tag",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [on_tag Action](https://esphome.io/components/binary_sensor/rc522.html#rc522-on-tag).\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "address": {
              "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x28`.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "i2c_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [I\u00b2C Component](https://esphome.io/components/i2c.html#i2c) if you want to use multiple I\u00b2C buses.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each scan on the RC522. This affects the duration that the individual binary sensors stay active when they\u2019re found. If a device is not found within this time window, it will be marked as not present. Defaults to `1s`.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "rc522_spi": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rc522::RC522",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "reset_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to the RST line. Some tests shows the RC522 working okay without this.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "on_tag": {
              "$ref": "#/definitions/rc522_i2c-on_tag",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [on_tag Action](https://esphome.io/components/binary_sensor/rc522.html#rc522-on-tag).\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that the chip select line is connected to.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "spi_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each scan on the RC522. This affects the duration that the individual binary sensors stay active when they\u2019re found. If a device is not found within this time window, it will be marked as not present. Defaults to `1s`.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "rdm6300-on_tag": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "rdm6300::RDM6300Trigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_jvc": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::JVCTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_lg": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::LGTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_nec": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::NECTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_pioneer": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::PioneerTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_sony": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::SonyTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_raw": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::RawTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_rc5": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::RC5Trigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_rc_switch": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::RCSwitchTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_samsung": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::SamsungTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_samsung36": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::Samsung36Trigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver-on_panasonic": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "remote_base::PanasonicTrigger"
            },
            "receiver_id": {
              "type": "string",
              "id_type": "remote_base::RemoteReceiverBase"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "remote_receiver": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "remote_receiver::RemoteReceiverComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation. Use this if you have multiple remote receivers.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to receive the remote signal on.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "dump": {
              "type": "array",
              "default": [],
              "markdownDescription": "**list**: Decode and dump these remote codes in the logs (at log.level=DEBUG). Set to `all` to dump all available codecs:\n  * **lg**: Decode and dump LG infrared codes.\n  \n  * **nec**: Decode and dump NEC infrared codes.\n  \n  * **panasonic**: Decode and dump Panasonic infrared codes.\n  \n  * **pioneer**: Decode and dump Pioneer infrared codes.\n  \n  * **jvc**: Decode and dump JVC infrared codes.\n  \n  * **samsung**: Decode and dump Samsung infrared codes.\n  \n  * **samsung36**: Decode and dump Samsung36 infrared codes.\n  \n  * **sony**: Decode and dump Sony infrared codes.\n  \n  * **rc_switch**: Decode and dump RCSwitch RF codes.\n  \n  * **rc5**: Decode and dump RC5 IR codes.\n  \n  * **raw**: Print all remote codes in their raw form. Useful for using arbitrary protocols.\n  \n  \n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "tolerance": {
              "type": "string",
              "default": "25",
              "markdownDescription": "**int**: The percentage that the remote signal lengths can deviate in the decoding process. Defaults to `25%`.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "buffer_size": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int**: The size of the internal buffer for storing the remote codes. Defaults to `10kB` on the ESP32 and `1kB` on the ESP8266.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "filter": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "50us",
              "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: Filter any pulses that are shorter than this. Useful for removing glitches from noisy signals. Defaults to `10us`.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "idle": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "10ms",
              "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time that a signal should remain stable (i.e. not change) for it to be considered complete. Defaults to `10ms`.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "memory_blocks": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 3,
              "markdownDescription": "**int**: The number of RMT memory blocks used. Only used on ESP32 platform. Defaults to `3`.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_jvc": {
              "$ref": "#/definitions/remote_receiver-on_jvc",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a JVC remote code has been decoded. A variable `x` of type [remote_base::JVCData](https://esphome.io/api/classesphome_1_1remote__base_1_1_j_v_c_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_lg": {
              "$ref": "#/definitions/remote_receiver-on_lg",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a LG remote code has been decoded. A variable `x` of type [remote_base::LGData](https://esphome.io/api/classesphome_1_1remote__base_1_1_l_g_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_nec": {
              "$ref": "#/definitions/remote_receiver-on_nec",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a NEC remote code has been decoded. A variable `x` of type [remote_base::NECData](https://esphome.io/api/classesphome_1_1remote__base_1_1_n_e_c_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_pioneer": {
              "$ref": "#/definitions/remote_receiver-on_pioneer",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a pioneer remote code has been decoded. A variable `x` of type [remote_base::PioneerData](https://esphome.io/api/classesphome_1_1remote__base_1_1_pioneer_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_sony": {
              "$ref": "#/definitions/remote_receiver-on_sony",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Sony remote code has been decoded. A variable `x` of type [remote_base::SonyData](https://esphome.io/api/classesphome_1_1remote__base_1_1_sony_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_raw": {
              "$ref": "#/definitions/remote_receiver-on_raw",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a raw remote code has been decoded. A variable `x` of type `std::vector<int>` is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_rc5": {
              "$ref": "#/definitions/remote_receiver-on_rc5",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a RC5 remote code has been decoded. A variable `x` of type [remote_base::RC5Data](https://esphome.io/api/classesphome_1_1remote__base_1_1_r_c5_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_rc_switch": {
              "$ref": "#/definitions/remote_receiver-on_rc_switch",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a RCSwitch RF code has been decoded. A variable `x` of type [remote_base::RCSwitchData](https://esphome.io/api/classesphome_1_1remote__base_1_1_r_c_switch_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_samsung": {
              "$ref": "#/definitions/remote_receiver-on_samsung",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Samsung remote code has been decoded. A variable `x` of type [remote_base::SamsungData](https://esphome.io/api/classesphome_1_1remote__base_1_1_samsung_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_samsung36": {
              "$ref": "#/definitions/remote_receiver-on_samsung36",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Samsung36 remote code has been decoded. A variable `x` of type [remote_base::Samsung36Data](https://esphome.io/api/classesphome_1_1remote__base_1_1_samsung36_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_panasonic": {
              "$ref": "#/definitions/remote_receiver-on_panasonic",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Panasonic remote code has been decoded. A variable `x` of type [remote_base::PanasonicData](https://esphome.io/api/classesphome_1_1remote__base_1_1_panasonic_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "remote_transmitter": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "remote_transmitter::RemoteTransmitterComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation. Use this if you have multiple remote transmitters.\n\n\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#configuration-variables)*"
            },
            "pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to transmit the remote signal on.\n\n\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#configuration-variables)*"
            },
            "carrier_duty_percent": {
              "type": "string",
              "markdownDescription": "**int**: How much of the time the remote is on. For example, infrared protocols modulate the signal using a carrier signal. Set this is `50%` if you\u2019re working with IR LEDs and to `100%` if working with other things like 433MHz transmitters.\n\n\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "rf_bridge-on_code_received": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeReceivedCodeTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "rf_bridge-on_advanced_code_received": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeReceivedAdvancedCodeTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "rtttl-on_finished_playback": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "rtttl::FinishedPlaybackTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "rtttl": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rtttl::Rtttl",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Rtttl Buzzer](https://esphome.io/components/rtttl.html#configuration-variables)*"
            },
            "output": {
              "type": "string",
              "id_type": "output::FloatOutput",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the [float output](https://esphome.io/components/output/index.html#output) to use for this buzzer.\n\n\n\n*See also: [Rtttl Buzzer](https://esphome.io/components/rtttl.html#configuration-variables)*"
            },
            "on_finished_playback": {
              "$ref": "#/definitions/rtttl-on_finished_playback",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when playback is finished.\n\n\n\n*See also: [Rtttl Buzzer](https://esphome.io/components/rtttl.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "script": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "id": {
              "type": "string",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The [ID](https://esphome.io/guides/configuration-types.html#config-id) of the script. Use this to interact with the script using the script actions.\n\n\n\n*See also: [script Component](https://esphome.io/guides/automations.html#script-component)*"
            },
            "mode": {
              "enum": ["single", "restart", "queued", "parallel"],
              "markdownDescription": "**string**: Controls what happens when a script is invoked while it is still running from one or more previous invocations. Default to `single`.\n  * `single`: Do not start a new run. Issue a warning.\n  \n  * `restart`: Start a new run after first stopping previous run.\n  \n  * `queued`: Start a new run after previous runs complete.\n  \n  * `parallel`: Start a new, independent run in parallel with previous runs.\n  \n  \n\n\n\n*See also: [script Component](https://esphome.io/guides/automations.html#script-component)*"
            },
            "max_runs": {
              "type": "number",
              "markdownDescription": "**integer**: Allows limiting the maxiumun number of runs when using script modes `queued` and `parallel`, use value `0` for unlimited runs. Defaults to `0`.\n\n\n\n*See also: [script Component](https://esphome.io/guides/automations.html#script-component)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ],
              "markdownDescription": "**[Actions](https://esphome.io/guides/automations.html#config-action)**: The action to perform.\n\n\n\n*See also: [script Component](https://esphome.io/guides/automations.html#script-component)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-atm90e32-phase_a": {
      "properties": {
        "voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the voltage value of this phase in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value of this phase in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the power value on this phase in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "reactive_power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the reactive power value on this phase. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "power_factor": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the power factor value on this phase. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "forward_active_energy": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the forward active energy value on this phase in watt-hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "reverse_active_energy": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the reverse active energy value on this phase in watt-hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "gain_voltage": {
          "type": "number",
          "default": 7305,
          "markdownDescription": "**int**: Voltage gain to scale the low voltage AC power pack to household mains feed. Defaults to `7305`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "gain_ct": {
          "type": "number",
          "default": 27961,
          "markdownDescription": "**int**: CT clamp calibration for this phase. Defaults to `27961`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-binary_sensor_map-group-channels": {
      "properties": {
        "binary_sensor": {
          "type": "string",
          "id_type": "binary_sensor::BinarySensor"
        },
        "value": { "type": "number" }
      },
      "type": ["object", "null"]
    },
    "sensor-binary_sensor_map-group": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "binary_sensor_map::BinarySensorMap"
            },
            "channels": {
              "anyOf": [
                {
                  "$ref": "#/definitions/sensor-binary_sensor_map-group-channels"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sensor-binary_sensor_map-group-channels"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-ble_client-on_notify": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "ble_client::BLESensorNotifyTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme280-temperature": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme280-pressure": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the pressure sensor.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme280-humidity": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the humidity sensor.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680-temperature": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680-pressure": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the pressure sensor.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680-humidity": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the humidity sensor.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bmp280-temperature": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bmp280-pressure": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the pressure sensor.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-hm3301-aqi": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "calculation_type": {
              "enum": ["CAQI", "AQI"],
              "markdownDescription": "One of: `AQI` or `CAQI`.\n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-ina3221-channel_1": {
      "properties": {
        "bus_voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the bus voltage (voltage of the high side contact) value on this channel in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        },
        "shunt_voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the shunt voltage (voltage across the shunt resistor) value on this channel in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value on this channel in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        },
        "power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the power value on this channel in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        },
        "shunt_resistance": {
          "type": ["null", "object", "string", "array", "number"],
          "default": 0.1,
          "markdownDescription": "**float**: The value of the shunt resistor on this channel for current calculation. Defaults to `0.1 ohm`.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-rotary_encoder-on_clockwise": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "rotary_encoder::RotaryEncoderClockwiseTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-rotary_encoder-on_anticlockwise": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "rotary_encoder::RotaryEncoderAnticlockwiseTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-sgp30-baseline": {
      "properties": {
        "eco2_baseline": {
          "type": "string",
          "markdownDescription": "**int**: The eCO2 baseline for calibration purposes.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
        },
        "tvoc_baseline": {
          "type": "string",
          "markdownDescription": "**int**: The TVOC baseline for calibration purposes.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-sgp30-compensation": {
      "properties": {
        "humidity_source": {
          "type": "string",
          "id_type": "sensor::Sensor",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Give an external humidity sensor ID here. This can improve the sensor\u2019s internal calculations. Defaults to `50`\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
        },
        "temperature_source": {
          "type": "string",
          "id_type": "sensor::Sensor",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Give an external temperature sensor ID here. This can improve the sensor\u2019s internal calculations. Defaults to `25`\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-teleinfo-tags": {
      "properties": {
        "tag_name": { "type": "string" },
        "sensor": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" }
      },
      "type": ["object", "null"]
    },
    "servo": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "servo::Servo",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of this servo so that it can be controlled.\n\n\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#configuration-variables)*"
            },
            "output": {
              "type": "string",
              "id_type": "output::FloatOutput",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the [output component](https://esphome.io/components/output/index.html) to use for this servo.\n\n\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#configuration-variables)*"
            },
            "min_level": {
              "type": "string",
              "default": "3%",
              "markdownDescription": "**percentage**: The PWM duty cycle the minimum value (-100%) will map to. Defaults to `3%`.\n\n\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#configuration-variables)*"
            },
            "idle_level": {
              "type": "string",
              "default": "7.5%",
              "markdownDescription": "**percentage**: The PWM duty cycle the idle value (0%) will map to. This is also the state of the servo at startup. Defaults to `7.5%`.\n\n\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#configuration-variables)*"
            },
            "max_level": {
              "type": "string",
              "default": "12%",
              "markdownDescription": "**percentage**: The PWM duty cycle the maximum value (100%) will map to. Defaults to `12.0%`.\n\n\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#configuration-variables)*"
            },
            "restore": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Whether to restore the state of the servo motor at startup. This is useful if you have an absolute servo motor and it goes back to its 0 position at startup. Defaults to `false`.\n\n\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#configuration-variables)*"
            },
            "auto_detach_time": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0s",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time after reaching the target value when the servo will be detached`, if set to zero, servo will not be detached. Defaults to `0s`.\n\n\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#configuration-variables)*"
            },
            "transition_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0s",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time needed for a full movement (-1.0 to 1.0). This will effectively limit the speed of the servo, the larger the value, the slowest the servo will move. Defaults to `` 0s`` This can slow down the servo to avoid loud noises or just make the movement not jerking.\n\n\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "sim800l-on_sms_received": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": {
              "type": "string",
              "id_type": "sim800l::Sim800LReceivedMessageTrigger"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sim800l": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "sim800l::Sim800LComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Sim800L Component](https://esphome.io/components/sim800l.html#configuration-variables)*"
            },
            "on_sms_received": {
              "$ref": "#/definitions/sim800l-on_sms_received",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when an SMS is received. See [on_sms_received Trigger](https://esphome.io/components/sim800l.html#sim800l-on-sms-received).\n\n\n\n*See also: [Sim800L Component](https://esphome.io/components/sim800l.html#configuration-variables)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [Sim800L Component](https://esphome.io/components/sim800l.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/uart_bus" }
      ]
    },
    "sm16716": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "sm16716::SM16716",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this `sm16716` component. Use this if you have multiple SM16716 chains connected at the same time.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            },
            "data_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for MOSI.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin which SCLK is connected to.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            },
            "num_channels": {
              "type": "number",
              "default": 3,
              "markdownDescription": "**int**: Total number of channels of the whole chain. Must be in range from 3 to 255. Defaults to 3.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            },
            "num_chips": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**int**: Number of chips in the chain. Must be in range from 1 to 85. Defaults to 1.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "sm2135": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "sm2135::SM2135",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this `sm2135` component. Use this if you have multiple SM2135 chains connected at the same time.\n\n\n\n*See also: [sm2135 Component/Hub](https://esphome.io/components/output/sm2135.html#configuration-variables)*"
            },
            "data_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for MOSI.\n\n\n\n*See also: [sm2135 Component/Hub](https://esphome.io/components/output/sm2135.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin which SCLK is connected to.\n\n\n\n*See also: [sm2135 Component/Hub](https://esphome.io/components/output/sm2135.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "sn74hc595": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "sn74hc595::SN74HC595Component",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this SN74HC595 component.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "data_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to SN74HC595 SER input.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to SN74HC595 SRCLK pin\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "latch_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to SN74HC595 RCLK pin\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "oe_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to SN74HC595 OE pin\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "sr_count": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**int**: Number of daisy-chained shift registers, up-to 4. Defaults to `1`.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "spi": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "spi::SPIComponent",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this SPI hub if you need multiple SPI hubs.\n\n\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#configuration-variables)*"
        },
        "clk_pin": {
          "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for the clock line of the SPI bus.\n\n\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#configuration-variables)*"
        },
        "miso_pin": {
          "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for the MISO line of the SPI bus.\n\n\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#configuration-variables)*"
        },
        "mosi_pin": {
          "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for the MOSI line of the SPI bus.\n\n\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sun-on_sunrise": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": { "type": "string", "id_type": "sun::SunTrigger" },
            "elevation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": -0.83333,
              "markdownDescription": "**float**: The elevation to cross. Defaults to 0\u00b0 (horizon).\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sun-on_sunset": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "trigger_id": { "type": "string", "id_type": "sun::SunTrigger" },
            "elevation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": -0.83333,
              "markdownDescription": "**float**: The elevation to cross. Defaults to 0\u00b0 (horizon).\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "switch-custom-switches": {
      "allOf": [
        { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "switch-gpio-interlock": { "type": "string", "id_type": "switch_::Switch" },
    "sx1509-keypad": {
      "properties": {
        "key_rows": {
          "type": "number",
          "markdownDescription": "**int**: The number of keypad rows to use. This enables any number of the first 7 pins. So a value of 3 enables pins 0,1,2 to be used as the rows for the keypad matrix. This value must be between 1 and 8.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        },
        "key_columns": {
          "type": "number",
          "markdownDescription": "**int**: The number of keypad columns to use. This enables any number of the last 7 pins. So a value of 4 enables pins 8,9,10,11 to be used as the columns for the keypad matrix. This value must be between 1 and 8.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        },
        "sleep_time": {
          "type": "number",
          "markdownDescription": "**int**: No key press within this time will set keypad engine to sleep.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        },
        "scan_time": {
          "type": "number",
          "markdownDescription": "**int**: Scan time per row (must be set above debounce time).\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        },
        "debounce_time": {
          "type": "number",
          "markdownDescription": "**int**: The debounce time is common to all IOs.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sx1509": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "sx1509::SX1509Component",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this SX1509 component.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
            },
            "keypad": {
              "$ref": "#/definitions/sx1509-keypad",
              "markdownDescription": "Add this to enable the keypad.\n  * **key_rows** (**Required**, int): The number of keypad rows to use. This enables any number of the first 7 pins. So a value of 3 enables pins 0,1,2 to be used as the rows for the keypad matrix. This value must be between 1 and 8.\n  \n  * **key_columns** (**Required**, int): The number of keypad columns to use. This enables any number of the last 7 pins. So a value of 4 enables pins 8,9,10,11 to be used as the columns for the keypad matrix. This value must be between 1 and 8.\n  \n  * **sleep_time** (*Optional*, int): No key press within this time will set keypad engine to sleep.\n  \n  * **scan_time** (*Optional*, int): Scan time per row (must be set above debounce time).\n  \n  * **debounce_time** (*Optional*, int): The debounce time is common to all IOs.\n  \n  \n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
            },
            "address": {
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x3E`.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "tca9548a": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "tca9548a::TCA9548AComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this TCA9548A component.\n\n\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#configuration-variables)*"
            },
            "scan": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**bool**: if the channel should be scanned Defaults to `false`\n\n\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#configuration-variables)*"
            },
            "address": {
              "markdownDescription": "**int**: The I\u00b2C address of the Multiplexer. Defaults to `0x70`.\n\n\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#configuration-variables)*"
            },
            "i2c_id": {
              "markdownDescription": "The I\u00b2C Bus ID\n\n\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "text_sensor-bme680_bsec-iaq_accuracy": {
      "allOf": [
        { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "text_sensor::TextSensor",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [bme680_bsec Text Sensor](https://esphome.io/components/sensor/bme680_bsec.html#text-sensor)*"
            },
            "icon": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "mdi:checkbox-marked-circle-outline"
            },
            "name": {
              "markdownDescription": "**string**: The name for the IAQ accuracy sensor.\n\n\n\n*See also: [bme680_bsec Text Sensor](https://esphome.io/components/sensor/bme680_bsec.html#text-sensor)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "text_sensor-custom-text_sensors": {
      "allOf": [
        { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "text_sensor::TextSensor" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "text_sensor-wifi_info-ip_address": {
      "allOf": [
        { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "wifi_info::IPAddressWiFiInfo"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "text_sensor-wifi_info-ssid": {
      "allOf": [
        { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "wifi_info::SSIDWiFiInfo" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "text_sensor-wifi_info-bssid": {
      "allOf": [
        { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "wifi_info::BSSIDWiFiInfo" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "text_sensor-wifi_info-mac_address": {
      "allOf": [
        { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "wifi_info::MacAddressWifiInfo"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "time-sntp-servers": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "tlc59208f": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "tlc59208f::TLC59208FOutput" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "ttp229_bsf": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "ttp229_bsf::TTP229BSFComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually set the ID of this component.\n\n\n\n*See also: [ttp229_bsf Component](https://esphome.io/components/binary_sensor/ttp229.html#id1)*"
            },
            "sdo_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin the SDO pin is connected to.\n\n\n\n*See also: [ttp229_bsf Component](https://esphome.io/components/binary_sensor/ttp229.html#id1)*"
            },
            "scl_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin the SCL pin is connected to.\n\n\n\n*See also: [ttp229_bsf Component](https://esphome.io/components/binary_sensor/ttp229.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "ttp229_lsf": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "ttp229_lsf::TTP229LSFComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually set the ID of this sensor.\n\n\n\n*See also: [ttp229_lsf Component](https://esphome.io/components/binary_sensor/ttp229.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ]
    },
    "uart": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "uart::UARTComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this UART hub if you need multiple UART hubs.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "baud_rate": {
              "type": "number",
              "markdownDescription": "**int**: The baud rate of the UART bus.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "tx_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to send data to from the ESP\u2019s perspective.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "rx_pin": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to receive data on from the ESP\u2019s perspective.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "rx_buffer_size": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 256,
              "markdownDescription": "**int**: The size of the buffer used for receiving UART messages. Increase if you use integration that needs to read big payloads from UART. Defaults to `256`.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "invert": {
              "type": "boolean",
              "markdownDescription": "**boolean**: Invert the logic levels of the RX and TX pins. Options: `True` or `False`. Defaults to `False`.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "stop_bits": {
              "enum": [1, 2],
              "markdownDescription": "**int**: The number of stop bits to send. Options: 1, 2. Defaults to 1.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "data_bits": {
              "type": "number",
              "default": 8,
              "markdownDescription": "**int**: The number of data bits used on the UART bus. Options: 5 to 8. Defaults to 8.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "parity": {
              "enum": ["NONE", "EVEN", "ODD"],
              "markdownDescription": "The parity used on the UART bus. Options: `NONE`, `EVEN`, `ODD`. Defaults to `NONE`.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "web_server-auth": {
      "properties": {
        "username": {
          "type": "string",
          "markdownDescription": "**string**: The username to use for authentication.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
        },
        "password": {
          "type": "string",
          "markdownDescription": "**string**: The password to check for authentication.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "wifi-networks": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "wifi::WiFiAP" },
            "ssid": {
              "type": "string",
              "markdownDescription": "**string**: The SSID or WiFi network name.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "password": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: The password to use for authentication. Leave empty for no password.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "channel": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int**: The channel of the network (1-14). If given, only connects to networks that are on this channel.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "manual_ip": { "$ref": "#/definitions/ethernet-manual_ip" },
            "bssid": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: The connection\u2019s BSSID (MAC address). BSSIDs must consist of six two-digit hexadecimal values separated by colon characters (\u201c`:`\u201d). All letters must be in upper case.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "hidden": {
              "type": "boolean",
              "markdownDescription": "**boolean**: Whether this network is hidden. Defaults to false. If you add this option you also have to specify ssid.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "priority": {
              "type": "number",
              "default": 0.0,
              "markdownDescription": "**float**: The priority of this network. After each time, the network with the highest priority is chosen. If the connection fails, the priority is decreased by one. Defaults to `0`.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "eap": {
              "properties": {
                "identity": {
                  "type": "string",
                  "markdownDescription": "**string**: The outer identity to pass to the EAP authentication server. This is required for EAP-TLS.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "username": {
                  "type": "string",
                  "markdownDescription": "**string**: The username to present to the authenticating server.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "password": {
                  "type": "string",
                  "markdownDescription": "**string**: The password to present to the authentication server. For EAP-TLS this password may be set to decrypt to private key instead.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "certificate_authority": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: Path to a PEM encoded certificate to use when validating the authentication server.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "certificate": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: Path to a PEM encoded certificate to use for EAP-TLS authentication.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "key": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: Path to a PEM encoded private key matching `certificate` for EAP-TLS authentication. Optionally encrypted with `password`.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                }
              },
              "type": ["object", "null"],
              "markdownDescription": "WPA2_EAP Enterprise Authentication is supported on ESP32s and ESP8266s. In order to configure this feature you must use the [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#wifi-networks) style configuration. The ESP32 is known to work with PEAP, EAP-TTLS, and the certificate based EAP-TLS. These are advanced settings and you will usually need to consult your enterprise network administrator.\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#enterprise-authentication)*"
            }
          },
          "type": ["object", "null"]
        }
      ],
      "markdownDescription": "Starting with version 1.10.0, you can give ESPHome a number of WiFi networks to connect to. ESPHome will then attempt to connect to the one with the highest signal strength.\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
    },
    "wifi-ap": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "wifi::WiFiAP" },
            "ssid": {
              "type": "string",
              "markdownDescription": "**string**: The name of the access point to create.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "password": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: The password for the access point. Leave empty for no password.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "channel": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int**: The channel the AP should operate on from 1 to 14. Defaults to 1.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "manual_ip": {
              "$ref": "#/definitions/ethernet-manual_ip",
              "markdownDescription": "Manually set the IP options for the AP. Same options as manual_ip for station mode.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "ap_timeout": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "1min",
              "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: The time after which to enable the configured fallback hotspot. Defaults to `1min`.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "automation.ACTION_REGISTRY-binary_sensor.template.publish": {
      "type": "object",
      "properties": {
        "binary_sensor.template.publish": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "binary_sensor::BinarySensor"
            },
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "You can also publish a state to a template binary sensor from elsewhere in your YAML file with the `binary_sensor.template.publish` action.\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#binary-sensor-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-climate.pid.reset_integral_term": {
      "type": "object",
      "properties": {
        "climate.pid.reset_integral_term": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "pid::PIDClimate",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: ID of the PID Climate being reset.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-reset-integral-term-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action resets the integral term of the PID controller to 0. This might be necessary under certain conditions to avoid the control loop to overshoot (or undershoot) a target.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-reset-integral-term-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-climate.pid.autotune": {
      "type": "object",
      "properties": {
        "climate.pid.autotune": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "pid::PIDClimate",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: ID of the PID Climate to start autotuning for.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*"
            },
            "noiseband": {
              "type": "number",
              "default": 0.25,
              "markdownDescription": "**float**: The noiseband of the process (=sensor) variable. The value of the PID controller must be able to reach this value. Defaults to `0.25`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*"
            },
            "positive_output": {
              "type": "string",
              "default": "1.0",
              "markdownDescription": "**float**: The positive output power to drive the heat output at. Defaults to `1.0`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*"
            },
            "negative_output": {
              "type": "string",
              "default": "-1.0",
              "markdownDescription": "**float**: The positive output power to drive the cool output at. Defaults to `-1.0`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action starts the autotune process of the PID controller.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-climate.pid.set_control_parameters": {
      "type": "object",
      "properties": {
        "climate.pid.set_control_parameters": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "pid::PIDClimate",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: ID of the PID Climate to start autotuning for.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*"
            },
            "kp": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**float**: The factor for the proportional term of the PID controller.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*"
            },
            "ki": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0.0,
              "markdownDescription": "**float**: The factor for the integral term of the PID controller. Defaults to `0`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*"
            },
            "kd": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0.0,
              "markdownDescription": "**float**: The factor for the derivative term of the PID controller. Defaults to `0`.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This action sets new values for the control parameters of the PID controller. This can be used to manually tune the PID controller. Make sure to take update the values you want on the YAML file! They will reset on the next reboot.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-cover.template.publish": {
      "type": "object",
      "properties": {
        "cover.template.publish": {
          "properties": {
            "id": { "type": "string", "id_type": "cover::Cover" },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "position": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "current_operation": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "tilt": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "You can also publish a state to a template cover from elsewhere in your YAML file with the `cover.template.publish` action.\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#cover-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.esp8266_pwm.set_frequency": {
      "type": "object",
      "properties": {
        "output.esp8266_pwm.set_frequency": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "esp8266_pwm::ESP8266PWM",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the PWM output to change.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#output-esp8266-pwm-set-frequency-action)*"
            },
            "frequency": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), float**: The frequency to set in hertz.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#output-esp8266-pwm-set-frequency-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the frequency of an ESP8266 PWM channel at runtime. Use cases include controlling a passive buzzer (for pitch control).\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#output-esp8266-pwm-set-frequency-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.ledc.set_frequency": {
      "type": "object",
      "properties": {
        "output.ledc.set_frequency": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "ledc::LEDCOutput",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the LEDC output to change.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#output-ledc-set-frequency-action)*"
            },
            "frequency": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), float**: The frequency to set in hertz.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#output-ledc-set-frequency-action)*"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the frequency of an LEDC channel at runtime. Use cases include controlling a passive buzzer (for pitch control).\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#output-ledc-set-frequency-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-sensor.integration.reset": {
      "type": "object",
      "properties": {
        "sensor.integration.reset": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "integration::IntegrationSensor"
            }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to reset the value of the integration sensor to zero. For example this can be used to reset the integration sensor to zero at midnight with a time-based automation.\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#sensor-integration-reset-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mhz19.abc_disable": {
      "type": "object",
      "properties": {
        "mhz19.abc_disable": {
          "properties": {
            "id": { "type": "string", "id_type": "mhz19::MHZ19Component" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) disables automatic baseline calibration on the sensor with the given ID.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mhz19-abc-disable-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mhz19.abc_enable": {
      "type": "object",
      "properties": {
        "mhz19.abc_enable": {
          "properties": {
            "id": { "type": "string", "id_type": "mhz19::MHZ19Component" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) enables automatic baseline calibration on the sensor with the given ID.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mhz19-abc-enable-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mhz19.calibrate_zero": {
      "type": "object",
      "properties": {
        "mhz19.calibrate_zero": {
          "properties": {
            "id": { "type": "string", "id_type": "mhz19::MHZ19Component" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) executes zero point calibration command on the sensor with the given ID.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mhz19-calibrate-zero-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-pulse_meter.set_total_pulses": {
      "type": "object",
      "properties": {
        "pulse_meter.set_total_pulses": {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "pulse_meter::PulseMeterSensor"
            },
            "value": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-sensor.rotary_encoder.set_value": {
      "type": "object",
      "properties": {
        "sensor.rotary_encoder.set_value": {
          "properties": {
            "id": { "type": "string", "id_type": "sensor::Sensor" },
            "value": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "The internal state of the rotary encoder can be manually changed to any value with this action. After executing this action, rotating the encoder further will increase/decrease the state relative to the newly set internal value.\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#sensor-rotary-encoder-set-value-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.abc_get_period": {
      "type": "object",
      "properties": {
        "senseair.abc_get_period": {
          "properties": {
            "id": { "type": "string", "id_type": "senseair::SenseAirComponent" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) requests the currently configured ABC interval from the sensor with the given ID. The value will be printed in ESPHome logs.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-abc-get-period-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.abc_disable": {
      "type": "object",
      "properties": {
        "senseair.abc_disable": {
          "properties": {
            "id": { "type": "string", "id_type": "senseair::SenseAirComponent" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) disables Automatic Baseline Calibration on the sensor with the given ID.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-abc-disable-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.abc_enable": {
      "type": "object",
      "properties": {
        "senseair.abc_enable": {
          "properties": {
            "id": { "type": "string", "id_type": "senseair::SenseAirComponent" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) enables Automatic Baseline Calibration on the sensor with the given ID. ABC will be activated with the default interval of 180 hours.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-abc-enable-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.background_calibration_result": {
      "type": "object",
      "properties": {
        "senseair.background_calibration_result": {
          "properties": {
            "id": { "type": "string", "id_type": "senseair::SenseAirComponent" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) requests the result of the background calibration procedure from the sensor with the given ID. The value will be printed in ESPHome logs.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-background-calibration-result-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.background_calibration": {
      "type": "object",
      "properties": {
        "senseair.background_calibration": {
          "properties": {
            "id": { "type": "string", "id_type": "senseair::SenseAirComponent" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) initiates a background calibration on the sensor with the given ID: the current CO2 level will be used as a reference for the 400ppm threshold. Ensure that the sensor is in a stable environment with fresh ambient air, preferably near a window that has already been opened for a sufficient time.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-background-calibration-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-sensor.template.publish": {
      "type": "object",
      "properties": {
        "sensor.template.publish": {
          "properties": {
            "id": { "type": "string", "id_type": "sensor::Sensor" },
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "You can also publish a state to a template sensor from elsewhere in your YAML file with the `sensor.template.publish` action.\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#sensor-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-switch.template.publish": {
      "type": "object",
      "properties": {
        "switch.template.publish": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" },
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "You can also publish a state to a template switch from elsewhere in your YAML file with the `switch.template.publish` action.\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#switch-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-text_sensor.template.publish": {
      "type": "object",
      "properties": {
        "text_sensor.template.publish": {
          "properties": {
            "id": { "type": "string", "id_type": "text_sensor::TextSensor" },
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "You can also publish a state to a template text sensor from elsewhere in your YAML file with the `text_sensor.template.publish` action.\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#text-sensor-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-ds1307.write_time": {
      "type": "object",
      "properties": {
        "ds1307.write_time": {
          "properties": {
            "id": { "type": "string", "id_type": "ds1307::DS1307Component" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) triggers a synchronization of the current system time to the RTC hardware.\n\n*See also: [DS1307 Time Source](https://esphome.io/components/time.html#ds1307-write-time-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-ds1307.read_time": {
      "type": "object",
      "properties": {
        "ds1307.read_time": {
          "properties": {
            "id": { "type": "string", "id_type": "ds1307::DS1307Component" }
          },
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) triggers a synchronization of the current system time from the RTC hardware.\n\n*See also: [DS1307 Time Source](https://esphome.io/components/time.html#ds1307-read-time-action)*"
        }
      }
    },
    "PIN.INPUT_INTERNAL": {
      "properties": {
        "number": {
          "$ref": "#/definitions/PIN.INPUT_INTERNAL",
          "markdownDescription": "**pin**: The pin number.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        },
        "mode": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "INPUT",
          "markdownDescription": "**string**: A pin mode to set for the pin at startup, corresponds to Arduino\u2019s `pinMode` call.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        },
        "inverted": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        }
      },
      "type": ["object", "null"],
      "additionalItems": false
    },
    "PIN.INPUT_mcp23xxx": {
      "properties": {
        "mcp23xxx": {
          "type": "string",
          "id_type": "mcp23xxx_base::MCP23XXXBase",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the MCP23017 component.\n\n\n\n*See also: [MCP23017 Component](https://esphome.io/components/mcp230xx.html#id4)*"
        },
        "number": {
          "type": "number",
          "markdownDescription": "**integer**: The pin number.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#pin-configuration-variables)*"
        },
        "mode": {
          "enum": ["INPUT", "INPUT_PULLUP", "OUTPUT"],
          "markdownDescription": "**string**: A pin mode to set for the pin at. One of `INPUT` or `OUTPUT`.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#pin-configuration-variables)*"
        },
        "inverted": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#pin-configuration-variables)*"
        },
        "interrupt": {
          "enum": ["NO_INTERRUPT", "CHANGE", "RISING", "FALLING"],
          "markdownDescription": "Set this pin to trigger the port INT pin on the component. Can be one of `CHANGE`, `RISING`, `FALLING`.\n\n\n\n*See also: [MCP23017 Component](https://esphome.io/components/mcp230xx.html#id4)*"
        }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_mcp23008": {
      "properties": {
        "number": { "type": "number" },
        "mode": { "enum": ["INPUT", "INPUT_PULLUP", "OUTPUT"] },
        "inverted": { "type": "boolean", "default": false },
        "interrupt": { "enum": ["NO_INTERRUPT", "CHANGE", "RISING", "FALLING"] }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_mcp23s08": {
      "properties": {
        "number": { "type": "number" },
        "mode": { "enum": ["INPUT", "INPUT_PULLUP", "OUTPUT"] },
        "inverted": { "type": "boolean", "default": false },
        "interrupt": { "enum": ["NO_INTERRUPT", "CHANGE", "RISING", "FALLING"] }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_mcp23017": {
      "properties": {
        "number": { "type": "number" },
        "mode": { "enum": ["INPUT", "INPUT_PULLUP", "OUTPUT"] },
        "inverted": { "type": "boolean", "default": false },
        "interrupt": { "enum": ["NO_INTERRUPT", "CHANGE", "RISING", "FALLING"] }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_mcp23s17": {
      "properties": {
        "number": { "type": "number" },
        "mode": { "enum": ["INPUT", "INPUT_PULLUP", "OUTPUT"] },
        "inverted": { "type": "boolean", "default": false },
        "interrupt": { "enum": ["NO_INTERRUPT", "CHANGE", "RISING", "FALLING"] }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_mcp23016": {
      "properties": {
        "mcp23016": { "type": "string", "id_type": "mcp23016::MCP23016" },
        "number": { "type": "number" },
        "mode": { "enum": ["INPUT", "OUTPUT"] },
        "inverted": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_pcf8574": {
      "properties": {
        "pcf8574": {
          "type": "string",
          "id_type": "pcf8574::PCF8574Component",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the PCF8574 component of the pin.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#pin-configuration-variables)*"
        },
        "number": {
          "type": "number",
          "markdownDescription": "**integer**: The pin number.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#pin-configuration-variables)*"
        },
        "mode": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "INPUT",
          "markdownDescription": "**string**: A pin mode to set for the pin at. One of `INPUT` or `OUTPUT`.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#pin-configuration-variables)*"
        },
        "inverted": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#pin-configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_sn74hc595": {},
    "PIN.INPUT_sx1509": {
      "properties": {
        "sx1509": {
          "type": "string",
          "id_type": "sx1509::SX1509Component",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the SX1509 component of the pin.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#pin-configuration-variables)*"
        },
        "number": {
          "type": "number",
          "markdownDescription": "**integer**: The pin number.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#pin-configuration-variables)*"
        },
        "mode": {
          "enum": ["INPUT", "INPUT_PULLUP", "OUTPUT"],
          "markdownDescription": "**string**: A pin mode to set for the pin at. One of `INPUT`, `INPUT_PULLUP` or `OUTPUT`.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#pin-configuration-variables)*"
        },
        "inverted": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#pin-configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "PIN.OUTPUT_INTERNAL": {
      "properties": {
        "number": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**pin**: The pin number.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        },
        "mode": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "OUTPUT",
          "markdownDescription": "**string**: A pin mode to set for the pin at startup, corresponds to Arduino\u2019s `pinMode` call.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        },
        "inverted": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        }
      },
      "type": ["object", "null"],
      "additionalItems": false
    },
    "PIN.OUTPUT_mcp23xxx": {
      "properties": {
        "mcp23xxx": {
          "type": "string",
          "id_type": "mcp23xxx_base::MCP23XXXBase",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the MCP23017 component.\n\n\n\n*See also: [MCP23017 Component](https://esphome.io/components/mcp230xx.html#id4)*"
        },
        "number": {
          "type": "number",
          "markdownDescription": "**integer**: The pin number.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#pin-configuration-variables)*"
        },
        "mode": {
          "enum": ["INPUT", "INPUT_PULLUP", "OUTPUT"],
          "markdownDescription": "**string**: A pin mode to set for the pin at. One of `INPUT` or `OUTPUT`.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#pin-configuration-variables)*"
        },
        "inverted": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#pin-configuration-variables)*"
        },
        "interrupt": {
          "enum": ["NO_INTERRUPT", "CHANGE", "RISING", "FALLING"],
          "markdownDescription": "Set this pin to trigger the port INT pin on the component. Can be one of `CHANGE`, `RISING`, `FALLING`.\n\n\n\n*See also: [MCP23017 Component](https://esphome.io/components/mcp230xx.html#id4)*"
        }
      },
      "type": ["object", "null"]
    },
    "PIN.OUTPUT_mcp23016": {
      "properties": {
        "mcp23016": { "type": "string", "id_type": "mcp23016::MCP23016" },
        "number": { "type": "number" },
        "mode": { "enum": ["INPUT", "OUTPUT"] },
        "inverted": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"]
    },
    "PIN.OUTPUT_sn74hc595": {
      "properties": {
        "sn74hc595": {
          "type": "string",
          "id_type": "sn74hc595::SN74HC595Component",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the SN74HC595 component of the pin.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#pin-configuration-variables)*"
        },
        "number": {
          "type": "number",
          "markdownDescription": "**integer**: The pin number.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#pin-configuration-variables)*"
        },
        "inverted": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If all written values should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#pin-configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "PIN.OUTPUT_sx1509": {
      "properties": {
        "sx1509": {
          "type": "string",
          "id_type": "sx1509::SX1509Component",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the SX1509 component of the pin.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#pin-configuration-variables)*"
        },
        "number": {
          "type": "number",
          "markdownDescription": "**integer**: The pin number.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#pin-configuration-variables)*"
        },
        "mode": {
          "enum": ["INPUT", "INPUT_PULLUP", "OUTPUT"],
          "markdownDescription": "**string**: A pin mode to set for the pin at. One of `INPUT`, `INPUT_PULLUP` or `OUTPUT`.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#pin-configuration-variables)*"
        },
        "inverted": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `False`.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#pin-configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    }
  },
  "properties": {
    "esphome": {
      "$ref": "#/definitions/esphome",
      "markdownDescription": "Here you specify some core information that ESPHome needs to create firmwares. Most importantly, this is the section of the configuration where you specify the **name** of the node, the **platform** and **board** you\u2019re using.\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#esphome-core-configuration)*"
    },
    "binary_sensor": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "apds9960" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "direction": {
                      "enum": ["UP", "DOWN", "LEFT", "RIGHT"],
                      "markdownDescription": "**string**: The direction to measure. One of:\n  * **UP**\n  \n  * **DOWN**\n  \n  * **LEFT**\n  \n  * **RIGHT**\n  \n  \n\n\n\n*See also: [apds9960 Binary Sensor](https://esphome.io/components/sensor/apds9960.html#binary-sensor)*"
                    },
                    "apds9960_id": {
                      "type": "string",
                      "id_type": "apds9960::APDS9960"
                    },
                    "device_class": {
                      "enum": [
                        "",
                        "battery",
                        "battery_charging",
                        "cold",
                        "connectivity",
                        "door",
                        "garage_door",
                        "gas",
                        "heat",
                        "light",
                        "lock",
                        "moisture",
                        "motion",
                        "moving",
                        "occupancy",
                        "opening",
                        "plug",
                        "power",
                        "presence",
                        "problem",
                        "safety",
                        "smoke",
                        "sound",
                        "vibration",
                        "window"
                      ]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the binary sensor.\n\n\n\n*See also: [apds9960 Binary Sensor](https://esphome.io/components/sensor/apds9960.html#binary-sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [apds9960 Binary Sensor](https://esphome.io/components/sensor/apds9960.html#binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `apds9960` binary sensor allows you to use your [APDS9960 Sensor to perform different measurements.\n\n*See also: [apds9960 Binary Sensor](https://esphome.io/components/sensor/apds9960.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "as3935" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "as3935_id": {
                      "type": "string",
                      "id_type": "as3935::AS3935Component"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [as3935 Binary Sensor](https://esphome.io/components/sensor/as3935.html#binary-sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [as3935 Binary Sensor](https://esphome.io/components/sensor/as3935.html#binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "Binary sensor that indicates if a lightning strike was detected.\n\n*See also: [as3935 Binary Sensor](https://esphome.io/components/sensor/as3935.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ble_presence" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ble_presence::BLEPresenceDevice",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address to track for this binary sensor. Either this or `service_uuid` has to be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "service_uuid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: 16 bit, 32 bit, or 128 bit BLE Service UUID which can be tracked if the device randomizes the MAC address. Either this or `mac_address` has to be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_presence` binary sensor platform lets you track the presence of a Bluetooth Low Energy device.\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#esp32-bluetooth-low-energy-device)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "custom::CustomBinarySensorConstructor"
                },
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the binary sensor(s).\n\n\n\n*See also: [Custom Binary Sensor](https://esphome.io/components/binary_sensor/custom.html#custom-binary-sensor)*"
                },
                "binary_sensors": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of binary sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Binary Sensor](https://esphome.io/components/binary_sensor/index.html#config-binary-sensor).\n  \n  \n\n\n\n*See also: [Custom Binary Sensor](https://esphome.io/components/binary_sensor/custom.html#custom-binary-sensor)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "This integration can be used to create custom binary sensors in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Binary Sensor](https://esphome.io/components/binary_sensor/custom.html#custom-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "esp32_touch" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "esp32_touch::ESP32TouchBinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    },
                    "esp32_touch_id": {
                      "type": "string",
                      "id_type": "esp32_touch::ESP32TouchComponent"
                    },
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to detect touch events on.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    },
                    "threshold": {
                      "type": "number",
                      "markdownDescription": "**int**: The threshold to use to detect touch events. Smaller values mean a higher probability that the pad is being touched.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `esp32_touch` binary sensor platform lets you use the touch peripheral of the ESP32 to detect if a certain pin is being \u201ctouched\u201d.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#binary-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "fingerprint_grow" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "fingerprint_grow_id": {
                      "type": "string",
                      "id_type": "fingerprint_grow::FingerprintGrowComponent"
                    },
                    "icon": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "mdi:key-plus"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the enrolling binary sensor.\n\n\n\n*See also: [fingerprint_grow Binary Sensor](https://esphome.io/components/fingerprint_grow.html#binary-sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [fingerprint_grow Binary Sensor](https://esphome.io/components/fingerprint_grow.html#binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [fingerprint_grow Binary Sensor](https://esphome.io/components/fingerprint_grow.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "gpio" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "gpio::GPIOBinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [GPIO Binary Sensor](https://esphome.io/components/binary_sensor/gpio.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to periodically check.\n\n\n\n*See also: [GPIO Binary Sensor](https://esphome.io/components/binary_sensor/gpio.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [GPIO Binary Sensor](https://esphome.io/components/binary_sensor/gpio.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The GPIO Binary Sensor platform allows you to use any input pin on your device as a binary sensor.\n\n*See also: [GPIO Binary Sensor](https://esphome.io/components/binary_sensor/gpio.html#gpio-binary-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "homeassistant" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "homeassistant::HomeassistantBinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "entity_id": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The entity ID to import from Home Assistant.\n\n\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "attribute": { "type": "string" },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `homeassistant` binary sensor platform allows you to create binary sensors that **import** states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html).\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#home-assistant-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mpr121" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "mpr121::MPR121Channel",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
                    },
                    "mpr121_id": {
                      "type": "string",
                      "id_type": "mpr121::MPR121Component",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the MPR121 defined above. Useful for multiple MPR121\u2019s on the I\u00b2C bus\n\n\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**integer**: The channel number at the MPR121 the touchkey is connected to.\n\n\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
                    },
                    "touch_threshold": {
                      "type": "number",
                      "markdownDescription": "**integer**: A per-channel override of the global touch_threshold value. If not specified, uses the global value.\n\n\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
                    },
                    "release_threshold": {
                      "type": "number",
                      "markdownDescription": "**integer**: A per-channel override of the global release_threshold value. If not specified, uses the global value.\n\n\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the binary sensor.\n\n\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `mpr121` binary sensor allows you to use your MPR121 with ESPHome. First, setup a [Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#mpr121-component) and then use this binary sensor platform to create individual binary sensors for each touch sensor.\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "nextion" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "nextion::NextionTouchComponent"
                    },
                    "nextion_id": {
                      "type": "string",
                      "id_type": "nextion::Nextion",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the Nextion display.\n\n\n\n*See also: [Nextion Touch Component](https://esphome.io/components/binary_sensor/nextion.html#configuration-variables)*"
                    },
                    "page_id": {
                      "type": "number",
                      "markdownDescription": "**int**: The ID of the page the component is on. Use `0` for the default page.\n\n\n\n*See also: [Nextion Touch Component](https://esphome.io/components/binary_sensor/nextion.html#configuration-variables)*"
                    },
                    "component_id": {
                      "type": "number",
                      "markdownDescription": "**int**: The ID (the number, not name!) of the component to track.\n\n\n\n*See also: [Nextion Touch Component](https://esphome.io/components/binary_sensor/nextion.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [Nextion Touch Component](https://esphome.io/components/binary_sensor/nextion.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `nextion` binary sensor platform lets you track when a component on the display is touched or not. The binary sensor will turn on when the component with the given component and page id is pressed on, and will turn off as soon as the finger is released.\n\n*See also: [Nextion Touch Component](https://esphome.io/components/binary_sensor/nextion.html#nextion-touch-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pn532" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "pn532::PN532BinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [pn532 Binary Sensor](https://esphome.io/components/binary_sensor/pn532.html#id2)*"
                    },
                    "pn532_id": { "type": "string", "id_type": "pn532::PN532" },
                    "uid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The unique ID of the NFC/RFID tag. This is a hyphen-separated list of hexadecimal values. For example `74-10-37-94`.\n\n\n\n*See also: [pn532 Binary Sensor](https://esphome.io/components/binary_sensor/pn532.html#id2)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [pn532 Binary Sensor](https://esphome.io/components/binary_sensor/pn532.html#id2)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `pn532` binary sensor platform lets you track if an NFC/RFID tag with a given unique id (`uid`) is currently being detected by the PN532 or not.\n\n*See also: [pn532 Binary Sensor](https://esphome.io/components/binary_sensor/pn532.html#pn532-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rc522" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "rc522::RC522BinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [rc522 Binary Sensor](https://esphome.io/components/binary_sensor/rc522.html#id2)*"
                    },
                    "rc522_id": { "type": "string", "id_type": "rc522::RC522" },
                    "uid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The unique ID of the RFID tag. This is a hyphen-separated list of hexadecimal values. For example `74-10-37-94`.\n\n\n\n*See also: [rc522 Binary Sensor](https://esphome.io/components/binary_sensor/rc522.html#id2)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [rc522 Binary Sensor](https://esphome.io/components/binary_sensor/rc522.html#id2)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `rc522` binary sensor platform lets you track if an RFID tag with a given unique id (`uid`) is currently being detected by the RC522 or not.\n\n*See also: [rc522 Binary Sensor](https://esphome.io/components/binary_sensor/rc522.html#rc522-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rc522_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "rc522::RC522BinarySensor"
                    },
                    "rc522_id": { "type": "string", "id_type": "rc522::RC522" },
                    "uid": {
                      "type": ["null", "object", "string", "array", "number"]
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "rdm6300" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "rdm6300::RDM6300BinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [rdm6300 Binary Sensor](https://esphome.io/components/binary_sensor/rdm6300.html#id1)*"
                    },
                    "rdm6300_id": {
                      "type": "string",
                      "id_type": "rdm6300::RDM6300Component"
                    },
                    "uid": {
                      "type": "number",
                      "markdownDescription": "**integer**: The unique ID of the NFC/RFID tag.\n\n\n\n*See also: [rdm6300 Binary Sensor](https://esphome.io/components/binary_sensor/rdm6300.html#id1)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [rdm6300 Binary Sensor](https://esphome.io/components/binary_sensor/rdm6300.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `rdm6300` binary sensor platform lets you track if an NFC/RFID tag with a given unique id (`uid`) is currently being detected by the RDM6300 or not.\n\n*See also: [rdm6300 Binary Sensor](https://esphome.io/components/binary_sensor/rdm6300.html#rdm6300-binary-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "remote_receiver" } }
            },
            "then": {
              "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY"
            },
            "markdownDescription": "The `remote_receiver` binary sensor lets you track when a button on a remote control is pressed.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "status" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The Status Binary Sensor exposes the node state (if it\u2019s connected to via MQTT/native API) for Home Assistant.\n\n*See also: [Status Binary Sensor](https://esphome.io/components/binary_sensor/status.html#status-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sx1509" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sx1509::SX1509BinarySensor"
                    },
                    "sx1509_id": {
                      "type": "string",
                      "id_type": "sx1509::SX1509Component"
                    },
                    "row": {
                      "type": "number",
                      "markdownDescription": "**int**: The row number for this key on the keypad.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#id1)*"
                    },
                    "col": {
                      "type": "number",
                      "markdownDescription": "**int**: The column number for this key on the keypad.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "To use the individual keys on the keypad you need to add individual binary_sensor entries in the config.\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "template_::TemplateBinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#configuration-variables)*"
                    },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated repeatedly to get the current state of the binary sensor.\n\n\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `template` binary sensor platform allows you to define any [lambda template](https://esphome.io/guides/automations.html#config-lambda) and construct a binary sensor out if it.\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#template-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ttp229_bsf" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ttp229_bsf::TTP229BSFChannel",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ttp229_bsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-bsf-binary-sensor)*"
                    },
                    "ttp229_id": {
                      "type": "string",
                      "id_type": "ttp229_bsf::TTP229BSFComponent"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**integer**: The channel number at the TTP229 the touchkey is connected to.\n\n\n\n*See also: [ttp229_bsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-bsf-binary-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [ttp229_bsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-bsf-binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [ttp229_bsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-bsf-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ttp229_lsf" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ttp229_lsf::TTP229Channel",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ttp229_lsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-lsf-binary-sensor)*"
                    },
                    "ttp229_id": {
                      "type": "string",
                      "id_type": "ttp229_lsf::TTP229LSFComponent"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**integer**: The channel number at the TTP229 the touchkey is connected to.\n\n\n\n*See also: [ttp229_lsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-lsf-binary-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [ttp229_lsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-lsf-binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [ttp229_lsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-lsf-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tuya::TuyaBinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Binary Sensor](https://esphome.io/components/binary_sensor/tuya.html#configuration-variables)*"
                    },
                    "tuya_id": { "type": "string", "id_type": "tuya::Tuya" },
                    "sensor_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the binary sensor.\n\n\n\n*See also: [Tuya Binary Sensor](https://esphome.io/components/binary_sensor/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [Tuya Binary Sensor](https://esphome.io/components/binary_sensor/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` binary sensor platform creates a binary sensor from a tuya component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Binary Sensor](https://esphome.io/components/binary_sensor/tuya.html#tuya-binary-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_mjyd02yla" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_mjyd02yla::XiaomiMJYD02YLA"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "device_class": {
                      "enum": [
                        "",
                        "battery",
                        "battery_charging",
                        "cold",
                        "connectivity",
                        "door",
                        "garage_door",
                        "gas",
                        "heat",
                        "light",
                        "lock",
                        "moisture",
                        "motion",
                        "moving",
                        "occupancy",
                        "opening",
                        "plug",
                        "power",
                        "presence",
                        "problem",
                        "safety",
                        "smoke",
                        "sound",
                        "vibration",
                        "window"
                      ]
                    },
                    "idle_time": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "light": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_mue4094rt" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_mue4094rt::XiaomiMUE4094RT"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "device_class": {
                      "enum": [
                        "",
                        "battery",
                        "battery_charging",
                        "cold",
                        "connectivity",
                        "door",
                        "garage_door",
                        "gas",
                        "heat",
                        "light",
                        "lock",
                        "moisture",
                        "motion",
                        "moving",
                        "occupancy",
                        "opening",
                        "plug",
                        "power",
                        "presence",
                        "problem",
                        "safety",
                        "smoke",
                        "sound",
                        "vibration",
                        "window"
                      ]
                    },
                    "timeout": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "5s"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_wx08zm" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_wx08zm::XiaomiWX08ZM"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "tablet": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          }
        ]
      },
      "markdownDescription": "With ESPHome you can use different types of binary sensors. They will automatically appear in the Home Assistant front-end and have several configuration options.\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#binary-sensor-component)*"
    },
    "canbus": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/canbus.CANBUS_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "mcp2515" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/canbus.CANBUS_SCHEMA" },
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "mcp2515::MCP2515" },
                    "clock": {
                      "enum": ["8MHZ", "16MHZ", "20MHZ"],
                      "markdownDescription": "One of `8MHZ`, `16MHZ` or `20MHZ`. Clock crystal used on the MCP2515 device. Defaults to `8MHZ`.\n\n\n\n*See also: [MCP2515 Component](https://esphome.io/components/canbus.html#configuration-variables)*"
                    },
                    "mode": {
                      "enum": ["NORMAL", "LOOPBACK", "LISTENONLY"],
                      "markdownDescription": "Operation mode. Default to `NORMAL`\n  * NORMAL: Normal operation\n  \n  * LOOPBACK: Loopback mode can be used to just test you spi connections to the device\n  \n  * LISTENONLY: only receive data\n  \n  \n\n\n\n*See also: [MCP2515 Component](https://esphome.io/components/canbus.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Is used to tell the receiving SPI device when it should listen for data on the SPI bus. Each device has an individual `CS` line. Sometimes also called `SS`.\n\n\n\n*See also: [MCP2515 Component](https://esphome.io/components/canbus.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/spi_bus" }
              ]
            }
          }
        ]
      },
      "markdownDescription": "Controller Area Network (CAN bus) is a serial bus protocol to connect individual systems and sensors as an alternative to conventional multi-wire looms. It allows automotive components to communicate on a single or dual-wire networked data bus up to 1Mbps. CAN is an International Standardization Organization (ISO) defined serial communications bus originally developed for the automotive industry to replace the complex wiring harness with a two-wire bus. The specification calls for high immunity to electrical interference and the ability to self-diagnose and repair data errors. These features have led to CAN\u2019s popularity in a variety of industries including building automation, medical, and manufacturing.\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#can-bus)*"
    },
    "climate": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "bang_bang" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "bang_bang::BangBangClimate"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the current temperature.\n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
                    },
                    "default_target_temperature_low": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The default low target temperature for the control algorithm. This can be dynamically set in the frontend later.\n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
                    },
                    "default_target_temperature_high": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The default high target temperature for the control algorithm. This can be dynamically set in the frontend later.\n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
                    },
                    "idle_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action to call when the climate device wants to enter idle mode.\n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
                    },
                    "cool_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action to call when the climate device wants to cooling mode and decrease the current temperature.\n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
                    },
                    "heat_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action to call when the climate device wants to heating mode and increase the current temperature. At least one of `heat_action` and `cool_action` need to be specified.\n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
                    },
                    "away_config": {
                      "$ref": "#/definitions/climate-bang_bang-away_config",
                      "markdownDescription": "Additionally specify target temperature range settings for away mode. Away mode can be used to have a second set of target temperatures (for example while the user is away or during nighttime)\n  * **default_target_temperature_low** (**Required**, float): The default low target temperature for the control algorithm during away mode.\n  \n  * **default_target_temperature_high** (**Required**, float): The default high target temperature for the control algorithm during away mode.\n  \n  \n\n\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `bang_bang` climate platform allows you to regulate a value with a [bang-bang controller](https://en.wikipedia.org/wiki/Bang%E2%80%93bang_control) (also called hysteresis controller).\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#bang-bang-climate-controller)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "climate_ir_lg" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "type": "string",
                      "id_type": "remote_receiver::RemoteReceiverComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "climate_ir_lg::LgIrClimate",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "header_high": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "8000us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: time for the high part of the header for the LG protocol. Defaults to `8000us`\n\n\n\n*See also: [climate_ir_lg Climate](https://esphome.io/components/climate/ir_climate.html#climate-ir-lg-climate)*"
                    },
                    "header_low": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "4000us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: time for the low part of the header for the LG protocol. Defaults to `4000us`\n\n\n\n*See also: [climate_ir_lg Climate](https://esphome.io/components/climate/ir_climate.html#climate-ir-lg-climate)*"
                    },
                    "bit_high": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "600us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: time for the high part of any bit in the LG protocol. Defaults to `600us`\n\n\n\n*See also: [climate_ir_lg Climate](https://esphome.io/components/climate/ir_climate.html#climate-ir-lg-climate)*"
                    },
                    "bit_one_low": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "1600us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: time for the low part of a \u20181\u2019 bit in the LG protocol. Defaults to `1600us`\n\n\n\n*See also: [climate_ir_lg Climate](https://esphome.io/components/climate/ir_climate.html#climate-ir-lg-climate)*"
                    },
                    "bit_zero_low": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "550us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: time for the low part of a \u20180\u2019 bit in the LG protocol. Defaults to `550us`\n\n\n\n*See also: [climate_ir_lg Climate](https://esphome.io/components/climate/ir_climate.html#climate-ir-lg-climate)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "Additional configuration is available for this platform\n\n*See also: [climate_ir_lg Climate](https://esphome.io/components/climate/ir_climate.html#climate-ir-lg-climate)*"
          },
          {
            "if": { "properties": { "platform": { "const": "coolix" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "type": "string",
                      "id_type": "remote_receiver::RemoteReceiverComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "custom::CustomClimateConstructor"
                },
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the climate(s).\n\n\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
                },
                "climates": {
                  "anyOf": [
                    { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/climate.CLIMATE_SCHEMA"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of climates to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Climate](https://esphome.io/components/climate/index.html#config-climate).\n  \n  \n\n\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "This integration can be used to create custom climate devices in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
          },
          {
            "if": { "properties": { "platform": { "const": "daikin" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "type": "string",
                      "id_type": "remote_receiver::RemoteReceiverComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "fujitsu_general" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "type": "string",
                      "id_type": "remote_receiver::RemoteReceiverComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "hitachi_ac344" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "type": "string",
                      "id_type": "remote_receiver::RemoteReceiverComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "midea_ac" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "midea_ac::MideaAC",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    },
                    "midea_dongle_id": {
                      "type": "string",
                      "id_type": "midea_dongle::MideaDongle",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the `midea_dongle` if you want to use multiple devices.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    },
                    "beeper": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Beeper feedback on command. Defaults to `False`.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    },
                    "swing_horizontal": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Enable **swing horizontal** option. Defaults to `False`.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    },
                    "swing_both": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Enable **swing both** option. Defaults to `False`.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    },
                    "outdoor_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the outdoor temperature sensor.\n  * **name** (**Required**, string): The name of the sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    },
                    "power_usage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the current power consumption sensor.\n  * **name** (**Required**, string): The name of the sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    },
                    "humidity_setpoint": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity indoor sensor (experimental).\n  * **name** (**Required**, string): The name of the sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the climate device.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `midea_ac` component creates a Midea air conditioner climate device.\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea_ac.html#midea-air-conditioner)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mitsubishi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "pid" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "pid::PIDClimate" },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the current temperature.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
                    },
                    "default_target_temperature": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The default target temperature (setpoint) for the control algorithm. This can be dynamically set in the frontend later.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
                    },
                    "cool_output": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of a [float output](https://esphome.io/components/output/index.html#config-output) that decreases the current temperature. At least one of `heat_output` and `cool_output` must be specified.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
                    },
                    "heat_output": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of a [float output](https://esphome.io/components/output/index.html#config-output) that increases the current temperature. At least one of `heat_output` and `cool_output` must be specified.\n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
                    },
                    "control_parameters": {
                      "$ref": "#/definitions/climate-pid-control_parameters",
                      "markdownDescription": "Control parameters of the PID controller.\n  * **kp** (**Required**, float): The factor for the proportional term of the PID controller.\n  \n  * **ki** (*Optional*, float): The factor for the integral term of the PID controller. Defaults to `0`.\n  \n  * **kd** (*Optional*, float): The factor for the derivative term of the PID controller. Defaults to `0`.\n  \n  * **min_integral** (*Optional*, float): The maximum value of the integral term multiplied by `ki` to prevent windup. Defaults to `-1`.\n  \n  * **max_integral** (*Optional*, float): The minimum value of the integral term multiplied by `ki` to prevent windup. Defaults to `1`.\n  \n  \n\n\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `pid` climate platform allows you to regulate a value with a [PID controller](https://en.wikipedia.org/wiki/PID_controller).\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#pid-climate)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tcl112" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "type": "string",
                      "id_type": "remote_receiver::RemoteReceiverComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "thermostat" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "thermostat::ThermostatClimate"
                    },
                    "sensor": { "type": "string", "id_type": "sensor::Sensor" },
                    "idle_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "cool_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "dry_action": { "$ref": "#/definitions/simple_automation" },
                    "fan_only_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "heat_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "auto_mode": { "$ref": "#/definitions/simple_automation" },
                    "cool_mode": { "$ref": "#/definitions/simple_automation" },
                    "dry_mode": { "$ref": "#/definitions/simple_automation" },
                    "fan_only_mode": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "heat_mode": { "$ref": "#/definitions/simple_automation" },
                    "off_mode": { "$ref": "#/definitions/simple_automation" },
                    "fan_mode_on_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_off_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_auto_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_low_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_medium_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_high_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_middle_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_focus_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_diffuse_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "swing_both_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "swing_horizontal_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "swing_off_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "swing_vertical_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "default_target_temperature_high": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "default_target_temperature_low": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "hysteresis": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.5
                    },
                    "away_config": {
                      "$ref": "#/definitions/climate-thermostat-away_config"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `thermostat` climate platform allows you to control a climate control system in much the same manner as a physical thermostat. Its operation is similar to the [bang-bang](https://esphome.io/components/climate/bang_bang.html) controller; a sensor measures a value (the air temperature) and the controller will try to keep this value within a range defined by the set point(s). To do this, the controller can activate devices like a heating unit and/or a cooling unit to change the value observed by the sensor. When configured for both heating and cooling, it is essentially two [bang-bang](https://esphome.io/components/climate/bang_bang.html) controllers in one; it differs, however, in that interation with the thermostat component is nearly identical to that of a real thermostat.\n\n*See also: [Thermostat Climate Controller](https://esphome.io/components/climate/thermostat.html#thermostat-climate-controller)*"
          },
          {
            "if": { "properties": { "platform": { "const": "toshiba" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "type": "string",
                      "id_type": "remote_receiver::RemoteReceiverComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tuya::TuyaClimate",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "tuya_id": { "type": "string", "id_type": "tuya::Tuya" },
                    "switch_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the climate switch.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "target_temperature_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the target temperature.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "current_temperature_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the current temperature.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "temperature_multiplier": {
                      "type": "number",
                      "markdownDescription": "**float**: A multiplier to modify the incoming and outgoing temperature values - [see below](https://esphome.io/components/climate/tuya.html#temperature-multiplier).\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "current_temperature_multiplier": {
                      "type": "number",
                      "markdownDescription": "**float**: A multiplier to modify the current temperature value.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "target_temperature_multiplier": {
                      "type": "number",
                      "markdownDescription": "**float**: A multiplier to modify the target temperature value.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the climate device.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` climate platform creates a climate device from a tuya component.\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#tuya-climate)*"
          },
          {
            "if": { "properties": { "platform": { "const": "whirlpool" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "type": "string",
                      "id_type": "remote_receiver::RemoteReceiverComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "whirlpool::WhirlpoolClimate",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "model": {
                      "enum": ["DG11J1-3A", "DG11J1-91"],
                      "markdownDescription": "**string**: There are two valid models\n\n\n\n*See also: [whirlpool Climate](https://esphome.io/components/climate/ir_climate.html#whirlpool-climate)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "Additional configuration is available for this model\n\n*See also: [whirlpool Climate](https://esphome.io/components/climate/ir_climate.html#whirlpool-climate)*"
          },
          {
            "if": { "properties": { "platform": { "const": "yashima" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "yashima::YashimaClimate",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "transmitter_id": {
                      "type": "string",
                      "id_type": "remote_transmitter::RemoteTransmitterComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the remote transmitter.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting cooling mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Enables setting heating mode for this climate device. Defaults to `True`.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    },
                    "receiver_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id).\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          }
        ]
      },
      "markdownDescription": "ESPHome has support for climate devices. Climate devices can represent different types of hardware, but the defining factor is that climate devices have a settable target temperature and can be put in different modes like HEAT, COOL, AUTO or OFF.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-component)*"
    },
    "cover": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/cover.COVER_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "custom::CustomCoverConstructor"
                },
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the cover(s).\n\n\n\n*See also: [Custom Cover](https://esphome.io/components/cover/custom.html#custom-cover)*"
                },
                "covers": {
                  "anyOf": [
                    { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/definitions/cover.COVER_SCHEMA" }
                    }
                  ],
                  "markdownDescription": "**list**: A list of covers to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Cover](https://esphome.io/components/cover/index.html#config-cover).\n  \n  \n\n\n\n*See also: [Custom Cover](https://esphome.io/components/cover/custom.html#custom-cover)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "This integration can be used to create custom covers in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Cover](https://esphome.io/components/cover/custom.html#custom-cover)*"
          },
          {
            "if": { "properties": { "platform": { "const": "endstop" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "endstop::EndstopCover",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "stop_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be closed or an endstop is reached.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "open_endstop": {
                      "type": "string",
                      "id_type": "binary_sensor::BinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the [Binary Sensor](https://esphome.io/components/binary_sensor/index.html#config-binary-sensor) that turns on when the open position is reached.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "open_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be opened.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "open_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time it takes the cover to open up from the fully-closed state.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "close_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be closed.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "close_endstop": {
                      "type": "string",
                      "id_type": "binary_sensor::BinarySensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the [Binary Sensor](https://esphome.io/components/binary_sensor/index.html#config-binary-sensor) that turns on when the closed position is reached.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "close_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time it takes the cover to close from the fully-open state.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "max_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The maximum duration the cover should be opening or closing. Useful for protecting from dysfunctional endstops.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `endstop` cover platform allows you to create covers with position control that have endstops at both ends of the cover to detect the fully-open and fully-closed states. When any of these endstops are reached, the cover is stopped (via `stop_action`) and the corresponding state is sent out.\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#endstop-cover)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "template_::TemplateCover",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated repeatedly to get the current state of the cover.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "optimistic": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to operate in optimistic mode - when in this mode, any command sent to the template cover will immediately update the reported state and no lambda needs to be used. Defaults to `false`.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "assumed_state": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether the true state of the cover is not known. This will make the Home Assistant frontend show buttons for both OPEN and CLOSE actions, instead of hiding one of them. Defaults to `false`.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "has_position": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether this cover will publish its position as a floating point number. By default (`false`), the cover only publishes OPEN/CLOSED position. Parameter useless if you set the POSITION_ACTION (is set to TRUE).\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "open_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover to be opened.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "close_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be closed.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "stop_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be stopped.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "tilt_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover be set to a specific tilt position. The desired tilt is available in the lambda in the `tilt` variable.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "tilt_lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated repeatedly to get the current tilt position of the cover.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "position_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover be set to a specific position. The desired position is available in the lambda in the `pos` variable.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "restore_mode": {
                      "enum": ["NO_RESTORE", "RESTORE", "RESTORE_AND_CALL"]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `template` cover platform allows you to create simple covers out of just a few actions and a value lambda. Once defined, it will automatically appear in Home Assistant as a cover and can be controlled through the frontend.\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#template-cover)*"
          },
          {
            "if": { "properties": { "platform": { "const": "time_based" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "time_based::TimeBasedCover",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "stop_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed to stop the cover when the remote requests the cover to be stopped or when the cover has been opening/closing for the given durations.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "open_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be opened.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "open_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time it takes the cover to open up from the fully-closed state.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "close_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be closed.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "close_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time it takes the cover to close from the fully-open state.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "has_built_in_endstop": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Indicates that the cover has built in end stop detectors. In this configuration the `stop_action` is not performed when the open or close time is completed and if the cover is commanded to open or close the corresponding actions will be performed without checking current state. Defaults to `False`.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "assumed_state": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Whether the true state of the cover is not known. This will make the Home Assistant frontend show buttons for both OPEN and CLOSE actions, instead of hiding or disabling one of them. Defaults to `True`.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `time_based` cover platform allows you to create covers with position control that do not have any position feedback. The state of the cover is thus always an assumed one, the current position is approximated with the time the cover has been moving in a direction.\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#time-based-cover)*"
          }
        ]
      },
      "markdownDescription": "The `cover` component is a generic representation of covers in ESPHome. A cover can (currently) either be *closed* or *open* and supports three types of commands: *open*, *close* and *stop*.\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-component)*"
    },
    "display": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": {
              "properties": { "platform": { "const": "addressable_light" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "addressable_light::AddressableLightDisplay",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#configuration-variables)*"
                    },
                    "addressable_light_id": {
                      "type": "string",
                      "id_type": "light::LightState",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the addressable light component to use as a display.\n\n\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#configuration-variables)*"
                    },
                    "width": {
                      "type": "number",
                      "markdownDescription": "**int**: The width of the LED matrix in pixels.\n\n\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#configuration-variables)*"
                    },
                    "height": {
                      "type": "number",
                      "markdownDescription": "**int**: The height of the LED matrix in pixels.\n\n\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "16ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to call the lambda to update the display. Defaults to `16ms`.\n\n\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#configuration-variables)*"
                    },
                    "pixel_mapper": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: A lambda that returns the integer address of the LED given the supplied the `x` and `y` pixel coordinate. By default, a left-to-right direct pixel mapper is used.\n\n\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. `it` will be an instance of [DisplayBuffer ](https://esphome.io/api/classesphome_1_1display_1_1_display_buffer.html). See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `addressable_light` display platform allows to display text and graphics on an addressable light that has been arranged in a display matrix.\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#addressable-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ili9341" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ili9341::ILI9341Display",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "model": {
                      "enum": ["M5STACK", "TFT_2.4"],
                      "markdownDescription": "The model of the display. Options are:\n  * `M5STACK`\n  \n  * `TFT 2.4`\n  \n  \n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "led_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The display\u2019s backlight pin. **Note:** Connect to a PWM-capable pin to switch/dim the display\u2019s backlight **or** save a pin by connecting it through a 3.3K resistor to the +3V supply.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything drawn in the `lambda:` will be rotated per this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, or `270\u00b0`.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `ili9341` display platform allows you to use ILI9341 ([datasheet](https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf), [Aliexpress](https://s.click.aliexpress.com/e/_dTKH6Mt)) displays with ESPHome. As this is a somewhat higher resolution display and may require pins beyond the typical SPI connections, it is better suited for use with the ESP32.\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#ili9341-tft-lcd)*"
          },
          {
            "if": { "properties": { "platform": { "const": "inkplate6" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "inkplate6::Inkplate6",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "greyscale": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Makes the screen display 3 bit colors. Defaults to `False`\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "partial_updating": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Makes the screen update partially, which is faster, but leaves burnin. Defaults to `False`\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "full_update_every": {
                      "type": "number",
                      "default": 10,
                      "markdownDescription": "**int**: When partial updating is enabled, forces a full screen update after chosen number of updates. Defaults to `10`\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "ckv_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The CKV pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "gmod_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The GMOD pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "gpio0_enable_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The GPIO0 Enable pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "oe_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The OE pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "powerup_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Powerup pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "sph_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The SPH pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "spv_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The SPV pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "vcom_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The VCOM pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "wakeup_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA"
                    },
                    "cl_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The CL pin for the Inkplate display. Defaults to GPIO0.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "le_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The LE pin for the Inkplate display. Defaults to GPIO2.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_0_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 0 pin for the Inkplate display. Defaults to GPIO4.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_1_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 1 pin for the Inkplate display. Defaults to GPIO5.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_2_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 2 pin for the Inkplate display. Defaults to GPIO18.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_3_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 3 pin for the Inkplate display. Defaults to GPIO19.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_4_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 4 pin for the Inkplate display. Defaults to GPIO23.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_5_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 5 pin for the Inkplate display. Defaults to GPIO25.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_6_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 6 pin for the Inkplate display. Defaults to GPIO26.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_7_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 7 pin for the Inkplate display. Defaults to GPIO27.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "All-in-one e-paper display  `Inkplate 6` Inkplate 6 is a powerful, Wi-Fi enabled ESP32 based six-inch e-paper display \u2013 recycled from a Kindle e-reader. Its main feature is simplicity. Learn more at [Inkplate\u2019s website](https://inkplate.io/)\n\n*See also: [Inkplate 6](https://esphome.io/components/display/inkplate6.html#inkplate-6)*"
          },
          {
            "if": { "properties": { "platform": { "const": "lcd_gpio" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "dimensions": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The dimensions of the display with `COLUMNSxROWS`. If you\u2019re not sure, power the display up and just count them.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "lcd_gpio::GPIOLCDDisplay",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "data_pins": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA"
                      },
                      "markdownDescription": "**list of [Pin Schemas](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: A list of the data pins you have hooked up to the LCD. The list can either be 8 items long (when you have connected all 8 data pins), or 4 items long (if you\u2019re operating in 4-bit mode with either the first 4 data pins connected or the last 4 data pins connected).\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "enable_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have `EN` hooked up to.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "rs_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have `RS` hooked up to.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "rw_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Optionally set the pin you have `RW` hooked up to. You can also just permanently connect that pin to GND.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Rendering Lambda](https://esphome.io/components/display/lcd_display.html#display-lcd-lambda) for more information.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "lcd_pcf8574" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "dimensions": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The dimensions of the display with `COLUMNSxROWS`. If you\u2019re not sure, power the display up and just count them.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "lcd_pcf8574::PCF8574LCDDisplay",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) address of the PCF8574 chip, defaults to `0x3F`.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Rendering Lambda](https://esphome.io/components/display/lcd_display.html#display-lcd-lambda) for more information.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "max7219" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "max7219::MAX7219Component",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "num_chips": {
                      "type": "number",
                      "default": 1,
                      "markdownDescription": "**integer**: The number of chips you wish to use for daisy chaining. Defaults to `1`.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "intensity": {
                      "type": "number",
                      "default": 15,
                      "markdownDescription": "**integer**: The intensity with which the MAX7219 should drive the outputs. Range is from 0 (least intense) to 15 (the default).\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "reverse_enable": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: For some displays the order of the chips is reversed so you\u2019ll see \u201c56781234\u201d instead of \u201c12345678\u201d. This option will adjust the output to compensate. Defaults to `False`.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have the CS line hooked up to.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the MAX7219. See [Rendering Lambda](https://esphome.io/components/display/max7219.html#display-max7219-lambda) for more information.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max7219` display platform allows you to use MAX7219 7-segment display drivers ( [datasheet](https://datasheets.maximintegrated.com/en/ds/MAX7219-MAX7221.pdf), [hobbycomponents](https://hobbycomponents.com/displays/597-max7219-8-digit-seven-segment-display-module)) with ESPHome. Please note that this integration is *only* for 7-segment display, not matrix configurations.\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#max7219-7-segment-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max7219digit" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "max7219digit::MAX7219Component",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "num_chips": {
                      "type": "number",
                      "default": 4,
                      "markdownDescription": "**integer**: The number of chips you wish to use for daisy chaining. Defaults to `4`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "intensity": {
                      "type": "number",
                      "default": 15,
                      "markdownDescription": "**integer**: The intensity with which the MAX7219 should drive the outputs. Range is from `0`, least intense to `15` the brightest. Defaults to `15`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "rotate_chip": {
                      "enum": ["0", "90", "180", "270"],
                      "markdownDescription": "Rotates every 8x8 chip. Valid values are `0`, `90`, `180` and `270`. Defaults to `0`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_mode": {
                      "enum": ["CONTINUOUS", "STOP"],
                      "markdownDescription": "Set the scroll mode. One of `CONTINUOUS` or `STOP`. Defaults to `CONTINUOUS`\n  * `CONTINUOUS`: Always scrolls and the text repeats continuously, you might need to add some separation at the end.\n  \n  * `STOP`: When text is over it waits the `scroll_dwell` time and scroll is set back to the start.\n  \n  \n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_enable": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Turn scroll mode on when content does not fit. Defaults to `True`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_speed": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "250ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set scroll speed. Defaults to `250ms`\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_delay": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "1000ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set delay time before scroll starts. Defaults to `1s`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_dwell": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "1000ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Sets the wait time at the end of the scroll before starting over. This is only used in mode `STOP`. Defaults to `1s`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "reverse_enable": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: For some displays the order of the displays is reversed (\u201cDCBA\u201d). This option will reverse the display to (\u201cABCD\u201d) again. Defaults to  `False`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have the CS line hooked up to.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the MAX7219. See [Rendering Lambda](https://esphome.io/components/display/max7219digit.html#display-max7219digit-lambda) for more information.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max7219` display platform allows you to use MAX7219 digit with ESPHome. Please note that this integration is *only* for the digit \u201cmatrix\u201d display, for the 7 segment display see [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html).\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#max7219-digit-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "nextion" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "nextion::Nextion",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Defaults to `100%`\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the [UART bus](https://esphome.io/components/uart.html#uart) you wish to use for this display. Use this if you want to use multiple UART buses at once.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the nextion display. See [Rendering Lambda](https://esphome.io/components/display/nextion.html#display-nextion-lambda) for more information.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to call the lambda to update the display. Defaults to `5s`.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "The `nextion` display platform allows you to use Nextion LCD displays ([datasheet](https://nextion.itead.cc/resources/datasheets/), [iTead](https://www.itead.cc/display/nextion.html)) with ESPHome.\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#nextion-tft-lcd-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pcd8544" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "pcd8544::PCD8544",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "contrast": {
                      "type": "number",
                      "default": 127,
                      "markdownDescription": "**int**: Set screen contrast (0-255). Defaults to `0x7f`.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `pcd8544` display platform allows you to use PCD8544 ([Adafruit](https://www.adafruit.com/product/338)) displays with ESPHome. Connection to this display is made using the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi).\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#pcd-8544-display-nokia-5110-3310)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1306_i2c" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": [
                        "SSD1306_128X32",
                        "SSD1306_128X64",
                        "SSD1306_96X16",
                        "SSD1306_64X48",
                        "SH1106_128X32",
                        "SH1106_128X64",
                        "SH1106_96X16",
                        "SH1106_64X48"
                      ],
                      "markdownDescription": "The model of the display. Options are:\n  * `SSD1306 128x32` (SSD1306 with 128 columns and 32 rows)\n  \n  * `SSD1306 128x64`\n  \n  * `SSD1306 96x16`\n  \n  * `SSD1306 64x48`\n  \n  * `SH1106 128x32`\n  \n  * `SH1106 128x64`\n  \n  * `SH1106 96x16`\n  \n  * `SH1106 64x48`\n  \n  \n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Defaults to `100%`\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "external_vcc": {
                      "type": "boolean",
                      "markdownDescription": "**boolean**: Set this to true if you have the VCC pin connected to an external power supply. Defaults to `false`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "ssd1306_i2c::I2CSSD1306",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the [I\u00b2C](https://esphome.io/components/i2c.html#i2c) address of the display. Defaults to 0x3C.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `ssd1306_i2c` display platform allows you to use SSD1306 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf), [Adafruit](https://www.adafruit.com/product/326)) and SH1106 ([datasheet](https://www.elecrow.com/download/SH1106%20datasheet.pdf), [electrodragon](https://www.electrodragon.com/product/1-3-12864-blue-oled-display-iicspi/)) displays with ESPHome. Note that this component is for displays that are connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c). If your SSD1306 or SH1106 is connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi), see [Over SPI](https://esphome.io/components/display/ssd1306.html#ssd1306-spi).\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#over-i2c)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1306_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": [
                        "SSD1306_128X32",
                        "SSD1306_128X64",
                        "SSD1306_96X16",
                        "SSD1306_64X48",
                        "SH1106_128X32",
                        "SH1106_128X64",
                        "SH1106_96X16",
                        "SH1106_64X48"
                      ],
                      "markdownDescription": "The model of the display. Options are:\n  * `SSD1306 128x32` (SSD1306 with 128 columns and 32 rows)\n  \n  * `SSD1306 128x64`\n  \n  * `SSD1306 96x16`\n  \n  * `SSD1306 64x48`\n  \n  * `SH1106 128x32`\n  \n  * `SH1106 128x64`\n  \n  * `SH1106 96x16`\n  \n  * `SH1106 64x48`\n  \n  \n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Defaults to `100%`\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "external_vcc": {
                      "type": "boolean",
                      "markdownDescription": "**boolean**: Set this to true if you have the VCC pin connected to an external power supply. Defaults to `false`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "ssd1306_spi::SPISSD1306",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select (CS) pin.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `ssd1306_spi` display platform allows you to use SSD1306 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf), [Adafruit](https://www.adafruit.com/product/326)) and SH1106 ([datasheet](https://www.elecrow.com/download/SH1106%20datasheet.pdf), [electrodragon](https://www.electrodragon.com/product/1-3-12864-blue-oled-display-iicspi/)) displays with ESPHome. Note that this component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi). If your SSD1306 or SH1106 is connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c), see [Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#ssd1306-i2c).\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#over-spi)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1322_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["SSD1322_256X64"],
                      "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1322 256x64`\n  \n  \n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "external_vcc": { "type": "boolean" },
                    "id": {
                      "type": "string",
                      "id_type": "ssd1322_spi::SPISSD1322",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1325_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": [
                        "SSD1325_128X32",
                        "SSD1325_128X64",
                        "SSD1325_96X16",
                        "SSD1325_64X48",
                        "SSD1327_128X128"
                      ],
                      "markdownDescription": "The model of the display. Options are:\n  * `SSD1325 128x32` (SSD1325 with 128 columns and 32 rows)\n  \n  * `SSD1325 128x64`\n  \n  * `SSD1325 96x16`\n  \n  * `SSD1325 64x48`\n  \n  \n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "external_vcc": { "type": "boolean" },
                    "id": {
                      "type": "string",
                      "id_type": "ssd1325_spi::SPISSD1325",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that that the CS line is connected to. The CS line can be connected to GND if this is the only device on the SPI bus.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1327_i2c" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["SSD1327_128X128"],
                      "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1327 128x128`\n  \n  \n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Defaults to `100%`\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "ssd1327_i2c::I2CSSD1327",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the [I\u00b2C](https://esphome.io/components/i2c.html#i2c) address of the display. Defaults to 0x3D.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `ssd1327_i2c` display platform allows you to use SSD1327 ([datasheet](https://www.generationrobots.com/media/Ecran_OLED_0_96/SSD1327_datasheet.pdf), [Waveshare](https://www.waveshare.com/1.5inch-oled-module.htm)) displays with ESPHome. Note that this component is for displays that are connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c). If your SSD1327 is connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi), see [Over SPI](https://esphome.io/components/display/ssd1327.html#ssd1327-spi).\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#over-i2c)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1327_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["SSD1327_128X128"],
                      "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1327 128x128`\n  \n  \n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Defaults to `100%`\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "ssd1327_spi::SPISSD1327",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select (CS) pin.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `ssd1327_spi` display platform allows you to use SSD1327 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1327.pdf), [Adafruit](https://www.adafruit.com/product/326)) displays with ESPHome. Note that this component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi). If your SSD1327 is connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c), see [Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#ssd1327-i2c).\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#over-spi)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1331_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "id": {
                      "type": "string",
                      "id_type": "ssd1331_spi::SPISSD1331",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that that the CS line is connected to. The CS line can be connected to GND if this is the only device on the SPI bus.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `ssd1331_spi` display platform allows you to use SSD1331 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1331_1.2.pdf), [Adafruit](https://www.adafruit.com/product/684)) displays with ESPHome. This component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi).\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#ssd1331-oled-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1351_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["SSD1351_128X96", "SSD1351_128X128"],
                      "markdownDescription": "The model of the display. Options are:\n  * `SSD1351 128x128` (SSD1351 with 128 columns and 128 rows)\n  \n  * `SSD1351 128x96` (SSD1351 with 128 columns and 96 rows)\n  \n  \n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "id": {
                      "type": "string",
                      "id_type": "ssd1351_spi::SPISSD1351",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that that the CS line is connected to.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "st7735" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": [
                        "INITR_GREENTAB",
                        "INITR_REDTAB",
                        "INITR_BLACKTAB",
                        "INITR_MINI160X80",
                        "INITR_18BLACKTAB",
                        "INITR_18REDTAB"
                      ],
                      "markdownDescription": "**\u201cSee Models Below\u201d**: This the model to use. INITR_BLACKTAB is the default\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "id": { "type": "string", "id_type": "st7735::ST7735" },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "device_width": {
                      "type": "number",
                      "markdownDescription": "**int**: The device width. 128 is default\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "device_height": {
                      "type": "number",
                      "markdownDescription": "**int**: The device height. 160 is default\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "col_start": {
                      "type": "number",
                      "markdownDescription": "**int**: The device height. 160 is default\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "row_start": {
                      "type": "number",
                      "markdownDescription": "**int**: The device height. 160 is default\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "eight_bit_color": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**\u201cTrue/False\u201d **: 8bit mode. Default is False. This saves 50% of the buffer required for the display.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "use_bgr": { "type": "boolean", "default": false },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "ST7735 Display Driver.\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#st7735-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "st7789v" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "st7789v::ST7789V",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "backlight_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The display\u2019s backlight pin.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `st7789v` display platform allows you to use ST7789V ([datasheet](https://github.com/Xinyuan-LilyGO/TTGO-T-Display), [Tindie](https://www.tindie.com/products/ttgo/lilygor-ttgo-t-display/)) displays with ESPHome. Note that this component utilizes the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi); the physical connection is already in place on the TTGO T-Display module as shown below.\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#st7789v-tft-lcd)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tm1637" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tm1637::TM1637Display",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    },
                    "intensity": {
                      "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]",
                      "markdownDescription": "**integer**: The intensity with which the TM1637 should drive the outputs. Range is from 0 (least intense) to 7 (the default).\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    },
                    "clk_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have the CLK line hooked up to.\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    },
                    "dio_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have the DIO line hooked up to.\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the TM1637. See [Rendering Lambda](https://esphome.io/components/display/tm1637.html#display-tm1637-lambda) for more information.\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `tm1637` display platform allows you to use the popular TM1637 7-segment display drivers with ESPHome.\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#tm1637-7-segment-display)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "waveshare_epaper" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "waveshare_epaper::WaveshareEPaper",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "model": {
                      "enum": [
                        "1.54in",
                        "2.13in",
                        "2.13in-ttgo",
                        "2.13in-ttgo-b1",
                        "2.13in-ttgo-b73",
                        "2.90in",
                        "2.90inv2",
                        "2.70in",
                        "2.90in-b",
                        "4.20in",
                        "5.83in",
                        "7.50in",
                        "7.50inv2"
                      ],
                      "markdownDescription": "The model of the E-Paper display. Options are:\n  * `1.54in`\n  \n  * `2.13in` (not tested)\n  \n  * `2.13in-ttgo` (T5_V2.3 tested. Also works for Wemos D1 Mini ePaper Shield 2.13 1.0.0 \u201cLOLIN\u201d)\n  \n  * `2.13in-ttgo-b73` (T5_V2.3 with B73 display tested)\n  \n  * `2.13in-ttgo-b1` (T5_V2.3 with B1 display tested)\n  \n  * `2.70in` (currently not working with the HAT Rev 2.1 version)\n  \n  * `2.90in`\n  \n  * `2.90inv2`\n  \n  * `2.90in-b` (B/W rendering only)\n  \n  * `4.20in`\n  \n  * `5.83in`\n  \n  * `7.50in`\n  \n  * `7.50inV2` (Can\u2019t use with an ESP8266 as it runs out of RAM)\n  \n  \n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected. Make sure you pull this pin high (by connecting it to 3.3V with a resistor) if not connected to a GPIO pin.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "busy_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The BUSY pin. Defaults to not connected.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "full_update_every": {
                      "type": "number",
                      "markdownDescription": "**int**: E-Paper displays have two modes of switching to the next image: A partial update that only changes the pixels that have changed and a full update mode that first clears the entire display and then re-draws the image. The former is much quicker and nicer, but every so often a full update needs to happen because artifacts accumulate. On the `1.54in`, `2.13in`, `2.90in`, and `2.90inv2` models you have the option to switch only do a full-redraw every x-th time using this option. Defaults to `30` on the described models and a full update for all other models.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `10s`, use `never` to only manually update the screen via `component.update`.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `waveshare_epaper` display platform allows you to use some E-Paper displays sold by [Waveshare](https://www.waveshare.com/product/displays/e-paper.htm) with ESPHome. The 2.13\u201d [TTGO module](https://github.com/lewisxhe/TTGO-EPaper-Series) with an ESP32 on the board is supported as well. Depending on your specific revision of the board you might need to try out the `-b73` or `-b1` version (see below). Similar modules sold by other vendors might also work but not have been tested yet. Currently only single-color E-Ink displays are implemented and of those only a few modules.\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#waveshare-e-paper-display)*"
          }
        ]
      },
      "markdownDescription": "The `display` component houses ESPHome\u2019s powerful rendering and display engine. Fundamentally, there are these types of displays:\n\n*See also: [Display Component](https://esphome.io/components/display/index.html#display-component)*"
    },
    "fan": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/fan.FAN_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "binary" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/fan.FAN_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "binary::BinaryFan"
                    },
                    "output": {
                      "type": "string",
                      "id_type": "output::BinaryOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the binary output component to use for this fan.\n\n\n\n*See also: [Binary Fan](https://esphome.io/components/fan/binary.html#configuration-variables)*"
                    },
                    "direction_output": {
                      "type": "string",
                      "id_type": "output::BinaryOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the [output](https://esphome.io/components/output/index.html#output) to use for the direction state of the fan. Default is empty.\n\n\n\n*See also: [Binary Fan](https://esphome.io/components/fan/binary.html#configuration-variables)*"
                    },
                    "oscillation_output": {
                      "type": "string",
                      "id_type": "output::BinaryOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the [output](https://esphome.io/components/output/index.html#output) to use for the oscillation state of this fan. Default is empty.\n\n\n\n*See also: [Binary Fan](https://esphome.io/components/fan/binary.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for this fan.\n\n\n\n*See also: [Binary Fan](https://esphome.io/components/fan/binary.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Binary Fan](https://esphome.io/components/fan/binary.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `binary` fan platform lets you represent any binary [Output Component](https://esphome.io/components/output/index.html#output) as a fan.\n\n*See also: [Binary Fan](https://esphome.io/components/fan/binary.html#binary-fan)*"
          },
          {
            "if": { "properties": { "platform": { "const": "speed" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/fan.FAN_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "speed::SpeedFan"
                    },
                    "output": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the [float output](https://esphome.io/components/output/index.html#output) to use for this fan.\n\n\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#configuration-variables)*"
                    },
                    "oscillation_output": {
                      "type": "string",
                      "id_type": "output::BinaryOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the [output](https://esphome.io/components/output/index.html#output) to use for the oscillation state of this fan. Default is empty.\n\n\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#configuration-variables)*"
                    },
                    "direction_output": {
                      "type": "string",
                      "id_type": "output::BinaryOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the [output](https://esphome.io/components/output/index.html#output) to use for the direction state of the fan. Default is empty.\n\n\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#configuration-variables)*"
                    },
                    "speed_count": {
                      "type": "number",
                      "default": 100,
                      "markdownDescription": "**int**: Set the number of supported discrete speed levels. The value is used to calculate the percentages for each speed. E.g. `2` means that you have 50% and 100% while `100` will allow 1% increments in the output. Defaults to `100`.\n\n\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for this fan.\n\n\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `speed` fan platform lets you represent any float [Output Component](https://esphome.io/components/output/index.html#output) as a fan that supports speed settings.\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#speed-fan)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/fan.FAN_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "tuya::TuyaFan"
                    },
                    "tuya_id": { "type": "string", "id_type": "tuya::Tuya" },
                    "oscillation_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the oscillation switch. Probably not supported on any Tuya controllers currently, but it\u2019s there if need be.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "speed_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the fan speed.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "switch_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the fan switch.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "direction_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the direction switch. Supported by some ceiling fans.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "speed_count": {
                      "type": "number",
                      "default": 3,
                      "markdownDescription": "**int**: Set the number of supported discrete speed levels. Defaults to `3`.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the fan.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` fan platform creates a variable speed fan from a tuya component.\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#tuya-fan)*"
          }
        ]
      },
      "markdownDescription": "With the `fan` domain you can create components that appear as fans in the Home Assistant frontend. A fan can be switched ON or OFF, optionally has a speed level between 1 and the maximum supported speed level of the fan, and can have an oscillate and direction output.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-component)*"
    },
    "light": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/light.LIGHT_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "binary" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BINARY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "binary::BinaryLightOutput"
                    },
                    "output": {
                      "type": "string",
                      "id_type": "output::BinaryOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the binary [Output Component](https://esphome.io/components/output/index.html#output) to use for this light.\n\n\n\n*See also: [Binary Light](https://esphome.io/components/light/binary.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Binary Light](https://esphome.io/components/light/binary.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Binary Light](https://esphome.io/components/light/binary.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light, though binary lights only support very few of them.\n\n\n\n*See also: [Binary Light](https://esphome.io/components/light/binary.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `binary` light platform creates a simple ON/OFF-only light from a [binary output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [Binary Light](https://esphome.io/components/light/binary.html#binary-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "custom::CustomLightOutputConstructor"
                },
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the light output(s).\n\n\n\n*See also: [Custom Light Output](https://esphome.io/components/light/custom.html#custom-light-output)*"
                },
                "lights": {
                  "anyOf": [
                    { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of lights to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Light](https://esphome.io/components/light/index.html#config-light).\n  \n  \n\n\n\n*See also: [Custom Light Output](https://esphome.io/components/light/custom.html#custom-light-output)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "This integration can be used to create custom lights in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Light Output](https://esphome.io/components/light/custom.html#custom-light-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "cwww" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "cwww::CWWWLightOutput"
                    },
                    "cold_white": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the cold white channel.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    },
                    "warm_white": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the warm white channel.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    },
                    "cold_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The color temperate (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) of the cold white channel.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    },
                    "warm_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The color temperate (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) of the warm white channel.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    },
                    "constant_brightness": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: When enabled, this will keep the overall brightness of the cold and warm white channels constant by limiting the combined output to 100% of a single channel. This reduces the possible overall brightness but is necessary for some power supplies that are not able to run both channels at full brightness at once. Defaults to `false`.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `cwww` light platform creates a Cold-White+Warm-White light from 2 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel). The two channels will be mixed using the color temperature configuration options.\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#cold-white-warm-white-light)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "fastled_clockless" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "fastled_base::FastLEDLightOutput"
                    },
                    "num_leds": {
                      "type": "number",
                      "markdownDescription": "**int**: The number of LEDs attached.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "rgb_order": {
                      "enum": ["RGB", "RBG", "GRB", "GBR", "BRG", "BGR"],
                      "markdownDescription": "**string**: The order of the RGB channels. Use this if your light doesn\u2019t seem to map the RGB light channels correctly. For example if your light shows up green when you set a red color through the frontend. Valid values are `RGB`, `RBG`, `GRB`, `GBR`, `BRG` and `BGR`. Defaults to `RGB`.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "max_refresh_rate": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: A time interval used to limit the number of commands a light can handle per second. For example 16ms will limit the light to a refresh rate of about 60Hz. Defaults to the default value for the used chipset.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "chipset": {
                      "enum": [
                        "NEOPIXEL",
                        "TM1829",
                        "TM1809",
                        "TM1804",
                        "TM1803",
                        "UCS1903",
                        "UCS1903B",
                        "UCS1904",
                        "UCS2903",
                        "WS2812",
                        "WS2852",
                        "WS2812B",
                        "SK6812",
                        "SK6822",
                        "APA106",
                        "PL9823",
                        "WS2811",
                        "WS2813",
                        "APA104",
                        "WS2811_400",
                        "GW6205",
                        "GW6205_400",
                        "LPD1886",
                        "LPD1886_8BIT"
                      ],
                      "markdownDescription": "**string**: Set a chipset to use. See [Supported Chipsets](https://esphome.io/components/light/fastled.html#fastled-clockless-chipsets) for options.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the FastLED light.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `fastled_clockless` light platform allows you to create RGB lights in ESPHome for a [number of supported chipsets](https://esphome.io/components/light/fastled.html#fastled-clockless-chipsets).\n\n*See also: [FastLED Light](https://esphome.io/components/light/fastled.html#clockless)*"
          },
          {
            "if": { "properties": { "platform": { "const": "fastled_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "fastled_base::FastLEDLightOutput"
                    },
                    "num_leds": {
                      "type": "number",
                      "markdownDescription": "**int**: The number of LEDs attached.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "rgb_order": {
                      "enum": ["RGB", "RBG", "GRB", "GBR", "BRG", "BGR"],
                      "markdownDescription": "**string**: The order of the RGB channels. Use this if your light doesn\u2019t seem to map the RGB light channels correctly. For example if your light shows up green when you set a red color through the frontend. Valid values are `RGB`, `RBG`, `GRB`, `GBR`, `BRG` and `BGR`. Defaults to `RGB`.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "max_refresh_rate": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: A time interval used to limit the number of commands a light can handle per second. For example 16ms will limit the light to a refresh rate of about 60Hz. Defaults to the default value for the used chipset.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "chipset": {
                      "enum": [
                        "LPD8806",
                        "WS2801",
                        "WS2803",
                        "SM16716",
                        "P9813",
                        "APA102",
                        "SK9822",
                        "DOTSTAR"
                      ],
                      "markdownDescription": "**string**: Set a chipset to use. See [Supported Chipsets](https://esphome.io/components/light/fastled.html#fastled-spi-chipsets) for options.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "data_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the FastLED light.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "clock_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the clock line of the FastLED light.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "data_rate": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**frequency**: The data rate to use for shifting data to the light. Can help if you have long cables or slow level-shifters.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `fastled_spi` light platform allows you to create RGB lights in ESPHome for a [number of supported chipsets](https://esphome.io/components/light/fastled.html#fastled-spi-chipsets).\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#spi)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hbridge" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "hbridge::HBridgeLightOutput"
                    },
                    "pin_a": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the first float [Output Component](https://esphome.io/components/output/index.html#output) to use for this light.\n\n\n\n*See also: [H-bridge Light](https://esphome.io/components/light/hbridge.html#configuration-variables)*"
                    },
                    "pin_b": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the second float [Output Component](https://esphome.io/components/output/index.html#output) to use for this light.\n\n\n\n*See also: [H-bridge Light](https://esphome.io/components/light/hbridge.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [H-bridge Light](https://esphome.io/components/light/hbridge.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [H-bridge Light](https://esphome.io/components/light/hbridge.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `hbridge` light platform creates a dual color brightness controlled light from two [float output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [H-bridge Light](https://esphome.io/components/light/hbridge.html#h-bridge-light)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "monochromatic" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "monochromatic::MonochromaticLightOutput"
                    },
                    "output": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for this light.\n\n\n\n*See also: [Monochromatic Light](https://esphome.io/components/light/monochromatic.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Monochromatic Light](https://esphome.io/components/light/monochromatic.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Monochromatic Light](https://esphome.io/components/light/monochromatic.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Monochromatic Light](https://esphome.io/components/light/monochromatic.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `monochromatic` light platform creates a simple brightness-only light from an [float output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [Monochromatic Light](https://esphome.io/components/light/monochromatic.html#monochromatic-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "neopixelbus" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "neopixelbus::NeoPixelBusLightOutputBase"
                    },
                    "type": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "GRB",
                      "markdownDescription": "**string**: The type of light. This is used to specify if it is an RGBW or RGB light and in which order the colors are. Defaults to `GRB`. Change this if you have lights with white value and/or the colors are in the wrong order.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "variant": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "800KBPS",
                      "markdownDescription": "**string**: The chipset variant. You can read more about these [here](https://github.com/Makuna/NeoPixelBus/wiki/NeoPixelBus-object#neopixel-led-model-specific-methods) (some of the info on that page is not entirely correct). One of these values:\n  * `800KBPS` (default)\n  \n  * `400KBPS`\n  \n  * `WS2812X`\n  \n  * `SK6812`\n  \n  * `WS2813` (same as `WS2812X`)\n  \n  * `WS2812` (same as `800KBPS`)\n  \n  * `LC8812` (same as `SK6812`)\n  \n  \n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "method": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The method to transmit the data with. You can read more about these here: [ESP32](https://github.com/Makuna/NeoPixelBus/wiki/ESP32-NeoMethods), [ESP8266](https://github.com/Makuna/NeoPixelBus/wiki/ESP8266-NeoMethods)\n  * `ESP8266_DMA` (default for ESP8266, only on pin GPIO3)\n  \n  * `ESP8266_UART0` (only on pin GPIO1)\n  \n  * `ESP8266_UART1` (only on pin GPIO2)\n  \n  * `ESP8266_ASYNC_UART0` (only on pin GPIO1)\n  \n  * `ESP8266_ASYNC_UART1` (only on pin GPIO2)\n  \n  * `ESP32_I2S_0`\n  \n  * `ESP32_I2S_1` (default for ESP32)\n  \n  * `BIT_BANG` (can flicker a bit)\n  \n  \n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "invert": {
                      "type": "boolean",
                      "default": "no",
                      "markdownDescription": "**boolean**: Invert data output, for use with n-type transistor. Defaults to `no`.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the light.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "clock_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the clock line of the light, for two-pin lights.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "data_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the light, for two-pin lights.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "num_leds": {
                      "type": "number",
                      "markdownDescription": "**int**: The number of LEDs attached.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `neopixelbus` light platform allows you to create RGB lights in ESPHome for an individually addressable lights like NeoPixel or WS2812.\n\n*See also: [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html#neopixelbus-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "partition" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "partition::PartitionLightOutput"
                    },
                    "segments": {
                      "anyOf": [
                        { "$ref": "#/definitions/light-partition-segments" },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/light-partition-segments"
                          }
                        }
                      ],
                      "markdownDescription": "**list**: The segments this light partition controls\n  * **id** (**Required**, [ID](https://esphome.io/guides/configuration-types.html#config-id)): The ID of the light this segment belongs to.\n  \n  * **from** (**Required**, int): The first LED to address in the segment. Counting starts with 0, so first LED is 0.\n  \n  * **to** (**Required**, int): The index of the last LED to address in this segment.\n  \n  \n\n\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `partition` light platform allows you to combine multiple addressable light segments (like [FastLED Light](https://esphome.io/components/light/fastled.html) or [Neopixelbus Light](https://esphome.io/components/light/neopixelbus.html)) into a single addressable light. This platform also allows splitting up an addressable lights into multiple segments, so that segments can be individually controlled.\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#light-partition)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rgb" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "rgb::RGBLightOutput"
                    },
                    "red": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the red channel.\n\n\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#configuration-variables)*"
                    },
                    "green": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the green channel.\n\n\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#configuration-variables)*"
                    },
                    "blue": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the blue channel.\n\n\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `rgb` light platform creates an RGB light from 3 [float output components](https://esphome.io/components/output/index.html#output) (one for each color channel).\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#rgb-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rgbw" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "rgbw::RGBWLightOutput"
                    },
                    "red": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the red channel.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    },
                    "green": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the green channel.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    },
                    "blue": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the blue channel.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    },
                    "white": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the white channel.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    },
                    "color_interlock": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: When enabled, this will prevent white leds being on at the same time as RGB leds. See [Color Interlock](https://esphome.io/components/light/rgbw.html#rgbw-color-interlock) for more information. Defaults to `false`.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `rgbw` light platform creates an RGBW light from 4 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel).\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#rgbw-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rgbww" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "rgbww::RGBWWLightOutput"
                    },
                    "red": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the red channel.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "green": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the green channel.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "blue": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the blue channel.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "cold_white": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the cold white channel.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "warm_white": {
                      "type": "string",
                      "id_type": "output::FloatOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the warm white channel.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "cold_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The color temperate (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) of the cold white channel.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "warm_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The color temperate (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) of the warm white channel.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "constant_brightness": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: When enabled, this will keep the overall brightness of the cold and warm white channels constant by limiting the combined output to 100% of a single channel. This reduces the possible overall brightness but is necessary for some power supplies that are not able to run both channels at full brightness at once. Defaults to `false`.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "color_interlock": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: When enabled, this will prevent white leds being on at the same time as RGB leds. See [Color Interlock](https://esphome.io/components/light/rgbw.html#rgbw-color-interlock) for more information. Defaults to `false`.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `rgbww` light platform creates an RGBWW (cold white + warm white) light from 5 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel). The cold white and warm white channels will be mixed using the color temperature configuration options.\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#rgbww-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "output_id": {
                      "type": "string",
                      "id_type": "tuya::TuyaLight"
                    },
                    "tuya_id": { "type": "string", "id_type": "tuya::Tuya" },
                    "dimmer_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the dimmer value.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "min_value_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the MCU minimum value setting.  If this is set then ESPHome will sync the **min_value** to the MCU on startup.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "switch_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the power switch.  My dimmer required this to be able to turn the light on and off.  Without this you would only be able to change the brightness and would have to toggle the light using the physical buttons.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "min_value": {
                      "type": "number",
                      "markdownDescription": "**int, default 0**: The lowest dimmer value allowed.  My dimmer had a minimum of 25 and wouldn\u2019t even accept anything lower, but this option is available if necessary.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "max_value": {
                      "type": "number",
                      "markdownDescription": "**int, default 255**: The highest dimmer value allowed.  Most dimmers have a maximum of 255, but dimmers with a maximum of 1000 can also be found. Try what works best.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "gamma_correct": { "type": "number", "default": 1.0 },
                    "default_transition_length": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "0s"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` light platform creates a simple brightness-only light from a tuya serial component.\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#tuya-dimmer)*"
          }
        ]
      },
      "markdownDescription": "The `light` domain in ESPHome lets you create lights that will automatically be shown in Home Assistant\u2019s frontend and have many features such as RGB colors, transitions, flashing and effects.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-component)*"
    },
    "output": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ac_dimmer" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ac_dimmer::AcDimmer",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    },
                    "gate_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin used to control the Triac or Mosfet.\n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    },
                    "zero_cross_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin used to sense the AC Zero cross event, you can have several dimmers controlled with the same zero cross detector, in such case duplicate the `zero_cross_pin` config on each output.\n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    },
                    "init_with_half_cycle": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Will send the first full half AC cycle Try to use this for dimmable LED lights, it might help turning on at low brightness levels. On Halogen lamps it might show at initial flicker. Defaults to `False`.\n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    },
                    "method": {
                      "enum": ["LEADING_PULSE", "LEADING", "TRAILING"],
                      "markdownDescription": "Set the method for dimming, can be:\n  * `leading pulse` (default): a short pulse to trigger a triac.\n  \n  * `leading`: gate pin driven high until the zero cross is detected\n  \n  * `trailing`: gate pin driven high from zero cross until dim period, this method is suitable for mosfet dimmers only.\n  \n  \n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "This component has not been fully tested yet, if you are testing this component please share your experience with the dimmer hardware and light model and configuration here [https://github.com/esphome/feature-requests/issues/278](https://github.com/esphome/feature-requests/issues/278)\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#ac-dimmer-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "markdownDescription": "**string**: The type of output. One of `binary` and `float`.\n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
                    }
                  }
                },
                {
                  "if": { "properties": { "type": { "const": "binary" } } },
                  "then": { "$ref": "#/definitions/output-custom-binary" }
                },
                {
                  "if": { "properties": { "type": { "const": "float" } } },
                  "then": { "$ref": "#/definitions/output-custom-float" }
                }
              ]
            },
            "markdownDescription": "This integration can be used to create custom binary and float [outputs](https://esphome.io/components/output/index.html) in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "esp32_dac" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "esp32_dac::ESP32DAC",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [ESP32 DAC](https://esphome.io/components/output/esp32_dac.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to use DAC on. Only GPIO25 and GPIO26 are supported.\n\n\n\n*See also: [ESP32 DAC](https://esphome.io/components/output/esp32_dac.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The ESP32 DAC platform allows you to output analog voltages using the 8-bit digital-to-analog converter of the ESP32. Unlike the [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html), which can simulate an analog signal by using a fast switching frequency, the hardware DAC can output a *real* analog signal with no need for additional filtering.\n\n*See also: [ESP32 DAC](https://esphome.io/components/output/esp32_dac.html#esp32-dac)*"
          },
          {
            "if": { "properties": { "platform": { "const": "esp8266_pwm" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "esp8266_pwm::ESP8266PWM",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to use PWM on.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#configuration-variables)*"
                    },
                    "frequency": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "1kHz",
                      "markdownDescription": "**frequency**: The frequency to run the PWM with. Lower frequencies have more visual artifacts, but can represent much more colors. Defaults to `1000 Hz`.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The ESP8266 Software PWM platform allows you to use a software PWM on the pins GPIO0-GPIO16 on your ESP8266. Note that this is a software PWM, so there can be some flickering during periods of high WiFi activity. Hardware PWMs like the one on the ESP32 (see [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html)) are preferred.\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#esp8266-software-pwm-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "gpio" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "gpio::GPIOBinaryOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [GPIO Output](https://esphome.io/components/output/gpio.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to use PWM on.\n\n\n\n*See also: [GPIO Output](https://esphome.io/components/output/gpio.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The GPIO output component is quite simple: It exposes a single GPIO pin as an output component. Note that output components are **not** switches and will not show up in Home Assistant. See [GPIO Switch](https://esphome.io/components/switch/gpio.html).\n\n*See also: [GPIO Output](https://esphome.io/components/output/gpio.html#gpio-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ledc" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ledc::LEDCOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to use LEDC on. Can only be GPIO0-GPIO33.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#configuration-variables)*"
                    },
                    "frequency": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "1kHz",
                      "markdownDescription": "**float**: At which frequency to run the LEDC channel\u2019s timer. Defaults to 1000Hz.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#configuration-variables)*"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Manually set the [LEDC channel](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html#configure-channel) to use. Two adjacent channels share the same timer. Defaults to an automatic selection.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The LEDC output component exposes a [LEDC PWM channel](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html) of the ESP32 as an output component.\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#esp32-ledc-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mcp4725" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "mcp4725::MCP4725",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [MCP4725 Output](https://esphome.io/components/output/mcp4725.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I2C address of the DAC. Defaults to `0x60`.\n\n\n\n*See also: [MCP4725 Output](https://esphome.io/components/output/mcp4725.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The MCP4725 output component allows to use [12bit external DAC](https://learn.sparkfun.com/tutorials/mcp4725-digital-to-analog-converter-hookup-guide/all) in order to have analog output(s) on any board by using I2C. Devices default address is `0x60` and configurable alternative is `0x61`.\n\n*See also: [MCP4725 Output](https://esphome.io/components/output/mcp4725.html#mcp4725-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "my9231" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "my9231_id": {
                      "type": "string",
                      "id_type": "my9231::MY9231OutputComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [Component/Hub](https://esphome.io/components/output/my9231.html#my9231-component). Use this if you have multiple MY9231/MY9291 chains you want to use at the same time.\n\n\n\n*See also: [my9231 Output](https://esphome.io/components/output/my9231.html#id1)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "my9231::MY9231OutputComponent::Channel",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [my9231 Output](https://esphome.io/components/output/my9231.html#id1)*"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the MY9231/MY9291 chain of this output component. Channel 0 is the most close channel.\n\n\n\n*See also: [my9231 Output](https://esphome.io/components/output/my9231.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The MY931/MY9291 output component exposes a MY931/MY9291 channel of a global [Component/Hub](https://esphome.io/components/output/my9231.html#my9231-component) as a float output.\n\n*See also: [my9231 Output](https://esphome.io/components/output/my9231.html#output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pca9685" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "pca9685::PCA9685Channel",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/pca9685.html#id1)*"
                    },
                    "pca9685_id": {
                      "type": "string",
                      "id_type": "pca9685::PCA9685Output",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [PCA9685 hub](https://esphome.io/components/output/pca9685.html#pca9685-component). Use this if you have multiple PCA9685s you want to use at the same time.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/pca9685.html#id1)*"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the PCA9685 of this output component. Must be in range from 0 to 15.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/pca9685.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The PCA9685 component represents a PCA9685 12-bit PWM driver ([datasheet](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html#configure-channel), [adafruit](https://www.adafruit.com/product/815)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [PCA9685](https://esphome.io/components/output/pca9685.html#pca9685)*"
          },
          {
            "if": { "properties": { "platform": { "const": "slow_pwm" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "slow_pwm::SlowPWMOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [Slow PWM Output](https://esphome.io/components/output/slow_pwm.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to pulse.\n\n\n\n*See also: [Slow PWM Output](https://esphome.io/components/output/slow_pwm.html#configuration-variables)*"
                    },
                    "period": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each cycle. (i.e. a 10s period at 50% duty would result in the pin being turned on for 5s, then off for 5s)\n\n\n\n*See also: [Slow PWM Output](https://esphome.io/components/output/slow_pwm.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "Similar to PWM, the Slow PWM Output platform allows you to control GPIO pins by pulsing them on/off over a longer time period. It could be used to control a heating element through a relay where a fast PWM update cycle would not be appropriate.\n\n*See also: [Slow PWM Output](https://esphome.io/components/output/slow_pwm.html#slow-pwm-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sm16716" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "sm16716_id": {
                      "type": "string",
                      "id_type": "sm16716::SM16716",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [Component/Hub](https://esphome.io/components/output/sm16716.html#sm16716-component). Use this if you have multiple SM16716 chains you want to use at the same time.\n\n\n\n*See also: [sm16716 Output](https://esphome.io/components/output/sm16716.html#id1)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "sm16716::SM16716::Channel",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [sm16716 Output](https://esphome.io/components/output/sm16716.html#id1)*"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the SM16716 chain of this output component.\n\n\n\n*See also: [sm16716 Output](https://esphome.io/components/output/sm16716.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The SM16716 output component exposes a SM16716 channel of a global [Component/Hub](https://esphome.io/components/output/sm16716.html#sm16716-component) as a float output.\n\n*See also: [sm16716 Output](https://esphome.io/components/output/sm16716.html#output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sm2135" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "sm2135_id": {
                      "type": "string",
                      "id_type": "sm2135::SM2135",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [Component/Hub](https://esphome.io/components/output/sm2135.html#sm2135-component). Use this if you have multiple SM2135 chains you want to use at the same time.\n\n\n\n*See also: [sm2135 Output](https://esphome.io/components/output/sm2135.html#id1)*"
                    },
                    "id": {
                      "type": "string",
                      "id_type": "sm2135::SM2135::Channel",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [sm2135 Output](https://esphome.io/components/output/sm2135.html#id1)*"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the SM2135 chain of this output component.\n\n\n\n*See also: [sm2135 Output](https://esphome.io/components/output/sm2135.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The SM2135 output component exposes a SM2135 channel of a global [Component/Hub](https://esphome.io/components/output/sm2135.html#sm2135-component) as a float output.\n\n*See also: [sm2135 Output](https://esphome.io/components/output/sm2135.html#output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sx1509" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sx1509::SX1509FloatOutputChannel"
                    },
                    "sx1509_id": {
                      "type": "string",
                      "id_type": "sx1509::SX1509Component"
                    },
                    "pin": { "type": "number" }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "markdownDescription": "**string**: The type of output. One of `binary` and `float`.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
                    }
                  }
                },
                {
                  "if": { "properties": { "type": { "const": "binary" } } },
                  "then": { "$ref": "#/definitions/output-template-binary" }
                },
                {
                  "if": { "properties": { "type": { "const": "float" } } },
                  "then": { "$ref": "#/definitions/output-template-float" }
                }
              ]
            },
            "markdownDescription": "The `template` output component can be used to create templated binary and float outputs in ESPHome.\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#template-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tlc59208f" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tlc59208f::TLC59208FChannel",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/tlc59208f.html#id1)*"
                    },
                    "tlc59208f_id": {
                      "type": "string",
                      "id_type": "tlc59208f::TLC59208FOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [TLC59208F chip](https://esphome.io/components/output/tlc59208f.html#tlc59208f-component). Use this if you have multiple TLC59208Fs you want to use at the same time.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/tlc59208f.html#id1)*"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Choose the channel of the TLC59208F for this output component. Must be in range from 0 to 7.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/tlc59208f.html#id1)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x20`.\n\n\n\n*See also: [Component](https://esphome.io/components/output/tlc59208f.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The TLC59208F component represents a Texas Instruments TLC59208F 8-bit PWM driver ([datasheet](http://www.ti.com/lit/gpn/tlc59208f), [hw example](https://faboplatform.github.io/ArduinoDocs/03.I2C%20Brick/211_brick_i2c_7seg/)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [TLC59208F](https://esphome.io/components/output/tlc59208f.html#tlc59208f)*"
          }
        ]
      },
      "markdownDescription": "Each platform of the `output` domain exposes some output to ESPHome. These are grouped into two categories: `binary` outputs (that can only be ON/OFF) and `float` outputs (like PWM, can output any rational value between 0 and 1).\n\n*See also: [Output Component](https://esphome.io/components/output/index.html#output-component)*"
    },
    "sensor": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "adc" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "adc::ADCSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to measure the voltage on. Or on the ESP8266 alternatively also `VCC`, see [ESP8266 Measuring VCC](https://esphome.io/components/sensor/adc.html#adc-esp8266-vcc).\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "attenuation": {
                      "properties": {},
                      "type": ["object", "null"],
                      "markdownDescription": "Only on ESP32. Specify the ADC attenuation to use. See [ESP32 Attenuation](https://esphome.io/components/sensor/adc.html#adc-esp32-attenuation).\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the voltage sensor.\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The Analog To Digital (`adc`) Sensor allows you to use the built-in ADC in your device to measure a voltage on certain pins. On the ESP8266 only pin A0 (GPIO17) supports this. On the ESP32 pins GPIO32 through GPIO39 can be used.\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#analog-to-digital-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ade7953" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "ade7953::ADE7953" },
                    "irq_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin connected to the ADE7935 IRQ line (if connected)\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volt. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "current_a": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the A channel in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "current_b": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the B channel in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "active_power_a": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the A channel in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "active_power_b": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the A channel in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x38`.\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#ade7953-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ads1115" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ads1115::ADS1115Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    },
                    "ads1115_id": {
                      "type": "string",
                      "id_type": "ads1115::ADS1115Component",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [ADS1115 Hub](https://esphome.io/components/sensor/ads1115.html#ads1115-component) you want to use this sensor.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    },
                    "multiplexer": {
                      "enum": [
                        "A0_A1",
                        "A0_A3",
                        "A1_A3",
                        "A2_A3",
                        "A0_GND",
                        "A1_GND",
                        "A2_GND",
                        "A3_GND"
                      ],
                      "markdownDescription": "The multiplexer channel of this sensor. Effectively means between which pins you want to measure voltage.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    },
                    "gain": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The gain of this sensor.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for this sensor.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ads1115` sensor allows you to use your ADS1115 sigma-delta ADC sensors ([datasheet](http://www.ti.com/lit/ds/symlink/ads1115.pdf), [Adafruit](https://www.adafruit.com/product/1085)) with ESPHome. First, setup an [ADS1115 Hub](https://esphome.io/components/sensor/ads1115.html#ads1115-component) for your ADS1115 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "aht10" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "aht10::AHT10Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `aht10` Temperature+Humidity sensor allows you to use your aht10 ([datasheet](http://www.aosong.com/userfiles/files/media/aht10%E8%A7%84%E6%A0%BC%E4%B9%A6v1_1%EF%BC%8820191015%EF%BC%89.pdf)) i2c-based sensor with ESPHome.\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#aht10-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "am2320" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "am2320::AM2320Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `am2320` Temperature+Humidity sensor allows you to use your AM2320 ([datasheet](https://akizukidenshi.com/download/ds/aosong/AM2320.pdf)) I\u00b2C-based sensor with ESPHome.\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#am2320-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "apds9960" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "type": {
                      "enum": ["CLEAR", "RED", "GREEN", "BLUE", "PROXIMITY"],
                      "markdownDescription": "**string**: The type of sensor measurement. One of\n  * **CLEAR**\n  \n  * **RED**\n  \n  * **GREEN**\n  \n  * **BLUE**\n  \n  * **PROXIMITY**\n  \n  \n\n\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
                    },
                    "apds9960_id": {
                      "type": "string",
                      "id_type": "apds9960::APDS9960"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `apds9960` sensor allows you to use your [APDS9960 Sensor to perform different measurements.\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "as3935" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "as3935_id": {
                      "type": "string",
                      "id_type": "as3935::AS3935Component"
                    },
                    "distance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Distance in km to the front of the storm and not the distance to a lightning strike.\n  * **name** (**Required**, string): The name for the distance sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [as3935 Sensor](https://esphome.io/components/sensor/as3935.html#sensor)*"
                    },
                    "lightning_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Lightning energy value. According to the datasheet this is only a pure value that doesn\u2019t have any physical meaning.\n  * **name** (**Required**, string): The name for the lightning energy sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [as3935 Sensor](https://esphome.io/components/sensor/as3935.html#sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "A sensor platform to read lightning data\n\n*See also: [as3935 Sensor](https://esphome.io/components/sensor/as3935.html#sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "atc_mithermometer" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "atc_mithermometer::ATCMiThermometer"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "atm90e32" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "atm90e32::ATM90E32Component"
                    },
                    "phase_a": {
                      "$ref": "#/definitions/sensor-atm90e32-phase_a",
                      "markdownDescription": "The configuration options for the 1st phase.\n  * **voltage** (*Optional*): Use the voltage value of this phase in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **current** (*Optional*): Use the current value of this phase in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **power** (*Optional*): Use the power value on this phase in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **reactive_power** (*Optional*): Use the reactive power value on this phase. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **power_factor** (*Optional*): Use the power factor value on this phase. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **gain_voltage** (*Optional*, int): Voltage gain to scale the low voltage AC power pack to household mains feed. Defaults to `7305`.\n  \n  * **gain_ct** (*Optional*, int): CT clamp calibration for this phase. Defaults to `27961`.\n  \n  * **forward_active_energy** (*Optional*): Use the forward active energy value on this phase in watt-hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **reverse_active_energy** (*Optional*): Use the reverse active energy value on this phase in watt-hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "phase_b": {
                      "$ref": "#/definitions/sensor-atm90e32-phase_a",
                      "markdownDescription": "The configuration options for the 2nd phase. Same options as 1st phase.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "phase_c": {
                      "$ref": "#/definitions/sensor-atm90e32-phase_a",
                      "markdownDescription": "The configuration options for the 3rd phase. Same options as 1st phase.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the frequenycy value calculated by the meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "chip_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the chip temperature value. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "line_frequency": {
                      "enum": ["50HZ", "60HZ"],
                      "markdownDescription": "**string**: The AC line frequency of the supply voltage. One of `50Hz`, `60Hz`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "current_phases": {
                      "enum": ["2", "3"],
                      "markdownDescription": "The number of phases the meter has, `2` or, `3` The 6 Channel Expandable Energy Meter should be set to `3`, and the Split Single Phase meter should be set to `2`. Defaults to `3`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "gain_pga": {
                      "enum": ["1X", "2X", "4X"],
                      "markdownDescription": "**string**: The gain for the CT clamp, `2X` for 100A, `4X` for 100A - 200A. One of `1X`, `2X`, `4X`. Defaults to `2X` which is suitable for the popular SCT-013-000 clamp.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin CS is connected to. For the 6 channel meter main board, this will always be 5 and 4. For the add-on boards a jumper can be selected for each CS pin, but default to 0 and 16.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `atm90e32` sensor platform allows you to use your ATM90E32 voltage/current and power sensors ([datasheet](http://ww1.microchip.com/downloads/en/devicedoc/Atmel-46003-SE-M90E32AS-Datasheet.pdf)) with ESPHome. This sensor is commonly found in CircuitSetup 2 and 6 channel energy meters.\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#atm90e32-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bh1750" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "bh1750::BH1750Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "resolution": {
                      "enum": [4.0, 1.0, 0.5],
                      "markdownDescription": "**string**: The resolution of the sensor in lx. One of `4.0`, `1.0`, `0.5`. Defaults to `0.5` (the maximum resolution).\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "measurement_duration": {
                      "type": "number",
                      "default": 69,
                      "markdownDescription": "**int**: Manually specify the measurement duration between `31` and `254`. Defaults to `69`.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x23` (address if address pin is pulled low). If the address pin is pulled high, the address is `0x5C`.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `bh1750` sensor platform allows you to use your BH1750 ([datasheet](http://www.mouser.com/ds/2/348/bh1750fvi-e-186247.pdf)) ambient light sensor with ESPHome. The [I\u00b2C bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#bh1750-ambient-light-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "binary_sensor_map" } }
            },
            "then": {
              "allOf": [
                {
                  "type": "object",
                  "properties": { "type": { "type": "string" } }
                },
                {
                  "if": { "properties": { "type": { "const": "group" } } },
                  "then": {
                    "$ref": "#/definitions/sensor-binary_sensor_map-group"
                  }
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "ble_client" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ble_client::BLESensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID to use for code generation, and for reference by dependent components.\n\n\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#configuration-variables)*"
                    },
                    "service_uuid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**UUID**: UUID of the service on the device.\n\n\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#configuration-variables)*"
                    },
                    "characteristic_uuid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**UUID**: UUID of the service\u2019s characteristic to query.\n\n\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#configuration-variables)*"
                    },
                    "descriptor_uuid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**UUID**: UUID of the characteristic\u2019s descriptor to query.\n\n\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#configuration-variables)*"
                    },
                    "notify": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Instruct the server to send notifications for this characteristic.\n\n\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#configuration-variables)*"
                    },
                    "on_notify": {
                      "$ref": "#/definitions/sensor-ble_client-on_notify",
                      "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a notify message is received from the device. See [on_notify](https://esphome.io/components/sensor/ble_client.html#ble-sensor-on-notify).\n\n\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#configuration-variables)*"
                    },
                    "ble_client_id": {
                      "type": "string",
                      "id_type": "ble_client::BLEClient",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: ID of the associated BLE client.\n\n\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to poll the device.\n\n\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ble_client` component is a sensor platform that can query BLE devices for specific values of service characteristics.\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#ble-client-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ble_rssi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ble_rssi::BLERSSISensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#configuration-variables)*"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address to track for this sensor. Either this or \u2018\u2019service_uuid\u2019\u2019 has to be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#configuration-variables)*"
                    },
                    "service_uuid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**16 bit, 32 bit, or 128 bit BLE Service UUID**: The BLE Service UUID which can be tracked if the device randomizes the MAC address. Either this or \u2018\u2019mac_address\u2019\u2019 has to be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#configuration-variables)*"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_rssi` sensor platform lets you track the RSSI value or signal strength of a BLE device. See [the binary sensor setup](https://esphome.io/components/binary_sensor/ble_presence.html#esp32-ble-tracker-setting-up-devices) for instructions for setting up this platform.\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#esp32-bluetooth-low-energy-rssi-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bme280" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "bme280::BME280Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor-bme280-temperature",
                      "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor-bme280-pressure",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor-bme280-humidity",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "iir_filter": {
                      "enum": ["OFF", "2X", "4X", "8X", "16X"],
                      "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `2x`, `4x`, `16x`. Defaults to `OFF`.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`. Another address can be `0x76`.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `bme280` sensor platform allows you to use your BME280 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BME280_DS001-10.pdf), [Adafruit](https://www.adafruit.com/product/2652)) temperature, pressure and humidity sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#bme280-temperature-pressure-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bme680" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "bme680::BME680Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor-bme680-temperature",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor-bme680-pressure",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor-bme680-humidity",
                      "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "gas_resistance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the gas sensor.\n  * **name** (**Required**, string): The name for the gas resistance sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "iir_filter": {
                      "enum": [
                        "OFF",
                        "1X",
                        "3X",
                        "7X",
                        "15X",
                        "31X",
                        "63X",
                        "127X"
                      ],
                      "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `1x`, `3x`, `7x`, `15x`, `31x`, `63x` and `127x`. Defaults to `OFF`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "heater": {
                      "properties": {
                        "temperature": {
                          "type": "number",
                          "default": 320,
                          "markdownDescription": "**int**: The target temperature of the heater between 200 and 400 \u00b0C. Defaults to `320`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                        },
                        "duration": {
                          "properties": {
                            "days": { "type": "number" },
                            "hours": { "type": "number" },
                            "minutes": { "type": "number" },
                            "seconds": { "type": "number" },
                            "milliseconds": { "type": "number" },
                            "microseconds": { "type": "number" }
                          },
                          "type": ["object", "null"],
                          "default": "150ms",
                          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration the heater should be active. Maximum value is `4032ms`. Defaults to `150ms`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                        }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "The settings for the internal heater for the gas sensor. Set this to disable the internal heater.\n  * **temperature** (*Optional*, int): The target temperature of the heater between 200 and 400 \u00b0C. Defaults to `320`.\n  \n  * **duration** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The duration the heater should be active. Maximum value is `4032ms`. Defaults to `150ms`.\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x76`. Another address can be `0x77`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `bme680` sensor platform allows you to use your BME680 ([datasheet](https://cdn-shop.adafruit.com/product-files/3660/BME680.pdf), [Adafruit](https://www.adafruit.com/product/3660)) temperature, pressure and humidity sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#bme680-temperature-pressure-humidity-gas-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bme680_bsec" } } },
            "then": {
              "properties": {
                "bme680_bsec_id": {
                  "type": "string",
                  "id_type": "bme680_bsec::BME680BSECComponent"
                },
                "temperature": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "pressure": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "humidity": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "gas_resistance": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the gas sensor.\n  * **name** (**Required**, string): The name for the gas resistance sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "iaq": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the IAQ sensor.\n  * **name** (**Required**, string): The name for the IAQ sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "iaq_accuracy": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the numeric IAQ accuracy sensor.\n  * **name** (**Required**, string): The name for the IAQ accuracy sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "co2_equivalent": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the CO2 equivalent sensor.\n  * **name** (**Required**, string): The name for the CO2 equivalent sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "breath_voc_equivalent": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the Breath VOC equivalent humidity sensor.\n  * **name** (**Required**, string): The name for the Breath VOC equivalent sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bmp085" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "bmp085::BMP085Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`.\n\n\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The BMP085 sensor platform allows you to use your BMP085 ([datasheet](https://www.sparkfun.com/datasheets/Components/General/BST-BMP085-DS000-05.pdf), [Adafruit](https://www.adafruit.com/product/391)) and BMP180 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf), [Adafruit](https://www.adafruit.com/product/1603)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#bmp085-temperature-pressure-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bmp280" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "bmp280::BMP280Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor-bmp280-temperature",
                      "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor-bmp280-pressure",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    },
                    "iir_filter": {
                      "enum": ["OFF", "2X", "4X", "8X", "16X"],
                      "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `2x`, `4x`, `16x`. Defaults to `OFF`.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`. Another address can be `0x76`.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `bmp280` sensor platform allows you to use your BMP280 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BMP280-DS001-11.pdf), [Adafruit](https://www.adafruit.com/product/2651)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#bmp280-temperature-pressure-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "b_parasite" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "b_parasite::BParasite"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "moisture": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "[b-parasite](https://github.com/rbaron/b-parasite) is an open source soil moisture and ambient temperature/humidity sensor.\n\n*See also: [b-parasite](https://esphome.io/components/sensor/b_parasite.html#b-parasite)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ccs811" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ccs811::CCS811Component"
                    },
                    "eco2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The eCO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    },
                    "tvoc": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the total volatile organic compound sensor in parts per billion (ppb).\n  * **name** (**Required**, string): The name for the tvoc sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    },
                    "baseline": {
                      "type": "string",
                      "markdownDescription": "**int**: The baseline value for the unit, for calibration purposes. See [Calibrating Baseline](https://esphome.io/components/sensor/ccs811.html#ccs811-calibrating) for more info.\n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    },
                    "temperature": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Give an external temperature sensor ID here. This can improve the sensor\u2019s internal calculations.\n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    },
                    "humidity": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Give an external humidity sensor ID here. This can improve the sensor\u2019s internal calculations.\n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) address of the sensor.\n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `ccs811` sensor platform allows you to use CCS811 CO_2 and volatile organic compound sensors ([Adafruit](https://www.adafruit.com/product/3566)) with ESPHome.\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#ccs811-co-2-and-volatile-organic-compound-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "cse7766" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "cse7766::CSE7766Component"
                    },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "The `cse7766` sensor platform allows you to use your CSE7766 voltage/current and power sensors ([datasheet](http://dl.itead.cc/S31/CSE7766.pdf)) sensors with ESPHome. This sensor is commonly found in Sonoff POW R2. CSE7759B is similar to CSE7766 and works with this integration.\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#cse7766-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ct_clamp" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ct_clamp::CTClampSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "voltage_sampler::VoltageSampler",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The source sensor to measure voltage values from.\n\n\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#configuration-variables)*"
                    },
                    "sample_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "200ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time duration to sample the current clamp with. Higher values can increase accuracy. Defaults to `200ms` which would be 10 whole cycles on a 50Hz system.\n\n\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The Current Transformer Clamp (`ct_clamp`) sensor allows you to hook up a CT Clamp to an analog voltage sensor (like the [ADC sensor](https://esphome.io/components/sensor/adc.html)) and convert the readings to measured single phase AC current.\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#ct-clamp-current-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "custom::CustomSensorConstructor"
                },
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the sensor(s).\n\n\n\n*See also: [Custom Sensor Component](https://esphome.io/components/sensor/custom.html#configuration-variables)*"
                },
                "sensors": {
                  "anyOf": [
                    { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" }
                    }
                  ],
                  "markdownDescription": "**list**: A list of sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Custom Sensor Component](https://esphome.io/components/sensor/custom.html#configuration-variables)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "While I do try to keep the ESPHome configuration options as stable as possible and back-port them, the ESPHome API is less stable. If something in the APIs needs to be changed in order for something else to work, I will do so.\n\n*See also: [Custom Sensor Component](https://esphome.io/components/sensor/custom.html#custom-sensor-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "dallas" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "dallas::DallasTemperatureSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#id1)*"
                    },
                    "dallas_id": {
                      "type": "string",
                      "id_type": "dallas::DallasComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the [dallas hub](https://esphome.io/components/sensor/dallas.html#dallas-component). Use this if you have multiple dallas hubs.\n\n\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#id1)*"
                    },
                    "address": {
                      "type": "string",
                      "markdownDescription": "**int**: The address of the sensor. Use either this option or index.\n\n\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#id1)*"
                    },
                    "index": {
                      "type": "number",
                      "markdownDescription": "**int**: The index of the sensor starting with 0. So the first sensor will for example have index 0. [It\u2019s recommended to use address instead](https://esphome.io/components/sensor/dallas.html#dallas-getting-ids).\n\n\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#id1)*"
                    },
                    "resolution": {
                      "type": "number",
                      "default": 12,
                      "markdownDescription": "**int**: An optional resolution from 8 to 12. Higher means more accurate. Defaults to the maximum for most Dallas temperature sensors: 12.\n\n\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `dallas` sensor allows you to use DS18B20 and similar sensors. First, you need to define a [dallas sensor component](https://esphome.io/components/sensor/dallas.html#dallas-component). The dallas sensor component (or \u201chub\u201d) is an internal model that defines which pins the DS18B20 sensors are connected to. This is because with these sensors you can actually connect multiple sensors to a single pin and use them all at once.\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "dht" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "dht::DHT" },
                    "pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin where the DHT bus is connected.\n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    },
                    "model": {
                      "enum": [
                        "AUTO_DETECT",
                        "DHT11",
                        "DHT22",
                        "AM2302",
                        "RHT03",
                        "SI7021",
                        "DHT22_TYPE2"
                      ],
                      "markdownDescription": "**int**: Manually specify the DHT model, can be one of `AUTO_DETECT`, `DHT11`, `DHT22`, `DHT22_TYPE2`, `AM2302`, `RHT03`, `SI7021` and helps with some connection issues. Defaults to `AUTO_DETECT`.  Auto detection doesn\u2019t work for the SI7021 chip.\n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The DHT Temperature+Humidity sensor allows you to use your DHT11 ([datasheet](https://akizukidenshi.com/download/ds/aosong/DHT11.pdf), [Adafruit](https://www.adafruit.com/product/386)), DHT22 ([datasheet](https://www.sparkfun.com/datasheets/Sensors/Temperature/DHT22.pdf), [Adafruit](https://www.adafruit.com/product/385)), AM2302 ([datasheet](https://cdn-shop.adafruit.com/datasheets/Digital+humidity+and+temperature+sensor+AM2302.pdf), [Adafruit](https://www.adafruit.com/product/393)), RHT03 ([datasheet](https://cdn.sparkfun.com/datasheets/Sensors/Weather/RHT03.pdf), [SparkFun](https://cdn.sparkfun.com/datasheets/Sensors/Weather/RHT03.pdf)) and SI7021 (one wire Sonoff version) ([datasheet](https://cdn.sparkfun.com/assets/b/1/b/8/5/Si7021-A20.pdf), [SparkFun](https://cdn.sparkfun.com/assets/b/1/b/8/5/Si7021-A20.pdf)) sensors with ESPHome.\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#dht-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "dht12" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "dht12::DHT12Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `dht12` Temperature+Humidity sensor allows you to use your DHT12 ([datasheet](http://www.robototehnika.ru/file/DHT12.pdf), [electrodragon](http://www.electrodragon.com/product/dht12/)) I\u00b2C-based sensor with ESPHome. This sensor is also called AM2320 by some sellers.\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#dht12-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "duty_cycle" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "duty_cycle::DutyCycleSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to observe for the duty cycle.\n\n\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The duty cycle sensor allows you to measure for what percentage of time a signal on a GPIO pin is HIGH or LOW.\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#duty-cycle-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "esp32_hall" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `esp32_hall` sensor platform allows you to use the integrated [hall effect sensor](https://en.wikipedia.org/wiki/Hall_effect_sensor) of the ESP32 chip to measure the magnitude and direction of magnetic field around the chip (with quite poor accuracy).\n\n*See also: [ESP32 Hall Sensor](https://esphome.io/components/sensor/esp32_hall.html#esp32-hall-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ezo" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `ezo` sensor platform allows you to use your EZO sensor circuits with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [EZO sensor circuits](https://esphome.io/components/sensor/ezo.html#ezo-sensor-circuits)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "fingerprint_grow" } }
            },
            "then": {
              "properties": {
                "fingerprint_grow_id": {
                  "type": "string",
                  "id_type": "fingerprint_grow::FingerprintGrowComponent"
                },
                "fingerprint_count": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                },
                "status": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                "capacity": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                "security_level": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                },
                "last_finger_id": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                },
                "last_confidence": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "**fingerprint_count**: The number of enrolled fingerprints stored on the reader.\n\n*See also: [fingerprint_grow Sensor](https://esphome.io/components/fingerprint_grow.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hdc1080" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "hdc1080::HDC1080Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The HDC1080 Temperature+Humidity sensor allows you to use your HDC1080 ([datasheet](http://www.ti.com/lit/ds/symlink/hdc1080.pdf), [Adafruit](https://www.adafruit.com/product/2635)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#hdc1080-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hlw8012" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "hlw8012::HLW8012Component"
                    },
                    "sel_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin SEL is connected to.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "cf_pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin CF is connected to.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "cf1_pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin CF1 is connected to.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total energy value of the sensor in Wh. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "current_resistor": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.001,
                      "markdownDescription": "**float**: The value of the shunt resistor for current measurement. Defaults to the Sonoff POW\u2019s value `0.001 ohm`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "voltage_divider": {
                      "type": "number",
                      "default": 2351,
                      "markdownDescription": "**float**: The value of the voltage divider on the board as `(R_upstream + R_downstream) / R_downstream`. Defaults to the Sonoff POW\u2019s value `2351`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "change_mode_every": {
                      "type": "number",
                      "default": 8,
                      "markdownDescription": "**int**: After how many updates to cycle between the current/voltage measurement mode. Note that the first value after switching is discarded because it is often inaccurate. Defaults to `8`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "initial_mode": {
                      "enum": ["current", "voltage"],
                      "markdownDescription": "**string**: The initial measurement mode. Defaults to `VOLTAGE`. Possible initial measurement modes are `VOLTAGE` or `CURRENT`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `hlw8012` sensor platform allows you to use your HLW8012 voltage/current and power sensors ([datasheet](https://github.com/xoseperez/hlw8012/blob/master/docs/HLW8012.pdf)) sensors with ESPHome. This sensor is commonly found in Sonoff POWs. CSE7759 and BL0937 are similar to HLW8012 and work with this integration. Beware that CSE7759B is different and should be used with the [CSE7766](https://esphome.io/components/sensor/cse7766.html) integration.\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#hlw8012-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hm3301" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "hm3301::HM3301Component"
                    },
                    "pm_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 1.0\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
                    },
                    "aqi": {
                      "$ref": "#/definitions/sensor-hm3301-aqi",
                      "markdownDescription": "AQI sensor. Requires the `pm_2_5` and `pm_10_0` sensors defined. See below.\n  * **calculation_type** (**Required**): One of: `AQI` or `CAQI`.\n  \n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `HM3301` sensor platform allows you to use your HM3301 particulate matter sensor ([more info](http://wiki.seeedstudio.com/Grove-Laser_PM2.5_Sensor-HM3301)) sensors with ESPHome.\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#the-grove-laser-pm2-5-sensor-hm3301)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hmc5883l" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "hmc5883l::HMC5883LComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x1E`.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "oversampling": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "1x",
                      "markdownDescription": "Number of readings to average over for each sample. One of `1x`, `2x`, `4x`, `8x`. Defaults to `1x`.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "range": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "130\u00b5T",
                      "markdownDescription": "Select a range / gain preset. This does not affect the scale of the values published but allows one to avoid overflows at the cost of reading resolution. Supported values are 88\u00b5T, 130\u00b5T, 190\u00b5T, 250\u00b5T, 400\u00b5T, 470\u00b5T, 560\u00b5T, 810\u00b5T. Default range is \u00b1130\u00b5T.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the X-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the Y-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the Z-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "heading": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The heading of the sensor in degrees. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `hmc5883l` allows you to use your HMC5883L triple-axis magnetometers ([datasheet](https://cdn-shop.adafruit.com/datasheets/HMC5883L_3-Axis_Digital_Compass_IC.pdf), [Adafruit](https://www.adafruit.com/product/1746)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#hmc5883l-magnetometer)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "homeassistant" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "homeassistant::HomeassistantSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#configuration-variables)*"
                    },
                    "entity_id": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The entity ID to import from Home Assistant.\n\n\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#configuration-variables)*"
                    },
                    "attribute": { "type": "string" },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `homeassistant` sensor platform allows you to create sensors that import states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html).\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#home-assistant-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "htu21d" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "htu21d::HTU21DComponent"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [HTU21D Temperature+Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [HTU21D Temperature+Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HTU21D Temperature+Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The HTU21D Temperature+Humidity sensor allows you to use your HTU21D ([Adafruit](https://www.adafruit.com/product/1899)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HTU21D Temperature+Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#htu21d-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hx711" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "hx711::HX711Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    },
                    "dout_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DOUT (or DAT) pin.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    },
                    "clk_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CLK pin.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    },
                    "gain": { "enum": [128, 32, 64] },
                    "name": {
                      "markdownDescription": "**string**: The name for the load cell sensor.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `hx711` sensor platform allows you to use your HX711 load cell amplifier ([datasheet](https://www.mouser.com/ds/2/813/hx711_english-1022875.pdf), [SparkFun](https://www.sparkfun.com/products/13879)) with ESPHome\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#hx711-load-cell-amplifier)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ina219" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ina219::INA219Component"
                    },
                    "bus_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the bus voltage (voltage of the high side contact) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "shunt_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the shunt voltage (voltage across the shunt resistor) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "shunt_resistance": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.1,
                      "markdownDescription": "**float**: The value of the shunt resistor on the board for current calculation. Defaults to `0.1 ohm`.\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "max_voltage": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 32.0,
                      "markdownDescription": "**float**: The maximum bus voltage you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `32V` (the max).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "max_current": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 3.2,
                      "markdownDescription": "**float**: The maximum current you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `3.2A`.\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x40`.\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `ina219` sensor platform allows you to use your INA219 High Side DC Current Sensor ([datasheet](https://cdn-learn.adafruit.com/downloads/pdf/adafruit-ina219-current-sensor-breakout.pdf), [Adafruit](https://www.adafruit.com/product/904)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#ina219-dc-current-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ina226" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ina226::INA226Component"
                    },
                    "bus_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the bus voltage (voltage of the high side contact) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "shunt_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the shunt voltage (voltage across the shunt resistor) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "shunt_resistance": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.1,
                      "markdownDescription": "**float**: The value of the shunt resistor on the board for current calculation. Defaults to `0.1 ohm`.\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "max_current": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 3.2,
                      "markdownDescription": "**float**: The maximum current you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `3.2A`.\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x40`.\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `ina226` sensor platform allows you to use your INA226 DC Current and Power Sensor ([datasheet](http://www.ti.com/lit/ds/symlink/ina226.pdf), [eBay](https://www.ebay.com/sch/i.html?_nkw=INA226)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#ina226-dc-current-and-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ina3221" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ina3221::INA3221Component"
                    },
                    "channel_1": {
                      "$ref": "#/definitions/sensor-ina3221-channel_1",
                      "markdownDescription": "The configuration options for the 1st channel.\n  * **shunt_resistance** (*Optional*, float): The value of the shunt resistor on this channel for current calculation. Defaults to `0.1 ohm`.\n  \n  * **current** (*Optional*): Use the current value on this channel in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **power** (*Optional*): Use the power value on this channel in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **bus_voltage** (*Optional*): Use the bus voltage (voltage of the high side contact) value on this channel in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **shunt_voltage** (*Optional*): Use the shunt voltage (voltage across the shunt resistor) value on this channel in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    },
                    "channel_2": {
                      "$ref": "#/definitions/sensor-ina3221-channel_1",
                      "markdownDescription": "The configuration options for the 2nd channel. Same options as 1st channel.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    },
                    "channel_3": {
                      "$ref": "#/definitions/sensor-ina3221-channel_1",
                      "markdownDescription": "The configuration options for the 3rd channel. Same options as 1st channel.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x40`.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `ina3221` sensor platform allows you to use your INA3221 3-Channel DC Current Sensor ([datasheet](http://www.ti.com/lit/ds/symlink/ina3221.pdf), [switchdoc](http://www.switchdoc.com/ina3221-breakout-board/)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#ina3221-3-channel-dc-current-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "inkbird_ibsth1_mini" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "inkbird_ibsth1_mini::InkbirdIBSTH1_MINI"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address of the Inkbird IBS-TH1 Mini device.\n\n\n\n*See also: [Inkbird IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Inkbird IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Inkbird IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the battery level sensor\n  * **name** (**Required**, string): The name for the battery level sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Inkbird IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `inkbird_ibsth1_mini` sensor platform lets you track the output of Inkbird IBS-TH1 Mini Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the temperature, humidity and the battery level of the IBS-TH1 Mini device every time the sensor sends out a BLE broadcast. Note that contrary to other implementations, ESPHome can track as many IBS-TH1 Mini devices at once as you want.\n\n*See also: [Inkbird IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#inkbird-ibs-th1-mini-ble-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "integration" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "integration::IntegrationSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the sensor to integrate over time.\n\n\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#configuration-variables)*"
                    },
                    "time_unit": {
                      "enum": ["ms", "s", "min", "h", "d"],
                      "markdownDescription": "**string**: The time unit to integrate with, one of `ms`, `s`, `min`, `h` or `d`.\n\n\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#configuration-variables)*"
                    },
                    "integration_method": {
                      "enum": ["trapezoid", "left", "right"],
                      "markdownDescription": "**string**: The integration method to use. One of `trapezoid`, `left` or `right`. Defaults to `trapezoid`.\n\n\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#configuration-variables)*"
                    },
                    "restore": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to store the intermediate result on the device so that the value can be restored upon power cycle or reboot. Warning: this option can wear out your flash. Defaults to `false`.\n\n\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the integration sensor.\n\n\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `integration` sensor is a helper sensor that can integrate values from other sensors over time. This can for example be useful to integrate the values of a water flow sensor (in m^3/s) over time (result is in m^3).\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#integration-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max31855" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "max31855::MAX31855Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "reference_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "**[Sensor](https://esphome.io/components/sensor/index.html#config-sensor)**: Access the internal temperature sensor of the MAX31855. Requires a **name** and/or **id**.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select pin of the SPI interface.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max31855` temperature sensor allows you to use your MAX31855 thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31855.pdf)) with ESPHome\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#max31855-k-type-thermocouple-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max31856" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "max31856::MAX31856Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "mains_filter": {
                      "enum": ["50HZ", "60HZ"],
                      "markdownDescription": "**string**: The mains power frequency to reject (`50 Hz` or `60 Hz`). Defaults to `60 Hz`.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select pin of the SPI interface.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `MAX31856` temperature sensor allows you to use your MAX31856 Thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31856.pdf)) with ESPHome\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#max31856-thermocouple-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max31865" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "max31865::MAX31865Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "reference_resistance": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: Reference resistor on the PCB. Adafruit\u2019s PT100 (#3328) uses 430 \u03a9, their PT1000 (#3648) uses 4300 \u03a9.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "rtd_nominal_resistance": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: Nominal resistance of the RTD at 0\u00b0C. PT100 is 100 \u03a9, PT1000 is 1000 \u03a9.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "mains_filter": {
                      "enum": ["50HZ", "60HZ"],
                      "markdownDescription": "**string**: The mains power frequency to reject (`50 Hz` or `60 Hz`). Defaults to `60 Hz`.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "rtd_wires": {
                      "type": "number",
                      "default": 4,
                      "markdownDescription": "**int**: The number of RTD wires. Be sure to solder board jumpers to match! Defaults to `4`.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select pin of the SPI interface.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max31865` temperature sensor allows you to use your max31865 RTD temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31865.pdf)) with ESPHome\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#max31865-platinum-rtd-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max6675" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max6675` temperature sensor allows you to use your MAX6675 thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX6675.pdf), [SainSmart](https://www.sainsmart.com/products/max6675-module-k-type-thermocouple-thermocouple-sensor-temperature-0-1024-for-arduino)) with ESPHome\n\n*See also: [MAX6675 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max6675.html#max6675-k-type-thermocouple-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mcp3008" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "mcp3008::MCP3008Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the parent MCP3008 component.\n\n\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
                    },
                    "mcp3008_id": {
                      "type": "string",
                      "id_type": "mcp3008::MCP3008"
                    },
                    "number": {
                      "type": "number",
                      "markdownDescription": "**int**: The pin number of the MCP3008\n\n\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
                    },
                    "reference_voltage": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "3.3V",
                      "markdownDescription": "**float**: The reference voltage. Defaults to `3.3V`.\n\n\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `1s`.\n\n\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `mcp3008` sensor allows you to use your MCP3008 10-Bit A/D Converter sensors with ESPHome. First, setup a [MCP3008 Hub](https://esphome.io/components/sensor/mcp3008.html#mcp3008-component) for your MCP3008 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mcp9808" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The MCP9808 Temperature sensor allows you to use your MCP9808 ([datasheet](http://ww1.microchip.com/downloads/en/DeviceDoc/25095A.pdf), [Adafruit](https://www.adafruit.com/product/1782)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MCP9808 Temperature Sensor](https://esphome.io/components/sensor/mcp9808.html#mcp9808-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mhz19" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "mhz19::MHZ19Component",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for actions.\n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The CO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor. Please note that this is not officially documented in the datasheet and seems to be quite inaccurate.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "automatic_baseline_calibration": {
                      "type": "boolean",
                      "markdownDescription": "**boolean**: MH-Z19 has automatic calibration procedure. The automatic calibration cycle is every 24 hours after powered on. Set this value to `false` to disable ABC on boot (it\u2019s better if you use sensor indoor). Set this value to `true` to enable ABC on boot. Doesn\u2019t send calibration command if not set (default sensor logic will be used).\n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "The `mhz19` sensor platform allows you to use MH-Z19 CO_2 and temperature sensors ([refspace](https://revspace.nl/MHZ19)) with ESPHome.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mh-z19-co-2-and-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mpu6050" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "mpu6050::MPU6050Component",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "accel_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the X-Axis of the Accelerometer. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "accel_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the Y-Axis of the Accelerometer. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "accel_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the Z-Axis of the Accelerometer. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "gyro_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the X-Axis of the Gyroscope. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "gyro_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the Y-Axis of the Gyroscope. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "gyro_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the Z-Axis of the Gyroscope. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the internal temperature of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x68`.\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `mpu6050` sensor platform allows you to use your MPU6050 Accelerometer/Gyroscope ([datasheet](https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf), [SparkFun](https://www.sparkfun.com/products/11028)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#mpu6050-accelerometer-gyroscope-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "mqtt_subscribe" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "mqtt_subscribe::MQTTSubscribeSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "mqtt_parent_id": {
                      "type": "string",
                      "id_type": "mqtt::MQTTClientComponent"
                    },
                    "topic": {
                      "type": "string",
                      "markdownDescription": "**string**: The MQTT topic to listen for numeric messages.\n\n\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "qos": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0,
                      "markdownDescription": "**int**: The MQTT QoS to subscribe with. Defaults to `0`.\n\n\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `mqtt_subscribe` sensor platform allows you to get external data into ESPHome. The sensor will subscribe to messages on the given MQTT topic and parse each message into a floating point number.\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#mqtt-subscribe-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ms5611" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ms5611::MS5611Component"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`.\n\n\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `ms5611` sensor platform allows you to use your MS5611 atmospheric pressure sensors ([hobbytronics](http://www.hobbytronics.co.uk/ms5611-altitude-sensor)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#ms5611-atmospheric-pressure-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ntc" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ntc::NTC",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [NTC Sensor](https://esphome.io/components/sensor/ntc.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor to read the resistance values from to convert to temperature readings.\n\n\n\n*See also: [NTC Sensor](https://esphome.io/components/sensor/ntc.html#configuration-variables)*"
                    },
                    "calibration": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The calibration parameters of the sensor - see above for more details.\n\n\n\n*See also: [NTC Sensor](https://esphome.io/components/sensor/ntc.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [NTC Sensor](https://esphome.io/components/sensor/ntc.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ntc` platform is a helper sensor that allows you to convert resistance readings from a NTC thermistor to temperature readings.\n\n*See also: [NTC Sensor](https://esphome.io/components/sensor/ntc.html#ntc-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pid" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "pid::PIDClimateSensor"
                    },
                    "climate_id": {
                      "type": "string",
                      "id_type": "pid::PIDClimate",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the pid climate to get the values from.\n\n\n\n*See also: [pid Sensor](https://esphome.io/components/climate/pid.html#pid-sensor)*"
                    },
                    "type": {
                      "enum": [
                        "RESULT",
                        "ERROR",
                        "PROPORTIONAL",
                        "INTEGRAL",
                        "DERIVATIVE",
                        "HEAT",
                        "COOL",
                        "KP",
                        "KI",
                        "KD"
                      ],
                      "markdownDescription": "**string**: The value to monitor. One of\n  * `RESULT` - The resulting value (sum of P, I, and D terms).\n  \n  * `ERROR` - The calculated error (setpoint - process_variable)\n  \n  * `PROPORTIONAL` - The proportional term of the PID controller.\n  \n  * `INTEGRAL` - The integral term of the PID controller.\n  \n  * `DERIVATIVE` - The derivative term of the PID controller.\n  \n  * `HEAT` - The resulting heating power to the supplied to the `heat_output`.\n  \n  * `COOL` - The resulting cooling power to the supplied to the `cool_output`.\n  \n  * `KP` - The current factor for the proportional term of the PID controller.\n  \n  * `KI` - The current factor for the integral term of the PID controller.\n  \n  * `KD` - The current factor for the differential term of the PID controller.\n  \n  \n\n\n\n*See also: [pid Sensor](https://esphome.io/components/climate/pid.html#pid-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor\n\n\n\n*See also: [pid Sensor](https://esphome.io/components/climate/pid.html#pid-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "Additionally, the PID climate platform provides an optional sensor platform to monitor the calculated PID parameters to help finding good PID values.\n\n*See also: [pid Sensor](https://esphome.io/components/climate/pid.html#pid-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pmsx003" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "pmsx003::PMSX003Component"
                    },
                    "type": { "enum": ["PMSX003", "PMS5003T", "PMS5003ST"] },
                    "pm_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 1.0\u00b5m in \u00b5g per cubic meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the temperature value in \u00b0C for the `PMS5003T` and `PMS5003ST`. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the humidity value in % for the `PMS5003T` and `PMS5003ST`. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "formaldehyde": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the formaldehyde (HCHO) concentration in \u00b5g per cubic meter for the `PMS5003ST`. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "The `pmsx003` sensor platform allows you to use your PMS5003, PMS7003, \u2026 particulate matter ([datasheet](http://www.aqmd.gov/docs/default-source/aq-spec/resources-page/plantower-pms5003-manual_v2-3.pdf)) sensors with ESPHome.\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#pmsx003-particulate-matter-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "pulse_counter" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "pulse_counter::PulseCounterSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to count pulses on.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "count_mode": {
                      "properties": {
                        "rising_edge": {
                          "enum": ["DISABLE", "INCREMENT", "DECREMENT"],
                          "markdownDescription": "What to do when a rising edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `INCREMENT`.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                        },
                        "falling_edge": {
                          "enum": ["DISABLE", "INCREMENT", "DECREMENT"],
                          "markdownDescription": "What to do when a falling edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `DISABLE`.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                        }
                      },
                      "type": ["object", "null"],
                      "default": {
                        "rising_edge": "INCREMENT",
                        "falling_edge": "DISABLE"
                      },
                      "markdownDescription": "Configure how the counter should behave on a detected rising edge/falling edge.\n  * **rising_edge** (*Optional*): What to do when a rising edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `INCREMENT`.\n  \n  * **falling_edge** (*Optional*): What to do when a falling edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `DISABLE`.\n  \n  \n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "internal_filter": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "13us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: If a pulse shorter than this time is detected, it\u2019s discarded and no pulse is counted. Defaults to `13us`. On the ESP32, this value can not be higher than `13us`, for the ESP8266 you can use larger intervals too. If you enable this, set up the `count_mode` to increase on the falling edge, not leading edge. For S0 pulse meters that are used to meter power consumption 50-100 ms is a reasonable value.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "total": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Report the total number of pulses.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The pulse counter sensor allows you to count the number of pulses and the frequency of a signal on any pin.\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#pulse-counter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pulse_meter" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "pulse_meter::PulseMeterSensor"
                    },
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to count pulses on.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    },
                    "internal_filter": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "13us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: If a pulse shorter than this time is detected, it\u2019s discarded and no pulse is counted. Defaults to `13us`. For S0 pulse meters that are used to meter power consumption 50-100 ms is a reasonable value.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    },
                    "timeout": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "5min",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: If we don\u2019t see a pulse for this length of time, we assume 0 pulses/sec. Defaults to `5 min`.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    },
                    "total": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "**[Sensor](https://esphome.io/components/sensor/index.html#config-sensor)**: An additional sensor that outputs the total number of pulses counted.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The pulse meter sensor allows you to count the number and frequency of pulses on any pin. It is intended to be a drop-in replacement for [integration sensor](https://esphome.io/components/sensor/pulse_counter.html), but offering better resolution. It measures the time between rising edges on a pin, for each pulse it outputs the frequency in pulses/min.\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#pulse-meter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pulse_width" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "pulse_width::PulseWidthSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to observe for the pulse width.\n\n\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `pulse_width` sensor allows you to measure how long a given digital signal is HIGH. For example this can be used to measure PWM signals to transmit some value over a simple protocol.\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#pulse-width-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pzem004t" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "pzem004t::PZEM004T" },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    },
                    "energy": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#peacefair-pzem-004t-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pzemac" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "pzemac::PZEMAC" },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) energy value of the sensor in watt*hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the frequency value of the sensor in hertz. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "power_factor": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power factor value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "modbus_id": {
                      "type": "string",
                      "id_type": "modbus::Modbus"
                    },
                    "address": {
                      "type": "string",
                      "default": "1",
                      "markdownDescription": "**int**: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`.\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#peacefair-pzem-004t-v3-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pzemdc" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "pzemdc::PZEMDC" },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    },
                    "modbus_id": {
                      "type": "string",
                      "id_type": "modbus::Modbus"
                    },
                    "address": {
                      "type": "string",
                      "default": "1",
                      "markdownDescription": "**int**: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`.\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#peacefair-pzem-00x-dc-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "qmc5883l" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "qmc5883l::QMC5883LComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "markdownDescription": "**int**: Manually specify the  I\u00b2c address of the sensor. Defaults to `0x1E`.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "range": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "200\u00b5T",
                      "markdownDescription": "The range parameter for the sensor.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "oversampling": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "512x",
                      "markdownDescription": "The oversampling parameter for the sensor.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the X-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the Y-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the Z-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "heading": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The heading of the sensor in degrees. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `qmc5883l` allows you to use your QMC5883L triple-axis magnetometers ([datasheet](http://wiki.sunfounder.cc/images/7/72/QMC5883L-Datasheet-1.0.pdf)) with ESPHome. This sensor is very simular to the [HMC5883L](https://esphome.io/components/sensor/hmc5883l.html#hmc5883l) sensor and is oftern found as a knock off replacement. The QMC5883L sensor preforms on par to the HMC5883L sensor, though the congiuration differs. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#qmc5883l-magnetometer)*"
          },
          {
            "if": { "properties": { "platform": { "const": "resistance" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "resistance::ResistanceSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#configuration-variables)*"
                    },
                    "sensor": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor to read the voltage values from to convert to resistance readings.\n\n\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#configuration-variables)*"
                    },
                    "configuration": {
                      "enum": ["DOWNSTREAM", "UPSTREAM"],
                      "markdownDescription": "**string**: The type of circuit, one of `DOWNSTREAM` or `UPSTREAM`.\n\n\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#configuration-variables)*"
                    },
                    "resistor": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The value of the resistor with a constant value.\n\n\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#configuration-variables)*"
                    },
                    "reference_voltage": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "3.3V",
                      "markdownDescription": "**float**: The reference voltage. Defaults to `3.3V`.\n\n\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `resistance` platform is a helper sensor that allows you to convert readings from a voltage sensor (such as the [ADC Sensor](https://esphome.io/components/sensor/adc.html)) into resistance readings in \u2126 (ohm).\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#resistance-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "rotary_encoder" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "rotary_encoder::RotaryEncoderSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "pin_a": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The first pin for determining the step value. Must not be a pin from an external I/O expander.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "pin_b": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The second pin for determining the step value. Must not be a pin from an external I/O expander.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "pin_reset": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: An optional pin that resets the step value. This is useful with rotary encoders that have have a third pin. Defaults to no reset pin.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "resolution": {
                      "enum": [1, 2, 4],
                      "markdownDescription": "**string**: The resolution of the sensor, this controls how many pulses are generated by one step:\n  * 1 (default)\n  \n  * 2\n  \n  * 4\n  \n  \n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "min_value": {
                      "type": "number",
                      "markdownDescription": "**int**: The minimum value this rotary encoder will go to, turning the knob further will not decrease the number. Defaults to no minimum.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "max_value": {
                      "type": "number",
                      "markdownDescription": "**int**: The maximum value this rotary encoder will go to, turning the knob further will not increase the number. Defaults to no maximum.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "on_clockwise": {
                      "$ref": "#/definitions/sensor-rotary_encoder-on_clockwise",
                      "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: Actions to be performed when the knob is turned clockwise. See [on_clockwise and on_anticlockwise Triggers](https://esphome.io/components/sensor/rotary_encoder.html#sensor-rotary-encoder-triggers).\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "on_anticlockwise": {
                      "$ref": "#/definitions/sensor-rotary_encoder-on_anticlockwise",
                      "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: Actions to be performed when the knob is turned anticlockwise. See [on_clockwise and on_anticlockwise Triggers](https://esphome.io/components/sensor/rotary_encoder.html#sensor-rotary-encoder-triggers).\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the rotary encoder sensor.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `rotary_encoder` sensor platform allows you to use any continuous-rotation rotary encoders with ESPHome. These devices usually have two pins with which they encode the rotation. Every time the knob of the rotary encoder is turned, the signals of the two pins go HIGH and LOW in turn. See [this Arduino article](https://playground.arduino.cc/Main/RotaryEncoders) to gain a better understanding of these sensors.\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#rotary-encoder-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ruuvitag" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "ruuvitag::RuuviTag" },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address of the RuuviTag device.\n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "acceleration": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the acceleration sensor.\n  * **name** (**Required**, string): The name for the acceleration sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "acceleration_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the acceleration x sensor.\n  * **name** (**Required**, string): The name for the acceleration x sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "acceleration_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the acceleration y sensor.\n  * **name** (**Required**, string): The name for the acceleration y sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "acceleration_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the acceleration z sensor.\n  * **name** (**Required**, string): The name for the acceleration z sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "battery_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the battery voltage sensor.\n  * **name** (**Required**, string): The name for the battery voltage sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "tx_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the transmit power sensor\n  * **name** (**Required**, string): The name for the transmit power sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used.\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "movement_counter": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the movement count sensor\n  * **name** (**Required**, string): The name for the movement count sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used.\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "measurement_sequence_number": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the measurment sequence number sensor\n  * **name** (**Required**, string): The name for the measurment sequence number sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used.\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ruuvitag` sensor platform lets you track the output of RuuviTag Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the temperature, humidity, acceleration and battery voltage of a RuuviTag device with RAWv1 protocol every time the sensor sends out a BLE broadcast. RAWv2 protocol is supported too. Then tx power, movement count and measurement sequence number are also tracked.\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#ruuvitag-open-source-ble-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "scd30" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "scd30::SCD30Component"
                    },
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the CO\u2082 sensor.\n  * **name** (**Required**, string): The name for the CO\u2082eq sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the Temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the Humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "automatic_self_calibration": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**bool**: Whether to enable automatic self calibration (ASC). Defaults to `true`.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "altitude_compensation": {
                      "type": "number",
                      "markdownDescription": "**int**: Enable compensating deviations due to current altitude (in metres). Notice: setting *altitude_compensation* is ignored if *ambient_pressure_compensation* is set.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "ambient_pressure_compensation": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0,
                      "markdownDescription": "**int**: Enable compensation of measured CO\u2082 values based on given ambient pressure in mBar.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "temperature_offset": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: Temperature and humidity offsets may occur when operating the sensor in end-customer devices. This variable allows the compensation of those effects by setting a temperature offset.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x61`.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `scd30` sensor platform  allows you to use your Sensiron SCD30 CO\u2082 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9.5_CO2/Sensirion_CO2_Sensors_SCD30_Datasheet.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#scd30-co2-temperature-and-relative-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sds011" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sds011::SDS011Component"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    },
                    "rx_only": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether the sensor is connected **only by RX pin** to the UART bus. Since the SDS011 can not be configured in RX-only mode, `update_interval` has no effect and the sensor must be configured separately. Defaults to `false`.\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor in minutes. This affects the working period of the SDS011 sensor. Defaults to `0min`.\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "The `sds011` sensor platform allows you to use SDS011 particulate matter sensors ([datasheet](https://nettigo.pl/attachments/398)) with ESPHome.\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#sds011-particulate-matter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "senseair" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "senseair::SenseAirComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for actions.\n\n\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#configuration-variables)*"
                    },
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The CO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "The `senseair` sensor platform allows you to use SenseAir CO_2 sensor ([website](https://senseair.com/products/size-counts/senseair-s8-residential/)) with ESPHome.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-co-2-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sgp30" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sgp30::SGP30Component"
                    },
                    "eco2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the CO\u2082eq. sensor.\n  * **name** (**Required**, string): The name for the CO\u2082eq sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "tvoc": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the total Volatile Organic Compounds sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "baseline": {
                      "$ref": "#/definitions/sensor-sgp30-baseline",
                      "markdownDescription": "The block containing baselines for calibration purposes. See [Calibrating Baseline](https://esphome.io/components/sensor/sgp30.html#sgp30-calibrating) for more info.\n  * **eco2_baseline** (**Required**, int): The eCO2 baseline for calibration purposes.\n  \n  * **tvoc_baseline** (**Required**, int): The TVOC baseline for calibration purposes.\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "compensation": {
                      "$ref": "#/definitions/sensor-sgp30-compensation",
                      "markdownDescription": "The block containing sensors used for compensation.\n  * **temperature_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external temperature sensor ID here. This can improve the sensor\u2019s internal calculations.\n  \n  * **humidity_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external humidity sensor ID here. This can improve the sensor\u2019s internal calculations.\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x58`.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `sgp30` sensor platform  allows you to use your Sensiron SGP30 multi-pixel gas ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9_Gas_Sensors/Datasheets/Sensirion_Gas_Sensors_SGP30_Datasheet.pdf)) sensors or the SVM30 breakout-boards  ([product page](https://www.sensirion.com/en/environmental-sensors/gas-sensors/multi-gas-humidity-temperature-module-svm30/)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#sgp30-co2-and-volatile-organic-compound-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sgp40" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sgp40::SGP40Component",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    },
                    "store_baseline": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean **: Stores and retrieves the baseline infortmation for quicker startups. Defaults to `True`\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    },
                    "voc_baseline": { "type": "string" },
                    "compensation": {
                      "$ref": "#/definitions/sensor-sgp30-compensation",
                      "markdownDescription": "The block containing sensors used for compensation. If not set defaults will be used.\n  * **temperature_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external temperature sensor ID here. This can improve the sensor\u2019s internal calculations. Defaults to `25`\n  \n  * **humidity_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external humidity sensor ID here. This can improve the sensor\u2019s internal calculations. Defaults to `50`\n  \n  \n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the CO\u2082eq sensor.\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `sgp40` sensor platform  allows you to use your Sensiron SGP40 VOC sensor ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9_Gas_Sensors/Sensirion_Gas_Sensors_SGP40_Datasheet.pdf)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#sgp40-volatile-organic-compound-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sht3xd" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sht3xd::SHT3XDComponent"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x44`.\n\n\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `sht3xd` sensor platform Temperature+Humidity sensor allows you to use your Sensiron SHT31-D ([datasheet](https://cdn-shop.adafruit.com/product-files/2857/Sensirion_Humidity_SHT3x_Datasheet_digital-767294.pdf), [Adafruit](https://www.adafruit.com/product/2857) ) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#sht3x-d-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sht4x" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sht4x::SHT4XComponent"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Temperature.\n  * **name** (**Required**, string): The name of the sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Manually specify the ID used for code generation.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Relative Humidity.\n  * **name** (**Required**, string): The name of the sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Manually specify the ID used for code generation.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "precision": {
                      "enum": ["High", "Med", "Low"],
                      "markdownDescription": "**string**: The measurement precision, either `High`, `Med` or `Low`. Default is `High`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "heater_power": {
                      "enum": ["High", "Med", "Low"],
                      "markdownDescription": "**string**: The heater power, either `High`, `Med` or `Low`. Default is `High`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "heater_time": {
                      "enum": ["Long", "Short"],
                      "markdownDescription": "**string**: The length of time to run the heater, either `Long` (1000ms) or `Short` (100ms). Default is `Long`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "heater_max_duty": {
                      "type": "number",
                      "default": 0.0,
                      "markdownDescription": "**float**: The maximum duty cycle of the heater (limited to `0.05`). Default is `0.0`, i.e. heater off.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Default is `0x44`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `sht4x` sensor platform  allows you to use your SHT4X temperature and humidity sensor ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHT4x_Datasheet.pdf), [Adafruit](https://www.adafruit.com/product/4885)) with ESPHome.\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#sht4x-temperature-and-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "shtcx" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "shtcx::SHTCXComponent"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x70`.\n\n\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `shtcx` sensor platform Temperature+Humidity sensor allows you to use your Sensiron SHTC1 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHTC1_Datasheet.pdf), [Sensirion STHC1](https://www.sensirion.com/en/environmental-sensors/humidity-sensors/digital-humidity-sensor-for-consumer-electronics-and-iot/)) and the newer SHTC3 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHTC3_Datasheet.pdf), [SparkFun](https://www.sparkfun.com/products/15074) ) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#shtcx-temperature-humidity-sensors)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sm300d2" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sm300d2::SM300D2Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for actions.\n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The CO\u2082 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name of the CO\u2082 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "formaldehyde": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The formaldehyde data of the sensor in micrograms per cubic meter air (\u00b5g/m\u00b3).\n  * **name** (**Required**, string): The name of the formaldehyde sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "tvoc": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The total volatile organic compounds (TVOC) data of the sensor in micrograms per cubic meter air (\u00b5g/m\u00b3).\n  * **name** (**Required**, string): The name of the TVOC sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The PM2.5 data of the sensor in micrograms per cubic meter air (\u00b5g/m\u00b3).\n  * **name** (**Required**, string): The name of the PM2.5 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The PM10 data of the sensor in micrograms per cubic meter air (\u00b5g/m\u00b3).\n  * **name** (**Required**, string): The name of the PM10 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The temperature data of the sensor in degrees celsius (\u00b0C).\n  * **name** (**Required**, string): The name of the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The humidity data of the sensor in percent relative humidity (%).\n  * **name** (**Required**, string): The name of the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "The `sm300d2` sensor platform allows you to use the SM300D2 7-in-1 Air Quality Sensor with ESPHome.\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#sm300d2-7-in-1-air-quality-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sps30" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sps30::SPS30Component"
                    },
                    "pm_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Weight Concentration** sensor for fine particles up to 1\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Weight Concentration** sensor for fine particles up to 2.5\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pm_4_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Weight Concentration** sensor for coarse particles up to 4\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Weight Concentration** sensor for coarse particles up to 10\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_0_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for ultrafine particles up to 0.5\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for fine particles up to 1\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for fine particles up to 2.5\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_4_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for coarse particles up to 4\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for coarse particles up to 10\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pm_size": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x69`.\n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `sps30` sensor platform allows you to use your Sensiron SPS30 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/0_Datasheets/Particulate_Matter/Sensirion_PM_Sensors_SPS30_Datasheet.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. This sensor supports both UART and I\u00b2C communication. However, at the moment only I\u00b2C communication is implemented.\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#sps30-particulate-matter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sts3x" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `sts3x` sensor platform Temperature sensor allows you to use your Sensiron STS30-DIS, STS31-DIS or STS35-DIS ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/3_Temperature_Sensors/Sensirion_Temperature_Sensors_Table_Overview.pdf), [Sensirion STS3x](https://www.sensirion.com/sts3x/)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [STS3X Temperature Sensor](https://esphome.io/components/sensor/sts3x.html#sts3x-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sun" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sun::SunSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
                    },
                    "sun_id": { "type": "string", "id_type": "sun::Sun" },
                    "type": {
                      "enum": ["elevation", "azimuth"],
                      "markdownDescription": "**string**: The type of value to track. One of `elevation` and `azimuth`.\n\n\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "Additionally, the sun component exposes its values over a sensor platform.\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tcs34725" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tcs34725::TCS34725Component"
                    },
                    "red_channel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the percentage of how strongly the red color channel is activated. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "green_channel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the percentage of how strongly the green color channel is activated. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "blue_channel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the percentage of how strongly the blue color channel is activated. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "clear_channel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the percentage of how strongly the clear (without a color filter) channel is activated. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the total illuminance of the sensor in lx. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "color_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the calculated color temperature of the light in Kelvin. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "integration_time": {
                      "enum": [
                        "2.4ms",
                        "24ms",
                        "50ms",
                        "101ms",
                        "154ms",
                        "700ms"
                      ],
                      "markdownDescription": "The amount of time the light sensor is exposed. Valid values are `2.4ms` (default), `24ms`, `50ms`, `101ms`, `154ms`, `700ms`.\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "gain": {
                      "enum": ["1X", "4X", "16X", "60X"],
                      "markdownDescription": "Set the gain for the internal ADCs to work better in certain low-light conditions. Valid values are `1x` (default), `4x`, `16x`, `60x` (highest gain).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x29`.\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `tcs34725` sensor platform allows you to use your TCS34725 RGB color sensors ([datasheet](https://cdn-shop.adafruit.com/datasheets/TCS34725.pdf), [Adafruit](https://www.adafruit.com/product/1334)), color temperature and illuminance sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#tcs34725-rgb-color-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "teleinfo" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "teleinfo::TeleInfo" },
                    "historical_mode": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Wether to use historical mode or standard mode. With historical mode, baudrate of 1200 must be used whereas 9600 must be used in standard mode. Defaults to `False`.\n\n\n\n*See also: [Teleinformation from Linky electrical counter.](https://esphome.io/components/sensor/teleinfo.html#configuration-variables)*"
                    },
                    "tags": {
                      "anyOf": [
                        { "$ref": "#/definitions/sensor-teleinfo-tags" },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/sensor-teleinfo-tags"
                          }
                        }
                      ],
                      "markdownDescription": "Specify the tag you want to retrieve from the Teleinformation and select with what name to transmit it.\n  * **name** (**Required**, string): The name of the tag corresponding to what the electrical counter send.\n  \n  * **sensor** (**Required**, [Sensor](https://esphome.io/components/sensor/index.html#config-sensor)): Associate a sensor with the tag. See options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Teleinformation from Linky electrical counter.](https://esphome.io/components/sensor/teleinfo.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Teleinformation from Linky electrical counter.](https://esphome.io/components/sensor/teleinfo.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [Teleinformation from Linky electrical counter.](https://esphome.io/components/sensor/teleinfo.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/uart_bus" }
              ]
            },
            "markdownDescription": "The `teleinfo` component allows you to retrieve data from a French electrical counter using Teleinformation ([datasheet](https://www.enedis.fr/sites/default/files/Enedis-NOI-CPT_54E.pdf)). It works with Linky electrical counter but also legacy EDF electrical counter.\n\n*See also: [Teleinformation from Linky electrical counter.](https://esphome.io/components/sensor/teleinfo.html#teleinformation-from-linky-electrical-counter)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "template_::TemplateSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"
                    },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated every update interval to get the new value of the sensor\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `template` sensor platform allows you to create a sensor with templated values using [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#template-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tmp102" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The TMP102 Temperature sensor allows you to use your TMP102 ([Sparkfun](https://www.sparkfun.com/products/13314)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TMP102 Temperature Sensor](https://esphome.io/components/sensor/tmp102.html#tmp102-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tmp117" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The TMP117 Temperature sensor allows you to use your TMP117 ([datasheet](https://www.ti.com/lit/ds/symlink/tmp117.pdf), [sparkfun](https://www.sparkfun.com/products/15805)) sensors with ESPHome.\n\n*See also: [TMP117 Temperature Sensor](https://esphome.io/components/sensor/tmp117.html#tmp117-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tof10120" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `tof10120` sensor platform allows you to use TOF10120 optical time of flight sensor ([datasheet](https://github.com/simpleiot/reference/blob/master/sensors/TOF10120_english.pdf)) with ESPHome to measure distances. The sensor works optically by emitting short infrared pulses and measuring the time it takes the light to be reflected back.\n\n*See also: [TOF10120 Time Of Flight Distance Sensor](https://esphome.io/components/sensor/tof10120.html#tof10120-time-of-flight-distance-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "total_daily_energy" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "total_daily_energy::TotalDailyEnergy",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Total Daily Energy Sensor](https://esphome.io/components/sensor/total_daily_energy.html#configuration-variables)*"
                    },
                    "time_id": {
                      "type": "string",
                      "id_type": "time::RealTimeClock"
                    },
                    "power_id": {
                      "type": "string",
                      "id_type": "sensor::Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the power sensor to integrate over time.\n\n\n\n*See also: [Total Daily Energy Sensor](https://esphome.io/components/sensor/total_daily_energy.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Total Daily Energy Sensor](https://esphome.io/components/sensor/total_daily_energy.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `total_daily_energy` sensor is a helper sensor that can use the energy value of other sensors like the [HLW8012](https://esphome.io/components/sensor/hlw8012.html), [CSE7766](https://esphome.io/components/sensor/cse7766.html), etc and integrate it over time.\n\n*See also: [Total Daily Energy Sensor](https://esphome.io/components/sensor/total_daily_energy.html#total-daily-energy-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tsl2561" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tsl2561::TSL2561Sensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "integration_time": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "402ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time the sensor will take for each measurement. Longer means more accurate values. One of `14ms`, `101ms`, `402ms`. Defaults to `402ms`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "gain": {
                      "enum": ["1X", "16X"],
                      "markdownDescription": "**string**: The gain of the sensor. Higher values are better in low-light conditions. One of `1x` and `16x`. Defaults to `1x`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "is_cs_package": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: The \u201cCS\u201d package of this sensor has a slightly different formula for calculating the illuminance in lx. Set this to `true` if you\u2019re working with a CS package. Defaults to `false`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x39`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `tsl2561` sensor platform allows you to use your TSL2561 ([datasheet](https://cdn-shop.adafruit.com/datasheets/TSL2561.pdf), [Adafruit](https://www.adafruit.com/product/439)) ambient light sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#tsl2561-ambient-light-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tuya::TuyaSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#configuration-variables)*"
                    },
                    "tuya_id": { "type": "string", "id_type": "tuya::Tuya" },
                    "sensor_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the sensor.\n\n\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` sensor platform creates a sensor from a tuya component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#tuya-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tx20" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tx20::Tx20Component"
                    },
                    "wind_speed": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the wind speed sensor.\n  * **name** (**Required**, string): The name for the wind speed sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#configuration-variables)*"
                    },
                    "wind_direction_degrees": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the direction in degrees sensor.\n  * **name** (**Required**, string): The name for the direction sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin, where the black or brown cable are connected.\n\n\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tx20` sensor platform allows you to use your TX20/TX23 ([Amazon](https://www.amazon.de/Technoline-Tx-20/dp/B01HXZ3KLA), [lacrosse_tx23](https://www.lacrossetechnology.com/tx23-wind-sensor)) wind direction and speed sensors with ESPHome. The only required pin is the black or brown cable (which is used to transmit data.) The red cable should be connected to VCC (3.3V), green initiates the data transfer when connected to GND and should therefore be directly connected to GND and the yellow cable should be always connected to ground. The difference from the TX20 to the TX23 seems to be that the green cable does not matter any more and the wind sensor is just sending a datagram every 2 seconds - pretty much the same as when the green cable was connected to GND in the TX20.\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#tx20-tx23-wind-speed-direction-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ultrasonic" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ultrasonic::UltrasonicSensorComponent",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "trigger_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The output pin to periodically send the trigger pulse to.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "echo_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The input pin on which to wait for the echo.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "timeout": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "2m",
                      "markdownDescription": "**float**: The number of meters for the timeout. Most sensors can only sense up to 2 meters. Defaults to 2 meters.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "pulse_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "10us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration for which the trigger pin will be active. Defaults to `10us`.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The ultrasonic distance sensor allows you to use simple ultrasonic sensors like the HC-SR04 ([datasheet](https://www.electroschematics.com/wp-content/uploads/2013/07/HC-SR04-datasheet-version-2.pdf), [SparkFun](https://www.sparkfun.com/products/13959)) with ESPHome to measure distances. These sensors usually can\u2019t measure anything more than about two meters and may sometimes make some annoying clicking sounds.\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#ultrasonic-distance-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "uptime" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `uptime` sensor allows you to track the time the ESP has stayed up for in seconds. Time rollovers are automatically handled.\n\n*See also: [Uptime Sensor](https://esphome.io/components/sensor/uptime.html#uptime-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "vl53l0x" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "vl53l0x::VL53L0XSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "signal_rate_limit": {
                      "type": "number",
                      "default": 0.25,
                      "markdownDescription": "**float**: Set the return signal rate limit in units of MCPS (mega counts per second). This is the minimum signal amplitude detected by the sensor necessary for it to report a valid reading. Setting a lower value may increase the range of the sensor but also increases the chance of getting inaccurate readings. Defaults to `0.25`.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "long_range": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**bool**: Set the sensor in long range mode. The signal_rate_limit is overruled to `0.1`. Defaults to `false`.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "timeout": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "10ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Sensor setup timeout. Default to `10ms`.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "enable_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to XSHUT on vl53l0x to enable/disable sensor. **Required** if not using address `0x29` which is the cause if you have multiple VL53L0X on the same i2c bus. In this case you have to assign a different pin to each VL53L0X.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the i2c address of the sensor. Defaults to `0x29`. If an address other the `0x29` is specified, the sensor will be dynamically re-addressed at startup. A dynamic re-address of sensor requires the `enable_pin` configuration variable to be assigned. If more then one VL53L0X sensor is used on the same i2c bus, a unique address must be specified per sensor.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "The `vl53l0x` sensor platform allows you to use VL53L0X optical time of flight ([datasheet](https://www.st.com/resource/en/datasheet/vl53l0x.pdf), [ST](https://www.st.com/en/imaging-and-photonics-solutions/vl53l0x.html)) with ESPHome to measure distances. The sensor works optically by emitting short infrared pulses and measuring the time it takes the light to be reflected back\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#vl53l0x-time-of-flight-distance-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "wifi_signal" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `wifi_signal` sensor platform allows you to read the signal strength of the currently connected [WiFi Access Point](https://esphome.io/components/wifi.html).\n\n*See also: [WiFi Signal Sensor](https://esphome.io/components/sensor/wifi_signal.html#wifi-signal-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "xiaomi_cgd1" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_cgd1::XiaomiCGD1"
                    },
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "xiaomi_cgg1" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_cgg1::XiaomiCGG1"
                    },
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_gcls002" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_gcls002::XiaomiGCLS002"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "moisture": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "conductivity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_hhccjcy01" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_hhccjcy01::XiaomiHHCCJCY01"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "moisture": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "conductivity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_hhccpot002" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_hhccpot002::XiaomiHHCCPOT002"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "moisture": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "conductivity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_jqjcy01ym" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_jqjcy01ym::XiaomiJQJCY01YM"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "formaldehyde": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_lywsd02" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_lywsd02::XiaomiLYWSD02"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_lywsd03mmc" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_lywsd03mmc::XiaomiLYWSD03MMC"
                    },
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_lywsdcgq" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_lywsdcgq::XiaomiLYWSDCGQ"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_mhoc401" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_mhoc401::XiaomiMHOC401"
                    },
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_miscale" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_miscale::XiaomiMiscale"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "weight": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `xiaomi_miscale` sensor platform lets you track the output of Xiaomi Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track, for example, the weight of the device every time the sensor sends out a BLE broadcast. Contrary to other implementations, `xiaomi_miscale` listens passively to advertisement packets and does not pair with the device. Hence ESPHome has no impact on battery life.\n\n*See also: [Xiaomi Miscale Sensors](https://esphome.io/components/sensor/xiaomi_miscale.html#xiaomi-miscale-sensors)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_miscale2" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "xiaomi_miscale2::XiaomiMiscale2"
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "weight": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "impedance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `xiaomi_miscale2` sensor platform lets you track the output of Xiaomi Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track, for example, the weight and the impedance of the device every time the sensor sends out a BLE broadcast. Contrary to other implementations, `xiaomi_miscale2` listens passively to advertisement packets and does not pair with the device. Hence ESPHome has no impact on battery life.\n\n*See also: [Xiaomi Miscale2 Sensors](https://esphome.io/components/sensor/xiaomi_miscale2.html#xiaomi-miscale2-sensors)*"
          },
          {
            "if": { "properties": { "platform": { "const": "zyaura" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "zyaura::ZyAuraSensor"
                    },
                    "clock_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin where the clock bus is connected.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "data_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin where the data bus is connected.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the CO2 sensor.\n  * **name** (**Required**, string): The name for the CO2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The ZyAura CO2 & Temperature & Humidity sensor allows you to use your [ZGm05(3)(U)](http://www.zyaura.com/products/ZGm05.asp) ([MT8057](https://masterkit.ru/shop/1266110), [MT8057S](https://medgadgets.ru/shop/kit-mt8057.html)), [ZG1683R(U)](http://www.zyaura.com/products/ZG1683R.asp) ([MT8060](https://masterkit.ru/shop/1921398)), [ZG1583RUD](http://www.zyaura.com/products/ZG1583RUD.asp) monitors with ESPHome.\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#zyaura-co2-temperature-humidity-sensor)*"
          }
        ]
      },
      "markdownDescription": "ESPHome has support for many different sensors. Each of them is a platform of the `sensor` domain and each sensor has several base configuration options.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#sensor-component)*"
    },
    "stepper": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/stepper.STEPPER_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "a4988" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/stepper.STEPPER_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "a4988::A4988",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Specify the ID of the stepper so that you can control it.\n\n\n\n*See also: [A4988 Component](https://esphome.io/components/stepper/index.html#a4988-component)*"
                    },
                    "step_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The `STEP` pin of the A4988 stepper driver.\n\n\n\n*See also: [A4988 Component](https://esphome.io/components/stepper/index.html#a4988-component)*"
                    },
                    "dir_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The `DIRECTION` pin of the A4988 stepper driver.\n\n\n\n*See also: [A4988 Component](https://esphome.io/components/stepper/index.html#a4988-component)*"
                    },
                    "sleep_pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Optionally also use the `SLEEP` pin of the A4988 stepper driver. If specified, the driver will be put into sleep mode as soon as the stepper reaches the target steps.\n\n\n\n*See also: [A4988 Component](https://esphome.io/components/stepper/index.html#a4988-component)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "uln2003" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/stepper.STEPPER_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "uln2003::ULN2003",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Specify the ID of the stepper so that you can control it.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "pin_a": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin **a** of the stepper control board.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "pin_b": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin **b** of the stepper control board.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "pin_c": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin **c** of the stepper control board.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "pin_d": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin **d** of the stepper control board.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "sleep_when_done": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to turn off all coils when the stepper has reached the target position\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "step_mode": {
                      "enum": ["FULL_STEP", "HALF_STEP", "WAVE_DRIVE"],
                      "markdownDescription": "**string**: The step mode to operate the motor with. One of:\n  * `FULL_STEP` (Default)\n  \n  * `HALF_STEP`\n  \n  * `WAVE_DRIVE`\n  \n  \n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          }
        ]
      },
      "markdownDescription": "The `stepper` component allows you to use stepper motors with ESPHome. Currently only the A4988 stepper driver ([datasheet](https://www.pololu.com/file/0J450/a4988_DMOS_microstepping_driver_with_translator.pdf)) and ULN2003 ([datasheet](http://www.ti.com/lit/ds/symlink/uln2003a.pdf)) are supported.\n\n*See also: [Stepper Component](https://esphome.io/components/stepper/index.html#stepper-component)*"
    },
    "switch": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ble_client" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ble_client::BLEClientSwitch",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID to use for code generation, and for reference by dependent components.\n\n\n\n*See also: [BLE Client Switch](https://esphome.io/components/switch/ble_client.html#configuration-variables)*"
                    },
                    "icon": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "mdi:bluetooth"
                    },
                    "ble_client_id": {
                      "type": "string",
                      "id_type": "ble_client::BLEClient",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: ID of the associated BLE client.\n\n\n\n*See also: [BLE Client Switch](https://esphome.io/components/switch/ble_client.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_client` component is a switch platform that is used to enable and disable a `ble_client`. This has several uses, such as minimizing battery usage or for allowing other clients (Eg phone apps) to connect to the device.\n\n*See also: [BLE Client Switch](https://esphome.io/components/switch/ble_client.html#ble-client-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "custom::CustomSwitchConstructor"
                },
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the switch(es).\n\n\n\n*See also: [Custom Switch](https://esphome.io/components/switch/custom.html#custom-switch)*"
                },
                "switches": {
                  "anyOf": [
                    { "$ref": "#/definitions/switch-custom-switches" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/switch-custom-switches"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of switches to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Switch](https://esphome.io/components/switch/index.html#config-switch).\n  \n  \n\n\n\n*See also: [Custom Switch](https://esphome.io/components/switch/custom.html#custom-switch)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "This integration can be used to create custom switches in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Switch](https://esphome.io/components/switch/custom.html#custom-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "gpio" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "gpio::GPIOSwitch",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The GPIO pin to use for the switch.\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "restore_mode": {
                      "enum": [
                        "RESTORE_DEFAULT_OFF",
                        "RESTORE_DEFAULT_ON",
                        "ALWAYS_OFF",
                        "ALWAYS_ON"
                      ],
                      "markdownDescription": "Control how the GPIO Switch attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_OFF` (Default) - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `ALWAYS_OFF` - Always initialize the pin as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the pin as ON on bootup.\n  \n  \n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "interlock": {
                      "anyOf": [
                        { "$ref": "#/definitions/switch-gpio-interlock" },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/switch-gpio-interlock"
                          }
                        }
                      ],
                      "markdownDescription": "**list**: A list of other GPIO switches in an interlock group. See [Interlocking](https://esphome.io/components/switch/gpio.html#switch-gpio-interlocking).\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "interlock_wait_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "0ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: For interlocking mode, set how long to wait after other items in an interlock group have been disabled before re-activating. Useful for motors where immediately turning on in the other direction could cause problems.\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the switch.\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `gpio` switch platform allows you to use any pin on your node as a switch. You can for example hook up a relay to a GPIO pin and use it through this platform.\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#gpio-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "output" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "output::OutputSwitch",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Generic Output Switch](https://esphome.io/components/switch/output.html#configuration-variables)*"
                    },
                    "output": {
                      "type": "string",
                      "id_type": "output::BinaryOutput",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the output component to use.\n\n\n\n*See also: [Generic Output Switch](https://esphome.io/components/switch/output.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the switch.\n\n\n\n*See also: [Generic Output Switch](https://esphome.io/components/switch/output.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `output` switch platform allows you to use any output component as a switch.\n\n*See also: [Generic Output Switch](https://esphome.io/components/switch/output.html#generic-output-switch)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "remote_transmitter" } }
            },
            "then": { "type": ["null", "object", "string", "array", "number"] }
          },
          {
            "if": { "properties": { "platform": { "const": "restart" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "restart::RestartSwitch",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Restart Switch](https://esphome.io/components/switch/restart.html#configuration-variables)*"
                    },
                    "icon": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "mdi:restart"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the switch.\n\n\n\n*See also: [Restart Switch](https://esphome.io/components/switch/restart.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `restart` switch platform allows you to restart your node remotely through Home Assistant.\n\n*See also: [Restart Switch](https://esphome.io/components/switch/restart.html#restart-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "shutdown" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "shutdown::ShutdownSwitch",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Shutdown Switch](https://esphome.io/components/switch/shutdown.html#configuration-variables)*"
                    },
                    "icon": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "mdi:power"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the switch.\n\n\n\n*See also: [Shutdown Switch](https://esphome.io/components/switch/shutdown.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `shutdown` switch platform allows you to shutdown your node remotely through Home Assistant. It does this by putting the node into deep sleep mode with no wakeup source selected. After enabling, the only way to startup the ESP again is by pressing the reset button or restarting the power supply.\n\n*See also: [Shutdown Switch](https://esphome.io/components/switch/shutdown.html#shutdown-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "template_::TemplateSwitch",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated repeatedly to get the current state of the switch.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "optimistic": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to operate in optimistic mode - when in this mode, any command sent to the template cover will immediately update the reported state. Defaults to `false`.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "assumed_state": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether the true state of the switch is not known. This will make the Home Assistant frontend show buttons for both ON and OFF actions, instead of hiding one of them when the switch is ON/OFF. Defaults to `false`.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "turn_off_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the switch to be turned off.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "turn_on_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the switch to be turned on.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "restore_state": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Sets whether ESPHome should attempt to restore the state on boot-up and call the turn on/off actions with the recovered values. Defaults to `no`.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the switch.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `template` switch platform allows you to create simple switches out of just actions and an optional value lambda. Once defined, it will automatically appear in Home Assistant as a switch and can be controlled through the frontend.\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#template-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "tuya::TuyaSwitch",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Switch](https://esphome.io/components/switch/tuya.html#configuration-variables)*"
                    },
                    "tuya_id": { "type": "string", "id_type": "tuya::Tuya" },
                    "switch_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the switch.\n\n\n\n*See also: [Tuya Switch](https://esphome.io/components/switch/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the switch.\n\n\n\n*See also: [Tuya Switch](https://esphome.io/components/switch/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` switch platform creates a sensor from a tuya serial component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Switch](https://esphome.io/components/switch/tuya.html#tuya-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "uart" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "uart::UARTSwitch",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    },
                    "data": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string or list of bytes**: The data to send via UART. Either an ASCII string or a list of bytes.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    },
                    "send_every": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Sends recurring data instead of sending once.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the switch.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/uart_bus" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `uart` switch platform allows you to send a pre-defined sequence of bytes on a [UART bus](https://esphome.io/components/uart.html) when triggered.\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#uart-switch)*"
          }
        ]
      },
      "markdownDescription": "The `switch` domain includes all platforms that should show up like a switch and can only be turned ON or OFF.\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#switch-component)*"
    },
    "text_sensor": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ble_scanner" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ble_scanner::BLEScanner"
                    },
                    "esp32_ble_id": {
                      "type": "string",
                      "id_type": "esp32_ble_tracker::ESP32BLETracker"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Scanner](https://esphome.io/components/text_sensor/ble_scanner.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_scanner` text sensor platform lets you track reachable BLE devices. See the [BLE Tracker Configuration variables](https://esphome.io/components/esp32_ble_tracker.html#config-esp32-ble-tracker) for instructions for setting up scan parameters. The sensor platform is similar to [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html) but in contrast to that platform, this text sensor sends out all raw BLE scan information and does not filter devices.\n\n*See also: [ESP32 Bluetooth Low Energy Scanner](https://esphome.io/components/text_sensor/ble_scanner.html#esp32-bluetooth-low-energy-scanner)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bme680_bsec" } } },
            "then": {
              "properties": {
                "bme680_bsec_id": {
                  "type": "string",
                  "id_type": "bme680_bsec::BME680BSECComponent"
                },
                "iaq_accuracy": {
                  "$ref": "#/definitions/text_sensor-bme680_bsec-iaq_accuracy",
                  "markdownDescription": "The information for the IAQ accuracy sensor. Shows: Stabilizing, Uncertain, Calibrating, Calibrated.\n  * **name** (**Required**, string): The name for the IAQ accuracy sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [TextSensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Text Sensor](https://esphome.io/components/sensor/bme680_bsec.html#text-sensor)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "Accuracy can be reported in text format.\n\n*See also: [bme680_bsec Text Sensor](https://esphome.io/components/sensor/bme680_bsec.html#text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "id": {
                  "type": "string",
                  "id_type": "custom::CustomTextSensorConstructor"
                },
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the text sensor(s).\n\n\n\n*See also: [Custom Text Sensor](https://esphome.io/components/text_sensor/custom.html#custom-text-sensor)*"
                },
                "text_sensors": {
                  "anyOf": [
                    { "$ref": "#/definitions/text_sensor-custom-text_sensors" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/text_sensor-custom-text_sensors"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of text sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [Custom Text Sensor](https://esphome.io/components/text_sensor/custom.html#custom-text-sensor)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "This integration can be used to create custom text sensors in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Text Sensor](https://esphome.io/components/text_sensor/custom.html#custom-text-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "homeassistant" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "homeassistant::HomeassistantTextSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "entity_id": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The entity ID to import from Home Assistant.\n\n\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "attribute": { "type": "string" },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `homeassistant` text sensor platform allows you to create a sensors that import states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html).\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#home-assistant-text-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "mqtt_subscribe" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "mqtt_subscribe::MQTTSubscribeTextSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "mqtt_parent_id": {
                      "type": "string",
                      "id_type": "mqtt::MQTTClientComponent"
                    },
                    "topic": {
                      "type": "string",
                      "markdownDescription": "**string**: The MQTT topic to listen for numeric messages.\n\n\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "qos": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0,
                      "markdownDescription": "**int**: The MQTT QoS to subscribe with. Defaults to `0`.\n\n\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `mqtt_subscribe` text sensor platform allows you to get external data into ESPHome. The sensor will subscribe to messages on the given MQTT topic and save the most recent value in its `id(mysensor).state`.\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#mqtt-subscribe-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sun" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sun::SunTextSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    },
                    "sun_id": { "type": "string", "id_type": "sun::Sun" },
                    "type": {
                      "enum": ["sunset", "sunrise"],
                      "markdownDescription": "**string**: The type of value to track. One of `sunrise` and `sunset`.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    },
                    "elevation": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": -0.83333,
                      "markdownDescription": "**float**: The elevation to calculate the next sunrise/sunset event for. Defaults to `0\u00b0`.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    },
                    "format": {
                      "type": "string",
                      "default": "%X",
                      "markdownDescription": "**string**: The format to format the time value with, see [Displaying Time](https://esphome.io/components/display/index.html#display-strftime) for more information. Defaults to `%X`.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "Other properties like the next sunset time can be read out with the sun text_sensor platform.\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "template_::TemplateTextSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#configuration-variables)*"
                    },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated every update interval to get the new value of the text sensor\n\n\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the text sensor. Defaults to `60s`.\n\n\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `template` text sensor platform allows you to create a text sensor with templated values using [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#template-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "version" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "version::VersionTextSensor",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Version Text Sensor](https://esphome.io/components/text_sensor/version.html#configuration-variables)*"
                    },
                    "icon": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "mdi:new-box"
                    },
                    "hide_timestamp": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Allows you to hide the compilation timestamp from the version string. Defaults to `False`.\n\n\n\n*See also: [Version Text Sensor](https://esphome.io/components/text_sensor/version.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [Version Text Sensor](https://esphome.io/components/text_sensor/version.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `version` text sensor platform exposes the ESPHome version the firmware was compiled against as a text sensor.\n\n*See also: [Version Text Sensor](https://esphome.io/components/text_sensor/version.html#version-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "wifi_info" } } },
            "then": {
              "properties": {
                "ip_address": {
                  "$ref": "#/definitions/text_sensor-wifi_info-ip_address",
                  "markdownDescription": "Expose the IP Address of the ESP as a text sensor. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                },
                "ssid": {
                  "$ref": "#/definitions/text_sensor-wifi_info-ssid",
                  "markdownDescription": "Expose the SSID of the currently connected WiFi network as a text sensor. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                },
                "bssid": {
                  "$ref": "#/definitions/text_sensor-wifi_info-bssid",
                  "markdownDescription": "Expose the BSSID of the currently connected WiFi network as a text sensor. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                },
                "mac_address": {
                  "$ref": "#/definitions/text_sensor-wifi_info-mac_address",
                  "markdownDescription": "Expose the Mac Address of the WiFi card. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "The `wifi_info` text sensor platform exposes different WiFi information via text sensors.\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#wifi-info-text-sensor)*"
          }
        ]
      },
      "markdownDescription": "Text sensors are a lot like normal [sensors](https://esphome.io/components/sensor/index.html). But where the \u201cnormal\u201d sensors only represent sensors that output **numbers**, this component can represent any *text*.\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#text-sensor-component)*"
    },
    "time": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/time.TIME_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ds1307" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/time.TIME_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "ds1307::DS1307Component"
                    },
                    "address": {
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the RTC. Defaults to `0x68`.\n\n\n\n*See also: [DS1307 Time Source](https://esphome.io/components/time.html#ds1307-time-source)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/i2c_bus" }
              ]
            },
            "markdownDescription": "You first need to set up the [I2C](https://esphome.io/components/i2c.html) component.\n\n*See also: [GPS Time Source](https://esphome.io/components/time.html#ds1307-time-source)*"
          },
          {
            "if": { "properties": { "platform": { "const": "gps" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/time.TIME_SCHEMA" },
                {
                  "properties": {
                    "id": { "type": "string", "id_type": "gps::GPSTime" },
                    "gps_id": { "type": "string", "id_type": "gps::GPS" }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "You first need to set up the [GPS](https://esphome.io/components/gps.html) component.\n\n*See also: [SNTP Time Source](https://esphome.io/components/time.html#gps-time-source)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "homeassistant" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/time.TIME_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "homeassistant::HomeassistantTime"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The preferred way to get time in ESPHome is using Home Assistant. With the `homeassistant` time platform, the [native API](https://esphome.io/components/api.html) connection to Home Assistant will be used to periodically synchronize the current time.\n\n*See also: [on_time_sync Trigger](https://esphome.io/components/time.html#home-assistant-time-source)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sntp" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/time.TIME_SCHEMA" },
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "id_type": "sntp::SNTPComponent"
                    },
                    "servers": {
                      "anyOf": [
                        { "$ref": "#/definitions/time-sntp-servers" },
                        {
                          "type": "array",
                          "items": { "$ref": "#/definitions/time-sntp-servers" }
                        }
                      ],
                      "markdownDescription": "**list of strings**: Choose up to 3 NTP servers that are used for the clock source. Defaults to `0.pool.ntp.org`, `1.pool.ntp.org` and `2.pool.ntp.org`\n\n\n\n*See also: [SNTP Time Source](https://esphome.io/components/time.html#sntp-time-source)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [Home Assistant Time Source](https://esphome.io/components/time.html#sntp-time-source)*"
          }
        ]
      },
      "markdownDescription": "The `time` component allows you to set up real time clock time sources for ESPHome. You can then get the current time in [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Time](https://esphome.io/components/time.html#time)*"
    },
    "adalight": {},
    "ads1115": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ads1115" } },
        { "$ref": "#/definitions/ads1115" }
      ],
      "markdownDescription": "The `ads1115` domain creates a global hub so that you can later create individual sensors using the [ADS1115 Sensor Platform](https://esphome.io/components/sensor/ads1115.html#id1). To use this hub, first setup the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) and connect the sensor to the pins specified there.\n\n*See also: [ads1115 Component/Hub](https://esphome.io/components/sensor/ads1115.html#component-hub)*"
    },
    "animation": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/animation" } },
        { "$ref": "#/definitions/animation" }
      ],
      "markdownDescription": "Allows to use animated images on displays. Animation inherits all options from the image component. It adds an additional lambda method: `next_frame()` to change the shown picture of a gif.\n\n*See also: [Images](https://esphome.io/components/display/index.html#animation)*"
    },
    "apds9960": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/apds9960" } },
        { "$ref": "#/definitions/apds9960" }
      ],
      "markdownDescription": "The `apds9960` sensor platform allows you to use your APDS9960 RGB and gesture sensors ([datasheet](https://cdn.sparkfun.com/datasheets/Sensors/Proximity/apds9960.pdf), [SparkFun](https://www.sparkfun.com/products/12787)) with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [apds9960 Component/Hub](https://esphome.io/components/sensor/apds9960.html#component-hub)*"
    },
    "api": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "api::APIServer",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "port": {
              "type": "number",
              "default": 6053,
              "markdownDescription": "**integer**: The port to run the API Server on. Defaults to `6053`.\n\n\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "password": {
              "type": "string",
              "default": "",
              "markdownDescription": "**string**: The password to protect the API Server with. Defaults to no password.\n\n\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "reboot_timeout": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "15min",
              "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time to wait before rebooting when no client connects to the API. This is needed because sometimes the low level ESP functions report that the ESP is connected to the network, when in fact it is not - only a full reboot fixes it. Can be disabled by setting this to `0s`. Defaults to `15min`.\n\n\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "services": {
              "$ref": "#/definitions/api-services",
              "markdownDescription": "**list**: A list of user-defined services. See [User-defined Services](https://esphome.io/components/api.html#api-services).\n\n\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The ESPHome native API is used to communicate with clients directly, with a highly-optimized network protocol. Currently, only the ESPHome tool and Home Assistant use this native API.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#native-api-component)*"
    },
    "as3935_i2c": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "as3935::AS3935Component" },
            "irq_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The IRQ pin, which indicates if a lightning strike has been detected.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "indoor": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: Indicates if the sensor is used indoor. Defaults to `true`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "noise_level": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**integer**: Noise floor level is compared to known reference voltage. If this level is exceeded the chip will issue an interrupt to the IRQ pin, broadcasting that it can not operate properly due to noise (INT_NH). Defaults to `2`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "watchdog_threshold": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**integer**: Determines the threshold for events that trigger the IRQ pin. Defaults to `2`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "spike_rejection": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**integer**: Helps to differentiate between real events and actual lightning. Increasing this value increases robustness at the cost of sensitivity to distant events. Defaults to `2`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "lightning_threshold": {
              "enum": [1, 5, 9, 16],
              "markdownDescription": "**integer**: The number of lightnings that must appear in a 15-minute time window before a lightning storm is detected. 15 minutes is the window of time before the number of detected lightning events is reset. The number of lightning strikes can be set to 1,5,9, or 16. Defaults to `1`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "mask_disturber": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: This setting will return whether or not disturbers trigger the IRQ Pin. Defaults to `false`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "div_ratio": {
              "enum": [0, 16, 32, 64, 128],
              "markdownDescription": "**integer**: The antenna is designed to resonate at 500kHz and so can be tuned with the following setting. The accuracy of the antenna must be within 3.5 percent of that value for proper signal validation and distance estimation. Defaults to `0`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "capacitance": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**integer**: This setting will add capacitance to the series RLC antenna on the product to help tune its resonance. The datasheet specifies being within 3.5 percent of 500kHz to get optimal lightning detection and distance sensing. It\u2019s possible to add up to 120pF in steps of 8pF to the antenna. Defaults to `0`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "address": {
              "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x03` (`A0` and ``A1` pins pulled low). Another address can be `0x02`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/i2c_bus" }
      ],
      "markdownDescription": "The `as3935_i2c` sensor platform allows you to use your AS3935 sensor ([AliExpress](https://de.aliexpress.com/af/as3935.html?SearchText=as3935), [AMS_AS3935](https://ams.com/as3935)) in order to get notified when a thunderstorm is getting close.\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#over-i2c)*"
    },
    "as3935_spi": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "as3935::AS3935Component" },
            "irq_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The IRQ pin, which indicates if a lightning strike has been detected.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "indoor": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: Indicates if the sensor is used indoor. Defaults to `true`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "noise_level": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**integer**: Noise floor level is compared to known reference voltage. If this level is exceeded the chip will issue an interrupt to the IRQ pin, broadcasting that it can not operate properly due to noise (INT_NH). Defaults to `2`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "watchdog_threshold": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**integer**: Determines the threshold for events that trigger the IRQ pin. Defaults to `2`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "spike_rejection": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**integer**: Helps to differentiate between real events and actual lightning. Increasing this value increases robustness at the cost of sensitivity to distant events. Defaults to `2`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "lightning_threshold": {
              "enum": [1, 5, 9, 16],
              "markdownDescription": "**integer**: The number of lightnings that must appear in a 15-minute time window before a lightning storm is detected. 15 minutes is the window of time before the number of detected lightning events is reset. The number of lightning strikes can be set to 1,5,9, or 16. Defaults to `1`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "mask_disturber": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: This setting will return whether or not disturbers trigger the IRQ Pin. Defaults to `false`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "div_ratio": {
              "enum": [0, 16, 32, 64, 128],
              "markdownDescription": "**integer**: The antenna is designed to resonate at 500kHz and so can be tuned with the following setting. The accuracy of the antenna must be within 3.5 percent of that value for proper signal validation and distance estimation. Defaults to `0`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "capacitance": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**integer**: This setting will add capacitance to the series RLC antenna on the product to help tune its resonance. The datasheet specifies being within 3.5 percent of 500kHz to get optimal lightning detection and distance sensing. It\u2019s possible to add up to 120pF in steps of 8pF to the antenna. Defaults to `0`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The chip select pin.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/spi_bus" }
      ],
      "markdownDescription": "The `as3935_spi` sensor platform allows you to use your AS3935 sensor ([AliExpress](https://de.aliexpress.com/af/as3935.html?SearchText=as3935), [AMS_AS3935](https://ams.com/as3935)) in order to get notified when a thunderstorm is getting close.\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#over-spi)*"
    },
    "ble_client": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ble_client" } },
        { "$ref": "#/definitions/ble_client" }
      ],
      "markdownDescription": "The `ble_client` component enables connections to Bluetooth Low Energy devices in order to query and control them. This component does not expose any sensors or output components itself, but merely manages connections to them for use by other components.\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#ble-client)*"
    },
    "bme680_bsec": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "bme680_bsec::BME680BSECComponent"
            },
            "temperature_offset": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0,
              "markdownDescription": "**float**: Temperature offset if device is in enclosure and reads too high. Defaults to `0`.\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            },
            "iaq_mode": {
              "enum": ["STATIC", "MOBILE"],
              "markdownDescription": "**string**: IAQ calculation mode. Default is `static` for static applications (e.g. fixed indoor devices). Can be `mobile` for mobile applications (e.g. carry-on devices).\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            },
            "sample_rate": {
              "enum": ["LP", "ULP"],
              "markdownDescription": "**string**: Sample rate. Default is `lp` for low power consumption, sampling every 3 seconds. Can be `ulp` for ultra low power, sampling every 5 minutes.\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            },
            "state_save_interval": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "6hours",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The minimum interval at which to save calibrated BSEC algorithm state to flash so that calibration does have to start from zero on device restart. Defaults to `6h`.\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            },
            "address": {
              "markdownDescription": "**int**: Manually specify the I^2C address of the sensor. Defaults to `0x76`. Another address can be `0x77`.\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/i2c_bus" }
      ],
      "markdownDescription": "The `bme680_bsec` sensor platform allows you to use your BME680 ([datasheet](https://cdn-shop.adafruit.com/product-files/3660/BME680.pdf), [Adafruit](https://www.adafruit.com/product/3660)) temperature, pressure and humidity and gas sensors with ESPHome via the Bosch Sensortec Environmental Cluster (BSEC) software library. The use of Bosch\u2019s proprietary algorithms provides additional Indoor Air Quality (IAQ), CO2 equivalent and Breath Volatile Organic Compounds (VOC) equivalent measurements.\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
    },
    "captive_portal": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "captive_portal::CaptivePortal"
            },
            "web_server_base_id": {
              "type": "string",
              "id_type": "web_server_base::WebServerBase"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The captive portal component in ESPHome is a fallback mechanism for when connecting to the configured [WiFi](https://esphome.io/components/wifi.html) fails.\n\n*See also: [Captive Portal](https://esphome.io/components/captive_portal.html#captive-portal)*"
    },
    "color": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/color" } },
        { "$ref": "#/definitions/color" }
      ],
      "markdownDescription": "When using RGB-capable displays in ESPHome you may wish to use custom colors. A `color` component exists for just this purpose:\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#color)*"
    },
    "custom_component": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/custom_component" }
        },
        { "$ref": "#/definitions/custom_component" }
      ],
      "markdownDescription": "This integration can be used to create generic custom components in ESPHome using the C++ (Arduino) API. This integration should be used in cases where none of ESPHome\u2019s abstraction layers (for example the \u201csensor\u201d, \u201cbinary sensor\u201d, \u201cswitch\u201d, etc concepts) work well for your integration.\n\n*See also: [Generic Custom Component](https://esphome.io/custom/custom_component.html#generic-custom-component)*"
    },
    "dallas": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/dallas" } },
        { "$ref": "#/definitions/dallas" }
      ],
      "markdownDescription": "The `dallas` component allows you to use your [DS18b20](https://www.adafruit.com/product/374) ([datasheet](https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf)) and similar 1-Wire temperature sensors.\n\n*See also: [dallas Component/Hub](https://esphome.io/components/sensor/dallas.html#component-hub)*"
    },
    "debug": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "debug::DebugComponent" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `debug` component can be used to debug problems with ESPHome. At startup, it prints a bunch of useful information like reset reason, free heap size, ESPHome version and so on.\n\n*See also: [Debug Component](https://esphome.io/components/debug.html#debug-component)*"
    },
    "deep_sleep": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "deep_sleep::DeepSleepComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
            },
            "run_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time duration the node should be active, i.e. run code.\n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
            },
            "sleep_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time duration to stay in deep sleep mode.\n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
            },
            "wakeup_pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Only on ESP32. A pin to wake up to once in deep sleep mode. Use the inverted property to wake up to LOW signals.\n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
            },
            "wakeup_pin_mode": {
              "properties": {},
              "type": ["object", "null"],
              "markdownDescription": "Only on ESP32. Specify how to handle waking up from a `wakeup_pin` if the wakeup pin is already in the state with which it would wake up when attempting to enter deep sleep. See [ESP32 Wakeup Pin Mode](https://esphome.io/components/deep_sleep.html#deep-sleep-esp32-wakeup-pin-mode). Defaults to `IGNORE`\n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
            },
            "esp32_ext1_wakeup": {
              "properties": {
                "pins": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/deep_sleep-esp32_ext1_wakeup-pins"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/deep_sleep-esp32_ext1_wakeup-pins"
                      }
                    }
                  ],
                  "markdownDescription": "**list of pin numbers**: The pins to wake up on.\n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
                },
                "mode": {
                  "enum": ["ALL_LOW", "ANY_HIGH"],
                  "markdownDescription": "The mode to use for the wakeup source. Must be one of `ALL_LOW` (wake up when all pins go LOW) or `ANY_HIGH` (wake up when any pin goes HIGH).\n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
                }
              },
              "type": ["object", "null"],
              "markdownDescription": "Use the EXT1 wakeup source of the ESP32 to wake from deep sleep to wake up on multiple pins. This cannot be used together with wakeup pin.\n  * **pins** (**Required**, list of pin numbers): The pins to wake up on.\n  \n  * **mode** (*Optional*): The mode to use for the wakeup source. Must be one of `ALL_LOW` (wake up when all pins go LOW) or `ANY_HIGH` (wake up when any pin goes HIGH).\n  \n  \n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `deep_sleep` component can be used to automatically enter a deep sleep mode on the ESP8266/ESP32 after a certain amount of time. This is especially useful with nodes that operate on batteries and therefore need to conserve as much energy as possible.\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#deep-sleep-component)*"
    },
    "dfplayer": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/dfplayer" } },
        { "$ref": "#/definitions/dfplayer" }
      ],
      "markdownDescription": "The `dfplayer` ([datasheet](https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299)), component allows you to play sound and music stored in an SD card or USB flash drive.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#df-player-mini)*"
    },
    "e131": {
      "properties": {
        "id": { "type": "string", "id_type": "e131::E131Component" },
        "method": {
          "enum": ["UNICAST", "MULTICAST"],
          "markdownDescription": "Listening method, one of `multicast` or `unicast`. Defaults to `multicast`.\n\n\n\n*See also: [E1.31 Component](https://esphome.io/components/light/index.html#e1-31-component)*"
        }
      },
      "type": ["object", "null"]
    },
    "esp32_ble_beacon": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "esp32_ble_beacon::ESP32BLEBeacon",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for code generation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            },
            "type": {
              "enum": ["IBEACON"],
              "markdownDescription": "The type of beacon to create, currently only supports `iBeacon`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            },
            "uuid": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "The [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) to identify the beacon.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            },
            "major": {
              "type": "number",
              "default": 10167,
              "markdownDescription": "**integer**: The iBeacon major identifier of this beacon. Usually used to group beacons, for example for grouping all beacons in the same building, but has no effect if the BLE receiver doesn\u2019t use it. Defaults to `10167`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            },
            "minor": {
              "type": "number",
              "default": 61958,
              "markdownDescription": "**integer**: The iBeacon minor identifier of this beacon. Usually used to identify beacons within an iBeacon group. Defaults to `61958`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_ble_beacon` component creates a Bluetooth Low Energy Beacon with your ESP32 device. Beacons are BLE devices that repeatedly just send out a pre-defined packet of data. This packet can then be received by devices like smartphones and can then be used to track a phone\u2019s location.\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#esp32-bluetooth-low-energy-beacon)*"
    },
    "esp32_ble_tracker": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "esp32_ble_tracker::ESP32BLETracker",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this ESP32 BLE Hub.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            },
            "scan_parameters": {
              "properties": {
                "duration": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "5min",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each complete scan. This has no real impact on the device but can be used to debug the BLE stack. Defaults to `5min`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
                },
                "interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "320ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval between each consecutive scan window. This is the time the ESP spends on each of the 3 BLE advertising channels. Defaults to `320ms`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
                },
                "window": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "30ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time the ESP is actively listening for packets on a channel during each scan interval. If this is close to the `interval` value, the ESP will spend more time listening to packets (but also consume more power).\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
                },
                "active": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "**boolean**: Whether to actively send scan requests to request more data after having received an advertising packet. With some devices this is necessary to receive all data, but also drains those devices\u2019 power a (tiny) bit more. Defaults to `true`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
                }
              },
              "type": ["object", "null"],
              "default": {},
              "markdownDescription": "Advanced parameters for configuring the scan behavior of the ESP32. See also [this guide by Texas Instruments](http://dev.ti.com/tirex/content/simplelink_academy_cc2640r2sdk_1_12_01_16/modules/ble_scan_adv_basic/ble_scan_adv_basic.html#scanning) for reference.\n  * **interval** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The interval between each consecutive scan window. This is the time the ESP spends on each of the 3 BLE advertising channels. Defaults to `320ms`.\n  \n  * **window** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The time the ESP is actively listening for packets on a channel during each scan interval. If this is close to the `interval` value, the ESP will spend more time listening to packets (but also consume more power).\n  \n  * **duration** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The duration of each complete scan. This has no real impact on the device but can be used to debug the BLE stack. Defaults to `5min`.\n  \n  * **active** (*Optional*, boolean): Whether to actively send scan requests to request more data after having received an advertising packet. With some devices this is necessary to receive all data, but also drains those devices\u2019 power a (tiny) bit more. Defaults to `true`.\n  \n  \n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            },
            "on_ble_advertise": {
              "$ref": "#/definitions/esp32_ble_tracker-on_ble_advertise",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Bluetooth advertising is received. See [on_ble_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-advertise).\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            },
            "on_ble_service_data_advertise": {
              "$ref": "#/definitions/esp32_ble_tracker-on_ble_service_data_advertise",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Bluetooth advertising with service data is received. See [on_ble_service_data_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-service-data-advertise).\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            },
            "on_ble_manufacturer_data_advertise": {
              "$ref": "#/definitions/esp32_ble_tracker-on_ble_manufacturer_data_advertise",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Bluetooth advertising with manufcaturer data is received. See [on_ble_manufacturer_data_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-manufacturer-data-advertise).\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_ble_tracker` component creates a global hub so that you can track bluetooth low energy devices using your ESP32 node.\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#esp32-bluetooth-low-energy-tracker-hub)*"
    },
    "esp32_camera": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "esp32_camera::ESP32Camera" },
            "name": {
              "type": "string",
              "markdownDescription": "**string**: The name of the camera.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "data_pins": {
              "type": "array",
              "items": { "$ref": "#/definitions/PIN.INPUT_INTERNAL" },
              "markdownDescription": "**list of pins**: The data lanes of the camera, this must be a list of 8 GPIO pins.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "vsync_pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**pin**: The pin the VSYNC line of the camera is connected to.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "href_pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**pin**: The pin the HREF line of the camera is connected to.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "pixel_clock_pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**pin**: The pin the pixel clock line of the camera is connected to.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "external_clock": {
              "$ref": "#/definitions/esp32_camera-external_clock",
              "markdownDescription": "The configuration of the external clock to drive the camera.\n  * **pin** (**Required**, pin): The pin the external clock line is connected to.\n  \n  * **frequency** (*Optional*, float): The frequency of the external clock, must be either 20MHz or 10MHz. Defaults to `20MHz`.\n  \n  \n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "i2c_pins": {
              "$ref": "#/definitions/esp32_camera-i2c_pins",
              "markdownDescription": "The I\u00b2C control pins of the camera.\n  * **sda** (**Required**, pin): The SDA pin of the I\u00b2C interface. Also called `SIOD`.\n  \n  * **scl** (**Required**, pin): The SCL pin of the I\u00b2C interface. Also called `SIOC`.\n  \n  \n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "reset_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**pin**: The ESP pin the reset pin of the camera is connected to. If set, this will reset the camera before the ESP boots.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "power_down_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**pin**: The ESP pin to power down the camera. If set, this will power down the camera while it is inactive.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "max_framerate": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "10 fps",
              "markdownDescription": "**float**: The maximum framerate the camera will generate images at. Up to 60Hz is possible (with reduced frame sizes), but beware of overheating. Defaults to `10 fps`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "idle_framerate": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0.1 fps",
              "markdownDescription": "**float**: The framerate to capture images at when no client is requesting a full stream. Defaults to `0.1 fps`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "resolution": {
              "enum": [
                "160X120",
                "QQVGA",
                "128X160",
                "QQVGA2",
                "176X144",
                "QCIF",
                "240X176",
                "HQVGA",
                "320X240",
                "QVGA",
                "400X296",
                "CIF",
                "640X480",
                "VGA",
                "800X600",
                "SVGA",
                "1024X768",
                "XGA",
                "1280X1024",
                "SXGA",
                "1600X1200",
                "UXGA"
              ],
              "markdownDescription": "**enum**: The resolution the camera will capture images at. Higher resolutions require more memory, if there\u2019s not enough memory you will see an error during startup.\n  * `160x120` (QQVGA)\n  \n  * `128x160` (QQVGA2)\n  \n  * `176x144` (QCIF)\n  \n  * `240x176` (HQVGA)\n  \n  * `320x240` (QVGA)\n  \n  * `400x296` (CIF)\n  \n  * `640x480` (VGA, default)\n  \n  * `800x600` (SVGA)\n  \n  * `1024x768` (XGA)\n  \n  * `1280x1024` (SXGA)\n  \n  * `1600x1200` (UXGA)\n  \n  \n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "jpeg_quality": {
              "type": "number",
              "default": 10,
              "markdownDescription": "**int**: The JPEG quality that the camera should encode images with. From 10 (best) to 63 (worst). Defaults to `10`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "contrast": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The contrast to apply to the picture, from -2 to 2. Defaults to `0`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "brightness": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The brightness to apply to the picture, from -2 to 2. Defaults to `0`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "saturation": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The saturation to apply to the picture, from -2 to 2. Defaults to `0`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "vertical_flip": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**bool**: Whether to flip the image vertically. Defaults to `true`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "horizontal_mirror": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**bool**: Whether to mirror the image horizontally. Defaults to `true`.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "test_pattern": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: When enabled, the camera will show a test pattern that can be used to debug connection issues.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_camera` component allows you to use ESP32-based camera boards in ESPHome that directly integrate into Home Assistant through the native API.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#esp32-camera-component)*"
    },
    "esp32_touch": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "esp32_touch::ESP32TouchComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for code generation.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "setup_mode": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Whether debug messages with the touch pad value should be displayed in the logs. Useful for finding out suitable thresholds for the binary sensors, but spam the logs. See [setting up touch pads](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-touch-binary-sensor) for more information. Defaults to false.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "iir_filter": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Optionally set up an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter should be applied to all touch pads. This can increase the accuracy of the touch pads a lot, but higher values decrease the response time. A good value to start with is `10ms`. Default is no IIR filter.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "sleep_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "27306us",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set a time period denoting the amount of time the touch peripheral should sleep between measurements. This can decrease power usage but make the sensor slower. Default is about 27 milliseconds.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "measurement_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "8192us",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set the conversion time for all touch pads. A longer conversion time means that more charge/discharge cycles of the touch pad can be performed, therefore increasing accuracy. Default is about 8ms, the maximum amount.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "low_voltage_reference": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0.5V",
              "markdownDescription": "The low voltage reference to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `0.5V`, `0.6V`, `0.7V`, `0.8V`. Default is `0.5V`.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "high_voltage_reference": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "2.7V",
              "markdownDescription": "The high voltage reference to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `2.4V`, `2.5V`, `2.6V`, `2.7V`. Default is `2.7V`.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "voltage_attenuation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0V",
              "markdownDescription": "The voltage attenuation to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `1.5V`, `1V`, `0.5V`, `0V`. Default is `0V`.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_touch` component creates a global hub for detecting touches on the eight touch pads of the ESP32 as [binary sensors](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-touch-binary-sensor).\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#component-hub)*"
    },
    "ethernet": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "ethernet::EthernetComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "type": {
              "enum": ["LAN8720", "TLK110"],
              "markdownDescription": "**string**: The type of LAN chipset. Must be one of `LAN8720` or `TLK110` (see datasheet for more details).\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "mdc_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The MDC pin of the board. Usually this is `GPIO23`.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "mdio_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The MDIO pin of the board. Usually this is `GPIO18`.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "clk_mode": {
              "enum": ["GPIO0_IN", "GPIO0_OUT", "GPIO16_OUT", "GPIO17_OUT"],
              "markdownDescription": "**string**: The clock mode of the data lines, this must be one of these values: (see datasheet of your board for more details)\n  * `GPIO0_IN` (Default) - External clock\n  \n  * `GPIO0_OUT` - Internal clock\n  \n  * `GPIO16_OUT` - Internal clock\n  \n  * `GPIO17_OUT` - Internal clock\n  \n  \n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "phy_addr": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The PHY addr type of the ethernet controller. Defaults to 0.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "power_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin with which to control the power of the board. Leave unspecified for no power pin (default)\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "manual_ip": {
              "$ref": "#/definitions/ethernet-manual_ip",
              "markdownDescription": "Manually configure the static IP of the node.\n  * **static_ip** (**Required**, IPv4 address): The static IP of your node.\n  \n  * **gateway** (**Required**, IPv4 address): The gateway of the local network.\n  \n  * **subnet** (**Required**, IPv4 address): The subnet of the local network.\n  \n  * **dns1** (*Optional*, IPv4 address): The main DNS server to use.\n  \n  * **dns2** (*Optional*, IPv4 address): The backup DNS server to use.\n  \n  \n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "enable_mdns": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: Controls if your node should advertise its presense and services using mDNS. When set to `false` you won\u2019t be able to access your node using its hostname which can break certain functionalities. Please see [notes on disabling mDNS](https://esphome.io/guides/faq.html#faq-notes-on-disabling-mdns). Defaults to `true`.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "domain": {
              "type": ["null", "object", "string", "array", "number"],
              "default": ".local",
              "markdownDescription": "**string**: Set the domain of the node hostname used for uploading. For example, if it\u2019s set to `.local`, all uploads will be sent to `<HOSTNAME>.local`. Defaults to `.local`.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "use_address": { "type": "string" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "This core ESPHome component sets up ethernet connections for ESP32s. Ethernet for ESP8266 is not supported.\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#ethernet-component)*"
    },
    "exposure_notifications": {
      "properties": {
        "on_exposure_notification": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/exposure_notifications-on_exposure_notification"
              }
            },
            {
              "$ref": "#/definitions/exposure_notifications-on_exposure_notification"
            }
          ],
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to run when an exposure notification bluetooth message is received.A variable `x` of type [exposure_notifications::ExposureNotification](https://esphome.io/api/structesphome_1_1exposure__notifications_1_1_exposure_notification.html) is passed to the automation.\n\n\n\n*See also: [Exposure Notification Listener](https://esphome.io/components/exposure_notifications.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "The `exposure_notifications` component uses the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html) to discover nearby COVID-19 exposure notification bluetooth messages sent by phones running the [Google/Apple Exposure Notification service](https://www.google.com/covid19/exposurenotifications/).\n\n*See also: [Exposure Notification Listener](https://esphome.io/components/exposure_notifications.html#exposure-notification-listener)*"
    },
    "external_components": {
      "anyOf": [
        { "$ref": "#/definitions/external_components" },
        {
          "type": "array",
          "items": { "$ref": "#/definitions/external_components" }
        }
      ],
      "markdownDescription": "You can easily import community or personal components using the external components feature. Bundled components can be overridden using this feature.\n\n*See also: [External Components](https://esphome.io/components/external_components.html#external-components)*"
    },
    "fingerprint_grow": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/fingerprint_grow" }
        },
        { "$ref": "#/definitions/fingerprint_grow" }
      ],
      "markdownDescription": "The reader can be powered by the 3.3V output of an NodeMCU. As the communication with the reader is done using UART (default baud rate is 57600), you need to have an [UART bus](https://esphome.io/components/uart.html#uart) in your configuration with the `rx_pin` connected to the reader\u2019s `TX` and the `tx_pin` connected to the reader\u2019s `RX`.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
    },
    "font": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/font" } },
        { "$ref": "#/definitions/font" }
      ],
      "markdownDescription": "The rendering engine also has a powerful font drawer which integrates seamlessly into ESPHome. Whereas in most Arduino display projects you have to use one of a few pre-defined fonts in very specific sizes, with ESPHome you have the option to use **any** TrueType (`.ttf`) font file at **any** size! Granted the reason for it is actually not having to worry about the licensing of font files :)\n\n*See also: [Display Component](https://esphome.io/components/display/index.html#drawing-static-text)*"
    },
    "globals": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/globals" } },
        { "$ref": "#/definitions/globals" }
      ],
      "markdownDescription": "In some cases you might require to share a global variable across multiple lambdas. For example, global variables can be used to store the state of a garage door.\n\n*See also: [Automations and Templates](https://esphome.io/guides/automations.html#global-variables)*"
    },
    "gps": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/gps" } },
        { "$ref": "#/definitions/gps" }
      ],
      "markdownDescription": "The `gps` component allows you to connect GPS modules to your ESPHome project. Any GPS module that uses the standardized NMEA communication protocol will work.\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#gps-component)*"
    },
    "http_request": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "http_request::HttpRequestComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#configuration-variables)*"
            },
            "useragent": {
              "type": "string",
              "default": "ESPHome",
              "markdownDescription": "**string**: User-Agent header for requests. Defaults to `ESPHome`.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#configuration-variables)*"
            },
            "timeout": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "5s",
              "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: Timeout for request. Defaults to `5s`.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `http_request` component lets you make HTTP/HTTPS requests.\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request)*"
    },
    "i2c": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/i2c" } },
        { "$ref": "#/definitions/i2c" }
      ],
      "markdownDescription": "This component sets up the I\u00b2C bus for your ESP32 or ESP8266. In order for these components to work correctly, you need to define the I\u00b2C bus in your configuration. Please note the ESP will enable its internal 10k\u2126 pullup resistors for these pins, so you usually don\u2019t need to put on external ones. You can use multiple devices on one I\u00b2C bus as each device is given a unique address for communicating between it and the ESP. You can do this by hopping wires from the two lines (SDA and SCL) from each device board to the next device board or by connecting the wires from each device back to the two I\u00b2C pins on the ESP.\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c-bus)*"
    },
    "image": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/image" } },
        { "$ref": "#/definitions/image" }
      ],
      "markdownDescription": "Use this component to store graphical images on the device, you can then draw the images on compatible displays.\n\n*See also: [Color](https://esphome.io/components/display/index.html#images)*"
    },
    "interval": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/interval" } },
        { "$ref": "#/definitions/interval" }
      ]
    },
    "logger": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "logger::Logger",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "baud_rate": {
              "type": "number",
              "default": 115200,
              "markdownDescription": "**int**: The baud rate to use for the serial UART port. Defaults to `115200`. Set to `0` to disable logging via UART.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "tx_buffer_size": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 512,
              "markdownDescription": "**int**: The size of the buffer used for log messages. Decrease this if you\u2019re having memory problems. Defaults to `512`.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "hardware_uart": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "UART0",
              "markdownDescription": "**string**: The Hardware UART to use for logging. Defaults to `UART0`.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "level": {
              "enum": [
                "NONE",
                "ERROR",
                "WARN",
                "INFO",
                "DEBUG",
                "VERBOSE",
                "VERY_VERBOSE"
              ],
              "markdownDescription": "**string**: The global log level. Any log message with a lower severity will not be shown. Defaults to `DEBUG`.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "logs": {
              "$ref": "#/definitions/logger-logs",
              "markdownDescription": "**mapping**: Manually set the log level for a specific component or tag. See [Manual Log Levels for more information](https://esphome.io/components/logger.html#logger-manual-tag-specific-levels).\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "on_message": {
              "$ref": "#/definitions/logger-on_message",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a message is to be looged. The vairables `int level`, `const char* tag` and `const char* message` are available for lambda processing.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "esp8266_store_log_strings_in_flash": {
              "type": "boolean",
              "markdownDescription": "**boolean**: If set to false, disables storing log strings in the flash section of the device (uses more memory). Defaults to true.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The logger component automatically logs all log messages through the serial port and through MQTT topics. By default, all logs with a severity higher than `DEBUG` will be shown. Decreasing the log level can help with the performance of the application and memory size.\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#logger-component)*"
    },
    "mcp23008": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23008" } },
        { "$ref": "#/definitions/mcp23008" }
      ]
    },
    "mcp23016": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23016" } },
        { "$ref": "#/definitions/mcp23016" }
      ]
    },
    "mcp23017": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23017" } },
        { "$ref": "#/definitions/mcp23017" }
      ]
    },
    "mcp23s08": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23s08" } },
        { "$ref": "#/definitions/mcp23s08" }
      ]
    },
    "mcp23s17": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23s17" } },
        { "$ref": "#/definitions/mcp23s17" }
      ]
    },
    "mcp3008": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp3008" } },
        { "$ref": "#/definitions/mcp3008" }
      ],
      "markdownDescription": "The MCP3008 component allows you to use MCP3008 8-Channel 10-Bit A/D Converter ([datasheet](http://ww1.microchip.com/downloads/en/DeviceDoc/21295d.pdf), [Adafruit](https://www.adafruit.com/product/856)) in ESPHome. It uses the [SPI Bus](https://esphome.io/components/spi.html#spi) for communication.\n\n*See also: [mcp3008 Component/Hub](https://esphome.io/components/sensor/mcp3008.html#component-hub)*"
    },
    "midea_dongle": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "midea_dongle::MideaDongle" },
            "strength_icon": { "type": "boolean", "default": false }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/uart_bus" }
      ]
    },
    "modbus": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/modbus" } },
        { "$ref": "#/definitions/modbus" }
      ]
    },
    "mpr121": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mpr121" } },
        { "$ref": "#/definitions/mpr121" }
      ],
      "markdownDescription": "The `mpr121` sensor platform allows you to use your MPR121 ([datasheet](https://cdn-learn.adafruit.com/downloads/pdf/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial.pdf), [Adafruit](https://learn.adafruit.com/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial/overview)) Capacitive Touch Sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#component-hub)*"
    },
    "mqtt": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "mqtt::MQTTClientComponent",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "broker": {
          "type": "string",
          "markdownDescription": "**string**: The host of your MQTT broker.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "port": {
          "type": "number",
          "default": 1883,
          "markdownDescription": "**int**: The port to connect to. Defaults to 1883.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "username": {
          "type": "string",
          "default": "",
          "markdownDescription": "**string**: The username to use for authentication. Empty (the default) means no authentication.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "password": {
          "type": "string",
          "default": "",
          "markdownDescription": "**string**: The password to use for authentication. Empty (the default) means no authentication.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "client_id": {
          "type": "string",
          "markdownDescription": "**string**: The client id to use for opening connections. See [Defaults](https://esphome.io/components/mqtt.html#mqtt-defaults) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "discovery": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**boolean**: If Home Assistant automatic discovery should be enabled. Defaults to `True`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "discovery_retain": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**boolean**: Whether to retain MQTT discovery messages so that entities are added automatically on Home Assistant restart. Defaults to `True`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "discovery_prefix": {
          "type": "string",
          "default": "homeassistant",
          "markdownDescription": "**string**: The prefix to use for Home Assistant\u2019s MQTT discovery. Should not contain trailing slash. Defaults to `homeassistant`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "birth_message": {
          "allOf": [
            {
              "properties": {
                "topic": { "type": "string" },
                "qos": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                },
                "retain": { "type": "boolean", "default": true },
                "payload": { "type": "string" }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "**[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message)**: The message to send when a connection to the broker is established. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "will_message": {
          "allOf": [
            {
              "properties": {
                "topic": { "type": "string" },
                "qos": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                },
                "retain": { "type": "boolean", "default": true },
                "payload": { "type": "string" }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "**[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message)**: The message to send when the MQTT connection is dropped. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "shutdown_message": {
          "allOf": [
            {
              "properties": {
                "topic": { "type": "string" },
                "qos": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                },
                "retain": { "type": "boolean", "default": true },
                "payload": { "type": "string" }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "**[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message)**: The message to send when the node shuts down and the connection is closed cleanly. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "topic_prefix": {
          "type": "string",
          "markdownDescription": "**string**: The prefix used for all MQTT messages. Should not contain trailing slash. Defaults to `<APP_NAME>`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "log_topic": {
          "allOf": [
            {
              "properties": {
                "topic": { "type": "string" },
                "qos": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                },
                "retain": { "type": "boolean", "default": true },
                "level": {
                  "enum": [
                    "NONE",
                    "ERROR",
                    "WARN",
                    "INFO",
                    "DEBUG",
                    "VERBOSE",
                    "VERY_VERBOSE"
                  ]
                }
              },
              "type": ["object", "null"]
            }
          ],
          "markdownDescription": "**[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message)**: The topic to send MQTT log messages to.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "ssl_fingerprints": {
          "anyOf": [
            { "$ref": "#/definitions/mqtt-ssl_fingerprints" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/mqtt-ssl_fingerprints" }
            }
          ],
          "markdownDescription": "**list**: Only on ESP8266. A list of SHA1 hashes used for verifying SSL connections. See [SSL Fingerprints](https://esphome.io/components/mqtt.html#mqtt-ssl-fingerprints) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "keepalive": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "15s",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time to keep the MQTT socket alive, decreasing this can help with overall stability due to more WiFi traffic with more pings. Defaults to 15 seconds.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "reboot_timeout": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "15min",
          "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time to wait before rebooting when no MQTT connection exists. Can be disabled by setting this to `0s`. Defaults to `15min`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "on_message": {
          "$ref": "#/definitions/mqtt-on_message",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a message on a specific MQTT topic is received. See [on_message Trigger](https://esphome.io/components/mqtt.html#mqtt-on-message).\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "on_json_message": {
          "$ref": "#/definitions/mqtt-on_json_message",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a JSON message on a specific MQTT topic is received. See [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-on-json-message).\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "The MQTT Client Component sets up the MQTT connection to your broker and is currently required for ESPHome to work. In most cases, you will just be able to copy over the [MQTT section](https://www.home-assistant.io/components/mqtt/) of your Home Assistant configuration.\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#mqtt-client-component)*"
    },
    "my9231": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/my9231" } },
        { "$ref": "#/definitions/my9231" }
      ],
      "markdownDescription": "The MY9231/MY9291 component represents a MY9231/MY9291 LED diver chain ([MY9231 description](http://www.my-semi.com.tw/file/MY9231_BF_0.91.pdf), [MY9291 description](http://www.my-semi.com.tw/file/MY9291_BF_0.91.pdf)) in ESPHome. Communication is done with two GPIO pins (DI and DCKI) and multiple driver chips can be chained. There are two models with different number of output channels (MY9291 with 4 channels and MY9231 with 3 channels). They are popular driver chips used in smart light bulbs:\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#component-hub)*"
    },
    "ota": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "ota::OTAComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "safe_mode": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: Whether to enable safe mode. Defaults to `True`.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "port": {
              "type": "number",
              "markdownDescription": "**int**: The port to use for OTA updates. Defaults to `3232` for the ESP32 and `8266` for the ESP8266.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "password": {
              "type": "string",
              "default": "",
              "markdownDescription": "**string**: The password to use for updates.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "reboot_timeout": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "5min",
              "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time to wait before rebooting when in safe mode. Defaults to `5min`.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "num_attempts": {
              "type": "number",
              "default": "10",
              "markdownDescription": "**int**: The number of attempts to wait before entering safe mode. Defaults to `10`.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "With the OTA (Over The Air) update component you can upload your firmware binaries to your node without having to use a USB cable for uploads. ESPHome natively supports this through its `run` and `upload` helper scripts.\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#ota-update-component)*"
    },
    "pca9685": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/pca9685" } },
        { "$ref": "#/definitions/pca9685" }
      ],
      "markdownDescription": "The PCA9685 component represents a PCA9685 12-bit PWM driver ([datasheet](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html#configure-channel), [adafruit](https://www.adafruit.com/product/815)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [pca9685 Component/Hub](https://esphome.io/components/output/pca9685.html#component-hub)*"
    },
    "pcf8574": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/pcf8574" } },
        { "$ref": "#/definitions/pcf8574" }
      ],
      "markdownDescription": "The PCF8574 component allows you to use PCF8574 or PCF8575 I/O expanders ([datasheet](http://www.ti.com/lit/ds/symlink/pcf8574.pdf), [SparkFun](https://www.sparkfun.com/products/retired/8130)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#pcf8574-i-o-expander)*"
    },
    "pn532": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/pn532" } },
        { "$ref": "#/definitions/pn532" }
      ],
      "markdownDescription": "The `pn532` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [SPI](https://esphome.io/components/spi.html#spi) or [I\u00b2C](https://esphome.io/components/i2c.html#i2c) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532.\n\n*See also: [pn532 Component/Hub](https://esphome.io/components/binary_sensor/pn532.html#component-hub)*"
    },
    "pn532_i2c": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "pn532::PN532",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#id1)*"
            },
            "on_tag": {
              "$ref": "#/definitions/pn532_i2c-on_tag",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#pn532-on-tag).\n\n\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#id1)*"
            },
            "on_finished_write": {
              "$ref": "#/definitions/pn532_i2c-on_finished_write"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each scan on the PN532. This affects the duration that the individual binary sensors stay active when they\u2019re found. If a device is not found within this time window, it will be marked as not present. Defaults to 1s.\n\n\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#id1)*"
            },
            "i2c_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [I\u00b2C Component](https://esphome.io/components/i2c.html#i2c) if you want to use multiple I\u00b2C buses.\n\n\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/i2c_bus" }
      ],
      "markdownDescription": "The `pn532` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [I\u00b2C](https://esphome.io/components/i2c.html#i2c) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532.\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#over-i2c)*"
    },
    "pn532_spi": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "pn532::PN532",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "on_tag": {
              "$ref": "#/definitions/pn532_i2c-on_tag",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#pn532-on-tag).\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "on_finished_write": {
              "$ref": "#/definitions/pn532_i2c-on_finished_write"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that the chip select line is connected to.\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each scan on the PN532. This affects the duration that the individual binary sensors stay active when they\u2019re found. If a device is not found within this time window, it will be marked as not present. Defaults to 1s.\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "spi_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/spi_bus" }
      ],
      "markdownDescription": "The `pn532_spi` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [SPI](https://esphome.io/components/spi.html#spi) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532.\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#over-spi)*"
    },
    "power_supply": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/power_supply" } },
        { "$ref": "#/definitions/power_supply" }
      ],
      "markdownDescription": "The `power_supply` component allows you to have a high power mode for certain outputs. For example, if you\u2019re using an [ATX power supply](https://en.wikipedia.org/wiki/ATX) to power your LED strips, you usually don\u2019t want to have the power supply on all the time while the output is not on. The power supply component can be attached to any [Output Component](https://esphome.io/components/output/index.html#output) and will automatically switch on if any of the outputs are on. Furthermore, it also has a cooldown time that keeps the power supply on for a while after the last output has been disabled.\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#power-supply-component)*"
    },
    "prometheus": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "prometheus::PrometheusHandler",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Prometheus Component](https://esphome.io/components/prometheus.html#configuration-variables)*"
            },
            "web_server_base_id": {
              "type": "string",
              "id_type": "web_server_base::WebServerBase"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `prometheus` component enables an HTTP endpoint for the [Web Server Component](https://esphome.io/components/web_server.html) in order to integrate a [Prometheus](https://prometheus.io/) installation.\n\n*See also: [Prometheus Component](https://esphome.io/components/prometheus.html#prometheus-component)*"
    },
    "rc522_i2c": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/rc522_i2c" } },
        { "$ref": "#/definitions/rc522_i2c" }
      ],
      "markdownDescription": "The `rc522_i2c` component allows you to use RC522 RFID controllers with ESPHome. This component is a global hub that establishes the connection to the RC522 via [I\u00b2C](https://esphome.io/components/i2c.html#i2c) (also avilable over SPI). Using the [RC522 binary sensors](https://esphome.io/components/binary_sensor/rc522.html#rc522-tag) you can then create individual binary sensors that track if an RFID tag is currently detected by the RC522.\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#over-i2c)*"
    },
    "rc522_spi": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/rc522_spi" } },
        { "$ref": "#/definitions/rc522_spi" }
      ],
      "markdownDescription": "The `rc522_spi` component allows you to use RC522 RFID controllers with ESPHome. This component is a global hub that establishes the connection to the RC522 via [SPI](https://esphome.io/components/spi.html#spi) (also avilable over I\u00b2C). Using the [RC522 binary sensors](https://esphome.io/components/binary_sensor/rc522.html#rc522-tag) you can then create individual binary sensors that track if an RFID tag is currently detected by the RC522.\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#over-spi)*"
    },
    "rdm6300": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rdm6300::RDM6300Component",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [rdm6300 Component/Hub](https://esphome.io/components/binary_sensor/rdm6300.html#configuration-variables)*"
            },
            "on_tag": {
              "$ref": "#/definitions/rdm6300-on_tag",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [on_tag](https://esphome.io/components/binary_sensor/rdm6300.html#rdm6300-on-tag).\n\n\n\n*See also: [rdm6300 Component/Hub](https://esphome.io/components/binary_sensor/rdm6300.html#configuration-variables)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [rdm6300 Component/Hub](https://esphome.io/components/binary_sensor/rdm6300.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/uart_bus" }
      ],
      "markdownDescription": "The `rdm6300` component allows you to use RDM6300 NFC/RFID controllers ([datasheet](https://elty.pl/upload/download/RFID/RDM630-Spec.pdf), [iTead](https://www.itead.cc/rdm6300.html)) with ESPHome. This component is a global hub that establishes the connection to the RDM6300 via [UART](https://esphome.io/components/uart.html#uart) and translates the received data. Using the [RDM6300 binary sensors](https://esphome.io/components/binary_sensor/rdm6300.html#rdm6300-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the RDM6300.\n\n*See also: [rdm6300 Component/Hub](https://esphome.io/components/binary_sensor/rdm6300.html#component-hub)*"
    },
    "remote_receiver": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/remote_receiver" }
        },
        { "$ref": "#/definitions/remote_receiver" }
      ],
      "markdownDescription": "The `remote_receiver` component lets you receive and decode any remote signal, these can for example be infrared remotes or 433MHz signals.\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#remote-receiver)*"
    },
    "remote_transmitter": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/remote_transmitter" }
        },
        { "$ref": "#/definitions/remote_transmitter" }
      ],
      "markdownDescription": "The `remote_transmitter` component lets you send digital packets to control devices in your home. For example this includes infrared data or 433MHz RF signals.\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#remote-transmitter)*"
    },
    "rf_bridge": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "rf_bridge::RFBridgeComponent",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [RF Bridge Component](https://esphome.io/components/rf_bridge.html#configuration-variables)*"
            },
            "on_code_received": {
              "$ref": "#/definitions/rf_bridge-on_code_received",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a code is received. See [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-code-received).\n\n\n\n*See also: [RF Bridge Component](https://esphome.io/components/rf_bridge.html#configuration-variables)*"
            },
            "on_advanced_code_received": {
              "$ref": "#/definitions/rf_bridge-on_advanced_code_received"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [RF Bridge Component](https://esphome.io/components/rf_bridge.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/uart_bus" },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `RF Bridge` Component provides the ability to send and receive 433MHz remote codes without hardware hacking the circuit board to bypass the `efm8bb1` MCU. This component implements the communcation protocol that the original `efm8bb1` firmware implements. The device is connected via the [UART bus](https://esphome.io/components/uart.html). The uart bus must be configured at the same speed of the module which is 19200bps.\n\n*See also: [RF Bridge Component](https://esphome.io/components/rf_bridge.html#rf-bridge-component)*"
    },
    "rtttl": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/rtttl" } },
        { "$ref": "#/definitions/rtttl" }
      ],
      "markdownDescription": "The `rtttl`, component allows you to easily connect a passive piezo buzzer to your microcontroller and play monophonic songs. It accepts the Ring Tone Text Transfer Language, rtttl format ([Wikipedia](https://en.wikipedia.org/wiki/Ring_Tone_Transfer_Language)) which allows to store simple melodies.\n\n*See also: [Rtttl Buzzer](https://esphome.io/components/rtttl.html#rtttl-buzzer)*"
    },
    "ruuvi_ble": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "ruuvi_ble::RuuviListener" },
            "esp32_ble_id": {
              "type": "string",
              "id_type": "esp32_ble_tracker::ESP32BLETracker"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "script": { "$ref": "#/definitions/script" },
    "servo": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/servo" } },
        { "$ref": "#/definitions/servo" }
      ],
      "markdownDescription": "The `servo` component allows you to use servo motors with ESPHome. Servos are motor controllers that contain all the electronics necessary for driving the motor and provide a simple PWM interface to control the motor.\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#servo-component)*"
    },
    "sim800l": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sim800l" } },
        { "$ref": "#/definitions/sim800l" }
      ],
      "markdownDescription": "The `SIM800L` Component provides the ability to dial, send and receive SMS text messages. The device must be connected via a [UART bus](https://esphome.io/components/uart.html) supporting both receiving and transmitting line. The UART bus must be configured at the same speed of the module which is by default 9600bps. The required connection wires are `+VCC`, `GND`, `RX` and `TX`.\n\n*See also: [Sim800L Component](https://esphome.io/components/sim800l.html#sim800l-component)*"
    },
    "sm16716": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sm16716" } },
        { "$ref": "#/definitions/sm16716" }
      ],
      "markdownDescription": "The SM16716 component represents a SM16716 LED diver chain ([SM16716 description](https://github.com/sowbug/sm16716/blob/master/SM16716%20Datasheet%20%5BChinese%5D.pdf), [SM16716 description](https://github.com/sowbug/sm16716/blob/master/SM16716%20Datasheet%20%5BChinese%5D.pdf)) in ESPHome. Communication is done with two GPIO pins (MOSI and SCLK) and multiple driver chips can be chained. It is used in some smart light bulbs:\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#component-hub)*"
    },
    "sm2135": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sm2135" } },
        { "$ref": "#/definitions/sm2135" }
      ],
      "markdownDescription": "The SM2135 component represents a SM2135 LED diver chain ([SM2135 description](https://github.com/arendst/Sonoff-Tasmota/files/3656603/SM2135E_zh-CN_en-US_translated.pdf), [SM2135 description](https://github.com/arendst/Sonoff-Tasmota/files/3656603/SM2135E_zh-CN_en-US_translated.pdf)) in ESPHome. Communication is done with two GPIO pins (MOSI and SCLK). It is used in some smart light bulbs:\n\n*See also: [sm2135 Component/Hub](https://esphome.io/components/output/sm2135.html#component-hub)*"
    },
    "sn74hc595": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sn74hc595" } },
        { "$ref": "#/definitions/sn74hc595" }
      ],
      "markdownDescription": "The SN74HC595 component allows you to use SN74HC595 shift registers as I/O expanders ([datasheet](http://www.ti.com/lit/ds/symlink/sn74hc595.pdf), [SparkFun](https://www.sparkfun.com/products/13699)) in ESPHome. It uses 3 wires (optionally 4) for communication.\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#sn74hc595-i-o-expander-shift-register)*"
    },
    "spi": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/spi" } },
        { "$ref": "#/definitions/spi" }
      ],
      "markdownDescription": "SPI is a very common high-speed protocol for a lot of devices. The SPI bus usually consists of 4 wires:\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#spi-bus)*"
    },
    "status_led": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "status_led::StatusLED",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Status LED](https://esphome.io/components/status_led.html#configuration-variables)*"
            },
            "pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The GPIO pin to operate the status LED on.\n\n\n\n*See also: [Status LED](https://esphome.io/components/status_led.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `status_led` hooks into all ESPHome components and can indicate the status of the device. Specifically, it will:\n\n*See also: [Status LED](https://esphome.io/components/status_led.html#status-led)*"
    },
    "substitutions": { "properties": {}, "type": ["object", "null"] },
    "sun": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "sun::Sun",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        },
        "time_id": { "type": "string", "id_type": "time::RealTimeClock" },
        "latitude": {
          "type": "number",
          "markdownDescription": "**float**: The latitude for performing the calculation.\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        },
        "longitude": {
          "type": "number",
          "markdownDescription": "**float**: The longitude for performing the calculation.\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        },
        "on_sunrise": {
          "$ref": "#/definitions/sun-on_sunrise",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform at sunrise when the sun crosses a specified angle.\n  * **elevation** (*Optional*, float): The elevation to cross. Defaults to 0\u00b0 (horizon).\n  \n  \n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        },
        "on_sunset": {
          "$ref": "#/definitions/sun-on_sunset",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform at sunset when the sun crosses a specified angle.\n  * **elevation** (*Optional*, float): The elevation to cross. Defaults to 0\u00b0 (horizon).\n  \n  \n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "The `sun` component allows you to track the sun\u2019s position in the sky.\n\n*See also: [Sun](https://esphome.io/components/sun.html#sun)*"
    },
    "sx1509": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sx1509" } },
        { "$ref": "#/definitions/sx1509" }
      ],
      "markdownDescription": "The SX1509 component allows you to expand your I/O capabilities: ([datasheet](https://www.semtech.com/uploads/documents/sx1509_evk_users_guide.pdf), [SparkFun](https://learn.sparkfun.com/tutorials/sx1509-io-expander-breakout-hookup-guide/all)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#sx1509-16-channel-i-o-expander-with-led-driver-and-keypad-engine)*"
    },
    "tca9548a": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/tca9548a" } },
        { "$ref": "#/definitions/tca9548a" }
      ],
      "markdownDescription": "The TCA9548A component allows you to use TCA9548A as a I\u00b2C multiplexer ([datasheet](https://www.ti.com/lit/ds/symlink/tca9548a.pdf), [AdaFruit](https://learn.adafruit.com/adafruit-tca9548a-1-to-8-i2c-multiplexer-breakout)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#tca9548a-i2c-multiplexer)*"
    },
    "tlc59208f": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/tlc59208f" } },
        { "$ref": "#/definitions/tlc59208f" }
      ]
    },
    "tm1651": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "tm1651::TM1651Display",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#configuration-variables)*"
        },
        "clk_pin": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: CLK pin\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#configuration-variables)*"
        },
        "dio_pin": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: DIO pin\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "The `tm1651` display platform allows you to use battery display units based on TM1651 chip, like [this one](https://aliexpress.com/item/32811491559.html) with ESPHome. Currently integration supports level and brightness setting. All updates can be made via lambda expressions.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-battery-display)*"
    },
    "ttp229_bsf": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ttp229_bsf" } },
        { "$ref": "#/definitions/ttp229_bsf" }
      ]
    },
    "ttp229_lsf": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ttp229_lsf" } },
        { "$ref": "#/definitions/ttp229_lsf" }
      ]
    },
    "tuya": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "tuya::Tuya" },
            "time_id": {
              "type": "string",
              "id_type": "time::RealTimeClock",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Some Tuya devices support obtaining local time from ESPHome. Specify the ID of the [Time Component](https://esphome.io/components/time.html#time) which will be used.\n\n\n\n*See also: [Tuya MCU](https://esphome.io/components/tuya.html#configuration-variables)*"
            },
            "ignore_mcu_update_on_datapoints": {
              "anyOf": [
                {
                  "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
                  }
                }
              ],
              "markdownDescription": "**list**: A list of datapoints to ignore MCU updates for.  Useful for certain broken/erratic hardware and debugging.\n\n\n\n*See also: [Tuya MCU](https://esphome.io/components/tuya.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/uart_bus" }
      ],
      "markdownDescription": "The `tuya` component creates a serial connection to the Tuya MCU for platforms to use.\n\n*See also: [Tuya MCU](https://esphome.io/components/tuya.html#tuya-mcu)*"
    },
    "uart": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/uart" } },
        { "$ref": "#/definitions/uart" }
      ],
      "markdownDescription": "UART is a common serial protocol for a lot of devices. For example, when uploading a binary to your ESP you have probably used UART to access the chip. UART (or for Arduino often also called Serial) usually consists of 2 pins:\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#uart-bus)*"
    },
    "web_server": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "string",
              "id_type": "web_server::WebServer",
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "port": {
              "type": "number",
              "default": 80,
              "markdownDescription": "**int**: The port the web server should open its socket on.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "css_url": {
              "type": "string",
              "default": "https://esphome.io/_static/webserver-v1.min.css",
              "markdownDescription": "**url**: The URL that should be used for the CSS stylesheet. Defaults to [https://esphome.io/_static/webserver-v1.min.css](https://esphome.io/_static/webserver-v1.min.css) (updates will go to `v2`, `v3`, etc). Can be set to empty string.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "css_include": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**local file**: Path to local file to be included in web server index page. Contents of this file will be served as `/0.css` and used as CSS stylesheet by internal webserver. Useful when building device without internet access, where you want to use built-in AP and webserver.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "js_url": {
              "type": "string",
              "default": "https://esphome.io/_static/webserver-v1.min.js",
              "markdownDescription": "**url**: The URL that should be used for the JS script. Defaults to [https://esphome.io/_static/webserver-v1.min.js](https://esphome.io/_static/webserver-v1.min.js). Can be set to empty string.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "js_include": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**local file**: Path to local file to be included in web server index page. Contents of this file will be served as `/0.js` and used as JS script by internal webserver. Useful when building device without internet access, where you want to use built-in AP and webserver.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "auth": {
              "$ref": "#/definitions/web_server-auth",
              "markdownDescription": "Enables basic authentication with username and password.\n  * **username** (**Required**, string): The username to use for authentication.\n  \n  * **password** (**Required**, string): The password to check for authentication.\n  \n  \n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "web_server_base_id": {
              "type": "string",
              "id_type": "web_server_base::WebServerBase"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `web_server` component creates a simple web server on the node that can be accessed through any browser and a simple [REST API](https://esphome.io/web-api/index.html). Please note that enabling this component will take up *a lot* of memory and can lead to problems, especially on the ESP8266.\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#web-server-component)*"
    },
    "web_server_base": {
      "properties": {
        "id": { "type": "string", "id_type": "web_server_base::WebServerBase" }
      },
      "type": ["object", "null"]
    },
    "wifi": {
      "properties": {
        "id": {
          "type": "string",
          "id_type": "wifi::WiFiComponent",
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "networks": {
          "anyOf": [
            { "$ref": "#/definitions/wifi-networks" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/wifi-networks" }
            }
          ],
          "markdownDescription": "Configure multiple WiFi networks to connect to, the best one that is reachable will be connected to. See [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#wifi-networks).\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "ssid": {
          "type": "string",
          "markdownDescription": "**string**: The name (or [service set identifier](https://www.lifewire.com/definition-of-service-set-identifier-816547)) of the WiFi access point your device should connect to.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "password": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The password (or PSK) for your WiFi network. Leave empty for no password.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "manual_ip": {
          "$ref": "#/definitions/ethernet-manual_ip",
          "markdownDescription": "Manually configure the static IP of the node.\n  * **static_ip** (**Required**, IPv4 address): The static IP of your node.\n  \n  * **gateway** (**Required**, IPv4 address): The gateway of the local network.\n  \n  * **subnet** (**Required**, IPv4 address): The subnet of the local network.\n  \n  * **dns1** (*Optional*, IPv4 address): The main DNS server to use.\n  \n  * **dns2** (*Optional*, IPv4 address): The backup DNS server to use.\n  \n  \n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "eap": {
          "properties": {
            "identity": { "type": "string" },
            "username": { "type": "string" },
            "password": { "type": "string" },
            "certificate_authority": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "certificate": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "key": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"]
        },
        "ap": {
          "$ref": "#/definitions/wifi-ap",
          "markdownDescription": "Enable an access point mode on the node.\n  * **ssid** (**Required**, string): The name of the access point to create.\n  \n  * **password** (*Optional*, string): The password for the access point. Leave empty for no password.\n  \n  * **channel** (*Optional*, int): The channel the AP should operate on from 1 to 14. Defaults to 1.\n  \n  * **manual_ip** (*Optional*): Manually set the IP options for the AP. Same options as manual_ip for station mode.\n  \n  * **ap_timeout** (*Optional*, [time](https://esphome.io/guides/configuration-types.html#config-time)): The time after which to enable the configured fallback hotspot. Defaults to `1min`.\n  \n  \n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "enable_mdns": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**boolean**: Controls if your node should advertise its presense and services using mDNS. When set to `false` you won\u2019t be able to access your node using its hostname which can break certain functionalities. Please see [notes on disabling mDNS](https://esphome.io/guides/faq.html#faq-notes-on-disabling-mdns). Defaults to `true`.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "domain": {
          "type": ["null", "object", "string", "array", "number"],
          "default": ".local",
          "markdownDescription": "**string**: Set the domain of the node hostname used for uploading. For example, if it\u2019s set to `.local`, all uploads will be sent to `<HOSTNAME>.local`. Defaults to `.local`.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "reboot_timeout": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "15min",
          "markdownDescription": "**[time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time to wait before rebooting when no WiFi connection exists. Can be disabled by setting this to `0s`, but note that the low level IP stack currently seems to have issues with WiFi where a full reboot is required to get the interface back working. Defaults to `15min`.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "power_save_mode": {
          "enum": ["NONE", "LIGHT", "HIGH"],
          "markdownDescription": "**string**: The power save mode for the WiFi interface. See [Power Save Mode](https://esphome.io/components/wifi.html#wifi-power-save-mode)\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "fast_connect": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If enabled, directly connects to WiFi network without doing a full scan first. This is required for hidden networks and can significantly improve connection times. Defaults to `off`. The downside is that this option connects to the first network the ESP sees, even if that network is very far away and better ones are available.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "use_address": {
          "type": "string",
          "markdownDescription": "**string**: Manually override what address to use to connect to the ESP. Defaults to auto-generated value. Example, if you have changed your static IP and want to flash OTA to the previously configured IP address.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "output_power": {
          "type": "number",
          "markdownDescription": "**string**: The amount of TX power for the WiFi interface from 10dB to 20.5dB. Default for ESP8266 is 20dB, 20.5dB might cause unexpected restarts.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "This core ESPHome component sets up WiFi connections to access points for you. It needs to be in your configuration or otherwise ESPHome will fail in the config validation stage.\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#wifi-component)*"
    },
    "wled": {},
    "xiaomi_ble": {
      "allOf": [
        {
          "properties": {
            "id": { "type": "string", "id_type": "xiaomi_ble::XiaomiListener" },
            "esp32_ble_id": {
              "type": "string",
              "id_type": "esp32_ble_tracker::ESP32BLETracker"
            }
          },
          "type": ["object", "null"]
        }
      ],
      "markdownDescription": "The `xiaomi_ble` sensor platform lets you track the output of Xiaomi Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track, for example, the temperature, humidity, moisture, conductivity, illuminance, formaldehyde, mosquito tablet and battery level of the device every time the sensor sends out a BLE broadcast. Contrary to other implementations, `xiaomi_ble` listense passively to advertisement packets and does not pair with the device. Hence ESPHome has no impact on battery life.\n\n*See also: [Xiaomi Mijia BLE Sensors](https://esphome.io/components/sensor/xiaomi_ble.html#xiaomi-mijia-ble-sensors)*"
    }
  }
}
